
reflow.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  000050f8  000051ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000050f8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a2  0080016e  0080016e  0000521a  2**0
                  ALLOC
  3 .eeprom       00000062  00810000  00810000  0000521a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000527c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000052ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000052b7  00000000  00000000  00005454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000059a  00000000  00000000  0000a70b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000edb  00000000  00000000  0000aca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ad4  00000000  00000000  0000bb80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cb7  00000000  00000000  0000c654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004bf9  00000000  00000000  0000d30b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00011f04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__ctors_end>
       4:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
       8:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
       c:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      10:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      14:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      18:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      1c:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      20:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      24:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      28:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      2c:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      30:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      34:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      38:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <__vector_14>
      3c:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      40:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      44:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      48:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      4c:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      50:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      54:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      58:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      5c:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      60:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      64:	0c 94 12 03 	jmp	0x624	; 0x624 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef98a>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efbba>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7ef9d8>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <_Z13setAddrWindowiiii+0x8>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	00 00       	nop
      ec:	00 00       	nop
      ee:	00 3e       	cpi	r16, 0xE0	; 224
      f0:	5b 4f       	sbci	r21, 0xFB	; 251
      f2:	5b 3e       	cpi	r21, 0xEB	; 235
      f4:	3e 6b       	ori	r19, 0xBE	; 190
      f6:	4f 6b       	ori	r20, 0xBF	; 191
      f8:	3e 1c       	adc	r3, r14
      fa:	3e 7c       	andi	r19, 0xCE	; 206
      fc:	3e 1c       	adc	r3, r14
      fe:	18 3c       	cpi	r17, 0xC8	; 200
     100:	7e 3c       	cpi	r23, 0xCE	; 206
     102:	18 1c       	adc	r1, r8
     104:	57 7d       	andi	r21, 0xD7	; 215
     106:	57 1c       	adc	r5, r7
     108:	1c 5e       	subi	r17, 0xEC	; 236
     10a:	7f 5e       	subi	r23, 0xEF	; 239
     10c:	1c 00       	.word	0x001c	; ????
     10e:	18 3c       	cpi	r17, 0xC8	; 200
     110:	18 00       	.word	0x0018	; ????
     112:	ff e7       	ldi	r31, 0x7F	; 127
     114:	c3 e7       	ldi	r28, 0x73	; 115
     116:	ff 00       	.word	0x00ff	; ????
     118:	18 24       	eor	r1, r8
     11a:	18 00       	.word	0x0018	; ????
     11c:	ff e7       	ldi	r31, 0x7F	; 127
     11e:	db e7       	ldi	r29, 0x7B	; 123
     120:	ff 30       	cpi	r31, 0x0F	; 15
     122:	48 3a       	cpi	r20, 0xA8	; 168
     124:	06 0e       	add	r0, r22
     126:	26 29       	or	r18, r6
     128:	79 29       	or	r23, r9
     12a:	26 40       	sbci	r18, 0x06	; 6
     12c:	7f 05       	cpc	r23, r15
     12e:	05 07       	cpc	r16, r21
     130:	40 7f       	andi	r20, 0xF0	; 240
     132:	05 25       	eor	r16, r5
     134:	3f 5a       	subi	r19, 0xAF	; 175
     136:	3c e7       	ldi	r19, 0x7C	; 124
     138:	3c 5a       	subi	r19, 0xAC	; 172
     13a:	7f 3e       	cpi	r23, 0xEF	; 239
     13c:	1c 1c       	adc	r1, r12
     13e:	08 08       	sbc	r0, r8
     140:	1c 1c       	adc	r1, r12
     142:	3e 7f       	andi	r19, 0xFE	; 254
     144:	14 22       	and	r1, r20
     146:	7f 22       	and	r7, r31
     148:	14 5f       	subi	r17, 0xF4	; 244
     14a:	5f 00       	.word	0x005f	; ????
     14c:	5f 5f       	subi	r21, 0xFF	; 255
     14e:	06 09       	sbc	r16, r6
     150:	7f 01       	movw	r14, r30
     152:	7f 00       	.word	0x007f	; ????
     154:	66 89       	ldd	r22, Z+22	; 0x16
     156:	95 6a       	ori	r25, 0xA5	; 165
     158:	60 60       	ori	r22, 0x00	; 0
     15a:	60 60       	ori	r22, 0x00	; 0
     15c:	60 94       	com	r6
     15e:	a2 ff       	sbrs	r26, 2
     160:	a2 94       	swap	r10
     162:	08 04       	cpc	r0, r8
     164:	7e 04       	cpc	r7, r14
     166:	08 10       	cpse	r0, r8
     168:	20 7e       	andi	r18, 0xE0	; 224
     16a:	20 10       	cpse	r2, r0
     16c:	08 08       	sbc	r0, r8
     16e:	2a 1c       	adc	r2, r10
     170:	08 08       	sbc	r0, r8
     172:	1c 2a       	or	r1, r28
     174:	08 08       	sbc	r0, r8
     176:	1e 10       	cpse	r1, r14
     178:	10 10       	cpse	r1, r0
     17a:	10 0c       	add	r1, r0
     17c:	1e 0c       	add	r1, r14
     17e:	1e 0c       	add	r1, r14
     180:	30 38       	cpi	r19, 0x80	; 128
     182:	3e 38       	cpi	r19, 0x8E	; 142
     184:	30 06       	cpc	r3, r16
     186:	0e 3e       	cpi	r16, 0xEE	; 238
     188:	0e 06       	cpc	r0, r30
     18a:	00 00       	nop
     18c:	00 00       	nop
     18e:	00 00       	nop
     190:	00 5f       	subi	r16, 0xF0	; 240
     192:	00 00       	nop
     194:	00 07       	cpc	r16, r16
     196:	00 07       	cpc	r16, r16
     198:	00 14       	cp	r0, r0
     19a:	7f 14       	cp	r7, r15
     19c:	7f 14       	cp	r7, r15
     19e:	24 2a       	or	r2, r20
     1a0:	7f 2a       	or	r7, r31
     1a2:	12 23       	and	r17, r18
     1a4:	13 08       	sbc	r1, r3
     1a6:	64 62       	ori	r22, 0x24	; 36
     1a8:	36 49       	sbci	r19, 0x96	; 150
     1aa:	56 20       	and	r5, r6
     1ac:	50 00       	.word	0x0050	; ????
     1ae:	08 07       	cpc	r16, r24
     1b0:	03 00       	.word	0x0003	; ????
     1b2:	00 1c       	adc	r0, r0
     1b4:	22 41       	sbci	r18, 0x12	; 18
     1b6:	00 00       	nop
     1b8:	41 22       	and	r4, r17
     1ba:	1c 00       	.word	0x001c	; ????
     1bc:	2a 1c       	adc	r2, r10
     1be:	7f 1c       	adc	r7, r15
     1c0:	2a 08       	sbc	r2, r10
     1c2:	08 3e       	cpi	r16, 0xE8	; 232
     1c4:	08 08       	sbc	r0, r8
     1c6:	00 80       	ld	r0, Z
     1c8:	70 30       	cpi	r23, 0x00	; 0
     1ca:	00 08       	sbc	r0, r0
     1cc:	08 08       	sbc	r0, r8
     1ce:	08 08       	sbc	r0, r8
     1d0:	00 00       	nop
     1d2:	60 60       	ori	r22, 0x00	; 0
     1d4:	00 20       	and	r0, r0
     1d6:	10 08       	sbc	r1, r0
     1d8:	04 02       	muls	r16, r20
     1da:	3e 51       	subi	r19, 0x1E	; 30
     1dc:	49 45       	sbci	r20, 0x59	; 89
     1de:	3e 00       	.word	0x003e	; ????
     1e0:	42 7f       	andi	r20, 0xF2	; 242
     1e2:	40 00       	.word	0x0040	; ????
     1e4:	72 49       	sbci	r23, 0x92	; 146
     1e6:	49 49       	sbci	r20, 0x99	; 153
     1e8:	46 21       	and	r20, r6
     1ea:	41 49       	sbci	r20, 0x91	; 145
     1ec:	4d 33       	cpi	r20, 0x3D	; 61
     1ee:	18 14       	cp	r1, r8
     1f0:	12 7f       	andi	r17, 0xF2	; 242
     1f2:	10 27       	eor	r17, r16
     1f4:	45 45       	sbci	r20, 0x55	; 85
     1f6:	45 39       	cpi	r20, 0x95	; 149
     1f8:	3c 4a       	sbci	r19, 0xAC	; 172
     1fa:	49 49       	sbci	r20, 0x99	; 153
     1fc:	31 41       	sbci	r19, 0x11	; 17
     1fe:	21 11       	cpse	r18, r1
     200:	09 07       	cpc	r16, r25
     202:	36 49       	sbci	r19, 0x96	; 150
     204:	49 49       	sbci	r20, 0x99	; 153
     206:	36 46       	sbci	r19, 0x66	; 102
     208:	49 49       	sbci	r20, 0x99	; 153
     20a:	29 1e       	adc	r2, r25
     20c:	00 00       	nop
     20e:	14 00       	.word	0x0014	; ????
     210:	00 00       	nop
     212:	40 34       	cpi	r20, 0x40	; 64
     214:	00 00       	nop
     216:	00 08       	sbc	r0, r0
     218:	14 22       	and	r1, r20
     21a:	41 14       	cp	r4, r1
     21c:	14 14       	cp	r1, r4
     21e:	14 14       	cp	r1, r4
     220:	00 41       	sbci	r16, 0x10	; 16
     222:	22 14       	cp	r2, r2
     224:	08 02       	muls	r16, r24
     226:	01 59       	subi	r16, 0x91	; 145
     228:	09 06       	cpc	r0, r25
     22a:	3e 41       	sbci	r19, 0x1E	; 30
     22c:	5d 59       	subi	r21, 0x9D	; 157
     22e:	4e 7c       	andi	r20, 0xCE	; 206
     230:	12 11       	cpse	r17, r2
     232:	12 7c       	andi	r17, 0xC2	; 194
     234:	7f 49       	sbci	r23, 0x9F	; 159
     236:	49 49       	sbci	r20, 0x99	; 153
     238:	36 3e       	cpi	r19, 0xE6	; 230
     23a:	41 41       	sbci	r20, 0x11	; 17
     23c:	41 22       	and	r4, r17
     23e:	7f 41       	sbci	r23, 0x1F	; 31
     240:	41 41       	sbci	r20, 0x11	; 17
     242:	3e 7f       	andi	r19, 0xFE	; 254
     244:	49 49       	sbci	r20, 0x99	; 153
     246:	49 41       	sbci	r20, 0x19	; 25
     248:	7f 09       	sbc	r23, r15
     24a:	09 09       	sbc	r16, r9
     24c:	01 3e       	cpi	r16, 0xE1	; 225
     24e:	41 41       	sbci	r20, 0x11	; 17
     250:	51 73       	andi	r21, 0x31	; 49
     252:	7f 08       	sbc	r7, r15
     254:	08 08       	sbc	r0, r8
     256:	7f 00       	.word	0x007f	; ????
     258:	41 7f       	andi	r20, 0xF1	; 241
     25a:	41 00       	.word	0x0041	; ????
     25c:	20 40       	sbci	r18, 0x00	; 0
     25e:	41 3f       	cpi	r20, 0xF1	; 241
     260:	01 7f       	andi	r16, 0xF1	; 241
     262:	08 14       	cp	r0, r8
     264:	22 41       	sbci	r18, 0x12	; 18
     266:	7f 40       	sbci	r23, 0x0F	; 15
     268:	40 40       	sbci	r20, 0x00	; 0
     26a:	40 7f       	andi	r20, 0xF0	; 240
     26c:	02 1c       	adc	r0, r2
     26e:	02 7f       	andi	r16, 0xF2	; 242
     270:	7f 04       	cpc	r7, r15
     272:	08 10       	cpse	r0, r8
     274:	7f 3e       	cpi	r23, 0xEF	; 239
     276:	41 41       	sbci	r20, 0x11	; 17
     278:	41 3e       	cpi	r20, 0xE1	; 225
     27a:	7f 09       	sbc	r23, r15
     27c:	09 09       	sbc	r16, r9
     27e:	06 3e       	cpi	r16, 0xE6	; 230
     280:	41 51       	subi	r20, 0x11	; 17
     282:	21 5e       	subi	r18, 0xE1	; 225
     284:	7f 09       	sbc	r23, r15
     286:	19 29       	or	r17, r9
     288:	46 26       	eor	r4, r22
     28a:	49 49       	sbci	r20, 0x99	; 153
     28c:	49 32       	cpi	r20, 0x29	; 41
     28e:	03 01       	movw	r0, r6
     290:	7f 01       	movw	r14, r30
     292:	03 3f       	cpi	r16, 0xF3	; 243
     294:	40 40       	sbci	r20, 0x00	; 0
     296:	40 3f       	cpi	r20, 0xF0	; 240
     298:	1f 20       	and	r1, r15
     29a:	40 20       	and	r4, r0
     29c:	1f 3f       	cpi	r17, 0xFF	; 255
     29e:	40 38       	cpi	r20, 0x80	; 128
     2a0:	40 3f       	cpi	r20, 0xF0	; 240
     2a2:	63 14       	cp	r6, r3
     2a4:	08 14       	cp	r0, r8
     2a6:	63 03       	mulsu	r22, r19
     2a8:	04 78       	andi	r16, 0x84	; 132
     2aa:	04 03       	mulsu	r16, r20
     2ac:	61 59       	subi	r22, 0x91	; 145
     2ae:	49 4d       	sbci	r20, 0xD9	; 217
     2b0:	43 00       	.word	0x0043	; ????
     2b2:	7f 41       	sbci	r23, 0x1F	; 31
     2b4:	41 41       	sbci	r20, 0x11	; 17
     2b6:	02 04       	cpc	r0, r2
     2b8:	08 10       	cpse	r0, r8
     2ba:	20 00       	.word	0x0020	; ????
     2bc:	41 41       	sbci	r20, 0x11	; 17
     2be:	41 7f       	andi	r20, 0xF1	; 241
     2c0:	04 02       	muls	r16, r20
     2c2:	01 02       	muls	r16, r17
     2c4:	04 40       	sbci	r16, 0x04	; 4
     2c6:	40 40       	sbci	r20, 0x00	; 0
     2c8:	40 40       	sbci	r20, 0x00	; 0
     2ca:	00 03       	mulsu	r16, r16
     2cc:	07 08       	sbc	r0, r7
     2ce:	00 20       	and	r0, r0
     2d0:	54 54       	subi	r21, 0x44	; 68
     2d2:	78 40       	sbci	r23, 0x08	; 8
     2d4:	7f 28       	or	r7, r15
     2d6:	44 44       	sbci	r20, 0x44	; 68
     2d8:	38 38       	cpi	r19, 0x88	; 136
     2da:	44 44       	sbci	r20, 0x44	; 68
     2dc:	44 28       	or	r4, r4
     2de:	38 44       	sbci	r19, 0x48	; 72
     2e0:	44 28       	or	r4, r4
     2e2:	7f 38       	cpi	r23, 0x8F	; 143
     2e4:	54 54       	subi	r21, 0x44	; 68
     2e6:	54 18       	sub	r5, r4
     2e8:	00 08       	sbc	r0, r0
     2ea:	7e 09       	sbc	r23, r14
     2ec:	02 18       	sub	r0, r2
     2ee:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2f0:	9c 78       	andi	r25, 0x8C	; 140
     2f2:	7f 08       	sbc	r7, r15
     2f4:	04 04       	cpc	r0, r4
     2f6:	78 00       	.word	0x0078	; ????
     2f8:	44 7d       	andi	r20, 0xD4	; 212
     2fa:	40 00       	.word	0x0040	; ????
     2fc:	20 40       	sbci	r18, 0x00	; 0
     2fe:	40 3d       	cpi	r20, 0xD0	; 208
     300:	00 7f       	andi	r16, 0xF0	; 240
     302:	10 28       	or	r1, r0
     304:	44 00       	.word	0x0044	; ????
     306:	00 41       	sbci	r16, 0x10	; 16
     308:	7f 40       	sbci	r23, 0x0F	; 15
     30a:	00 7c       	andi	r16, 0xC0	; 192
     30c:	04 78       	andi	r16, 0x84	; 132
     30e:	04 78       	andi	r16, 0x84	; 132
     310:	7c 08       	sbc	r7, r12
     312:	04 04       	cpc	r0, r4
     314:	78 38       	cpi	r23, 0x88	; 136
     316:	44 44       	sbci	r20, 0x44	; 68
     318:	44 38       	cpi	r20, 0x84	; 132
     31a:	fc 18       	sub	r15, r12
     31c:	24 24       	eor	r2, r4
     31e:	18 18       	sub	r1, r8
     320:	24 24       	eor	r2, r4
     322:	18 fc       	.word	0xfc18	; ????
     324:	7c 08       	sbc	r7, r12
     326:	04 04       	cpc	r0, r4
     328:	08 48       	sbci	r16, 0x88	; 136
     32a:	54 54       	subi	r21, 0x44	; 68
     32c:	54 24       	eor	r5, r4
     32e:	04 04       	cpc	r0, r4
     330:	3f 44       	sbci	r19, 0x4F	; 79
     332:	24 3c       	cpi	r18, 0xC4	; 196
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	20 7c       	andi	r18, 0xC0	; 192
     338:	1c 20       	and	r1, r12
     33a:	40 20       	and	r4, r0
     33c:	1c 3c       	cpi	r17, 0xCC	; 204
     33e:	40 30       	cpi	r20, 0x00	; 0
     340:	40 3c       	cpi	r20, 0xC0	; 192
     342:	44 28       	or	r4, r4
     344:	10 28       	or	r1, r0
     346:	44 4c       	sbci	r20, 0xC4	; 196
     348:	90 90 90 7c 	lds	r9, 0x7C90
     34c:	44 64       	ori	r20, 0x44	; 68
     34e:	54 4c       	sbci	r21, 0xC4	; 196
     350:	44 00       	.word	0x0044	; ????
     352:	08 36       	cpi	r16, 0x68	; 104
     354:	41 00       	.word	0x0041	; ????
     356:	00 00       	nop
     358:	77 00       	.word	0x0077	; ????
     35a:	00 00       	nop
     35c:	41 36       	cpi	r20, 0x61	; 97
     35e:	08 00       	.word	0x0008	; ????
     360:	02 01       	movw	r0, r4
     362:	02 04       	cpc	r0, r2
     364:	02 3c       	cpi	r16, 0xC2	; 194
     366:	26 23       	and	r18, r22
     368:	26 3c       	cpi	r18, 0xC6	; 198
     36a:	1e a1       	ldd	r17, Y+38	; 0x26
     36c:	a1 61       	ori	r26, 0x11	; 17
     36e:	12 3a       	cpi	r17, 0xA2	; 162
     370:	40 40       	sbci	r20, 0x00	; 0
     372:	20 7a       	andi	r18, 0xA0	; 160
     374:	38 54       	subi	r19, 0x48	; 72
     376:	54 55       	subi	r21, 0x54	; 84
     378:	59 21       	and	r21, r9
     37a:	55 55       	subi	r21, 0x55	; 85
     37c:	79 41       	sbci	r23, 0x19	; 25
     37e:	22 54       	subi	r18, 0x42	; 66
     380:	54 78       	andi	r21, 0x84	; 132
     382:	42 21       	and	r20, r2
     384:	55 54       	subi	r21, 0x45	; 69
     386:	78 40       	sbci	r23, 0x08	; 8
     388:	20 54       	subi	r18, 0x40	; 64
     38a:	55 79       	andi	r21, 0x95	; 149
     38c:	40 0c       	add	r4, r0
     38e:	1e 52       	subi	r17, 0x2E	; 46
     390:	72 12       	cpse	r7, r18
     392:	39 55       	subi	r19, 0x59	; 89
     394:	55 55       	subi	r21, 0x55	; 85
     396:	59 39       	cpi	r21, 0x99	; 153
     398:	54 54       	subi	r21, 0x44	; 68
     39a:	54 59       	subi	r21, 0x94	; 148
     39c:	39 55       	subi	r19, 0x59	; 89
     39e:	54 54       	subi	r21, 0x44	; 68
     3a0:	58 00       	.word	0x0058	; ????
     3a2:	00 45       	sbci	r16, 0x50	; 80
     3a4:	7c 41       	sbci	r23, 0x1C	; 28
     3a6:	00 02       	muls	r16, r16
     3a8:	45 7d       	andi	r20, 0xD5	; 213
     3aa:	42 00       	.word	0x0042	; ????
     3ac:	01 45       	sbci	r16, 0x51	; 81
     3ae:	7c 40       	sbci	r23, 0x0C	; 12
     3b0:	7d 12       	cpse	r7, r29
     3b2:	11 12       	cpse	r1, r17
     3b4:	7d f0       	brhs	.+30     	; 0x3d4 <__trampolines_end+0x2ea>
     3b6:	28 25       	eor	r18, r8
     3b8:	28 f0       	brcs	.+10     	; 0x3c4 <__trampolines_end+0x2da>
     3ba:	7c 54       	subi	r23, 0x4C	; 76
     3bc:	55 45       	sbci	r21, 0x55	; 85
     3be:	00 20       	and	r0, r0
     3c0:	54 54       	subi	r21, 0x44	; 68
     3c2:	7c 54       	subi	r23, 0x4C	; 76
     3c4:	7c 0a       	sbc	r7, r28
     3c6:	09 7f       	andi	r16, 0xF9	; 249
     3c8:	49 32       	cpi	r20, 0x29	; 41
     3ca:	49 49       	sbci	r20, 0x99	; 153
     3cc:	49 32       	cpi	r20, 0x29	; 41
     3ce:	3a 44       	sbci	r19, 0x4A	; 74
     3d0:	44 44       	sbci	r20, 0x44	; 68
     3d2:	3a 32       	cpi	r19, 0x2A	; 42
     3d4:	4a 48       	sbci	r20, 0x8A	; 138
     3d6:	48 30       	cpi	r20, 0x08	; 8
     3d8:	3a 41       	sbci	r19, 0x1A	; 26
     3da:	41 21       	and	r20, r1
     3dc:	7a 3a       	cpi	r23, 0xAA	; 170
     3de:	42 40       	sbci	r20, 0x02	; 2
     3e0:	20 78       	andi	r18, 0x80	; 128
     3e2:	00 9d       	mul	r16, r0
     3e4:	a0 a0       	ldd	r10, Z+32	; 0x20
     3e6:	7d 3d       	cpi	r23, 0xDD	; 221
     3e8:	42 42       	sbci	r20, 0x22	; 34
     3ea:	42 3d       	cpi	r20, 0xD2	; 210
     3ec:	3d 40       	sbci	r19, 0x0D	; 13
     3ee:	40 40       	sbci	r20, 0x00	; 0
     3f0:	3d 3c       	cpi	r19, 0xCD	; 205
     3f2:	24 ff       	sbrs	r18, 4
     3f4:	24 24       	eor	r2, r4
     3f6:	48 7e       	andi	r20, 0xE8	; 232
     3f8:	49 43       	sbci	r20, 0x39	; 57
     3fa:	66 2b       	or	r22, r22
     3fc:	2f fc       	.word	0xfc2f	; ????
     3fe:	2f 2b       	or	r18, r31
     400:	ff 09       	sbc	r31, r15
     402:	29 f6       	brne	.-118    	; 0x38e <__trampolines_end+0x2a4>
     404:	20 c0       	rjmp	.+64     	; 0x446 <__trampolines_end+0x35c>
     406:	88 7e       	andi	r24, 0xE8	; 232
     408:	09 03       	fmul	r16, r17
     40a:	20 54       	subi	r18, 0x40	; 64
     40c:	54 79       	andi	r21, 0x94	; 148
     40e:	41 00       	.word	0x0041	; ????
     410:	00 44       	sbci	r16, 0x40	; 64
     412:	7d 41       	sbci	r23, 0x1D	; 29
     414:	30 48       	sbci	r19, 0x80	; 128
     416:	48 4a       	sbci	r20, 0xA8	; 168
     418:	32 38       	cpi	r19, 0x82	; 130
     41a:	40 40       	sbci	r20, 0x00	; 0
     41c:	22 7a       	andi	r18, 0xA2	; 162
     41e:	00 7a       	andi	r16, 0xA0	; 160
     420:	0a 0a       	sbc	r0, r26
     422:	72 7d       	andi	r23, 0xD2	; 210
     424:	0d 19       	sub	r16, r13
     426:	31 7d       	andi	r19, 0xD1	; 209
     428:	26 29       	or	r18, r6
     42a:	29 2f       	mov	r18, r25
     42c:	28 26       	eor	r2, r24
     42e:	29 29       	or	r18, r9
     430:	29 26       	eor	r2, r25
     432:	30 48       	sbci	r19, 0x80	; 128
     434:	4d 40       	sbci	r20, 0x0D	; 13
     436:	20 38       	cpi	r18, 0x80	; 128
     438:	08 08       	sbc	r0, r8
     43a:	08 08       	sbc	r0, r8
     43c:	08 08       	sbc	r0, r8
     43e:	08 08       	sbc	r0, r8
     440:	38 2f       	mov	r19, r24
     442:	10 c8       	rjmp	.-4064   	; 0xfffff464 <__eeprom_end+0xff7ef402>
     444:	ac ba       	out	0x1c, r10	; 28
     446:	2f 10       	cpse	r2, r15
     448:	28 34       	cpi	r18, 0x48	; 72
     44a:	fa 00       	.word	0x00fa	; ????
     44c:	00 7b       	andi	r16, 0xB0	; 176
     44e:	00 00       	nop
     450:	08 14       	cp	r0, r8
     452:	2a 14       	cp	r2, r10
     454:	22 22       	and	r2, r18
     456:	14 2a       	or	r1, r20
     458:	14 08       	sbc	r1, r4
     45a:	55 00       	.word	0x0055	; ????
     45c:	55 00       	.word	0x0055	; ????
     45e:	55 aa       	std	Z+53, r5	; 0x35
     460:	55 aa       	std	Z+53, r5	; 0x35
     462:	55 aa       	std	Z+53, r5	; 0x35
     464:	ff 55       	subi	r31, 0x5F	; 95
     466:	ff 55       	subi	r31, 0x5F	; 95
     468:	ff 00       	.word	0x00ff	; ????
     46a:	00 00       	nop
     46c:	ff 00       	.word	0x00ff	; ????
     46e:	10 10       	cpse	r1, r0
     470:	10 ff       	sbrs	r17, 0
     472:	00 14       	cp	r0, r0
     474:	14 14       	cp	r1, r4
     476:	ff 00       	.word	0x00ff	; ????
     478:	10 10       	cpse	r1, r0
     47a:	ff 00       	.word	0x00ff	; ????
     47c:	ff 10       	cpse	r15, r15
     47e:	10 f0       	brcs	.+4      	; 0x484 <__trampolines_end+0x39a>
     480:	10 f0       	brcs	.+4      	; 0x486 <__trampolines_end+0x39c>
     482:	14 14       	cp	r1, r4
     484:	14 fc       	sbrc	r1, 4
     486:	00 14       	cp	r0, r0
     488:	14 f7       	brge	.-60     	; 0x44e <__trampolines_end+0x364>
     48a:	00 ff       	sbrs	r16, 0
     48c:	00 00       	nop
     48e:	ff 00       	.word	0x00ff	; ????
     490:	ff 14       	cp	r15, r15
     492:	14 f4       	brge	.+4      	; 0x498 <__trampolines_end+0x3ae>
     494:	04 fc       	sbrc	r0, 4
     496:	14 14       	cp	r1, r4
     498:	17 10       	cpse	r1, r7
     49a:	1f 10       	cpse	r1, r15
     49c:	10 1f       	adc	r17, r16
     49e:	10 1f       	adc	r17, r16
     4a0:	14 14       	cp	r1, r4
     4a2:	14 1f       	adc	r17, r20
     4a4:	00 10       	cpse	r0, r0
     4a6:	10 10       	cpse	r1, r0
     4a8:	f0 00       	.word	0x00f0	; ????
     4aa:	00 00       	nop
     4ac:	00 1f       	adc	r16, r16
     4ae:	10 10       	cpse	r1, r0
     4b0:	10 10       	cpse	r1, r0
     4b2:	1f 10       	cpse	r1, r15
     4b4:	10 10       	cpse	r1, r0
     4b6:	10 f0       	brcs	.+4      	; 0x4bc <__trampolines_end+0x3d2>
     4b8:	10 00       	.word	0x0010	; ????
     4ba:	00 00       	nop
     4bc:	ff 10       	cpse	r15, r15
     4be:	10 10       	cpse	r1, r0
     4c0:	10 10       	cpse	r1, r0
     4c2:	10 10       	cpse	r1, r0
     4c4:	10 10       	cpse	r1, r0
     4c6:	ff 10       	cpse	r15, r15
     4c8:	00 00       	nop
     4ca:	00 ff       	sbrs	r16, 0
     4cc:	14 00       	.word	0x0014	; ????
     4ce:	00 ff       	sbrs	r16, 0
     4d0:	00 ff       	sbrs	r16, 0
     4d2:	00 00       	nop
     4d4:	1f 10       	cpse	r1, r15
     4d6:	17 00       	.word	0x0017	; ????
     4d8:	00 fc       	sbrc	r0, 0
     4da:	04 f4       	brge	.+0      	; 0x4dc <__trampolines_end+0x3f2>
     4dc:	14 14       	cp	r1, r4
     4de:	17 10       	cpse	r1, r7
     4e0:	17 14       	cp	r1, r7
     4e2:	14 f4       	brge	.+4      	; 0x4e8 <__trampolines_end+0x3fe>
     4e4:	04 f4       	brge	.+0      	; 0x4e6 <__trampolines_end+0x3fc>
     4e6:	00 00       	nop
     4e8:	ff 00       	.word	0x00ff	; ????
     4ea:	f7 14       	cp	r15, r7
     4ec:	14 14       	cp	r1, r4
     4ee:	14 14       	cp	r1, r4
     4f0:	14 14       	cp	r1, r4
     4f2:	f7 00       	.word	0x00f7	; ????
     4f4:	f7 14       	cp	r15, r7
     4f6:	14 14       	cp	r1, r4
     4f8:	17 14       	cp	r1, r7
     4fa:	10 10       	cpse	r1, r0
     4fc:	1f 10       	cpse	r1, r15
     4fe:	1f 14       	cp	r1, r15
     500:	14 14       	cp	r1, r4
     502:	f4 14       	cp	r15, r4
     504:	10 10       	cpse	r1, r0
     506:	f0 10       	cpse	r15, r0
     508:	f0 00       	.word	0x00f0	; ????
     50a:	00 1f       	adc	r16, r16
     50c:	10 1f       	adc	r17, r16
     50e:	00 00       	nop
     510:	00 1f       	adc	r16, r16
     512:	14 00       	.word	0x0014	; ????
     514:	00 00       	nop
     516:	fc 14       	cp	r15, r12
     518:	00 00       	nop
     51a:	f0 10       	cpse	r15, r0
     51c:	f0 10       	cpse	r15, r0
     51e:	10 ff       	sbrs	r17, 0
     520:	10 ff       	sbrs	r17, 0
     522:	14 14       	cp	r1, r4
     524:	14 ff       	sbrs	r17, 4
     526:	14 10       	cpse	r1, r4
     528:	10 10       	cpse	r1, r0
     52a:	1f 00       	.word	0x001f	; ????
     52c:	00 00       	nop
     52e:	00 f0       	brcs	.+0      	; 0x530 <__trampolines_end+0x446>
     530:	10 ff       	sbrs	r17, 0
     532:	ff ff       	.word	0xffff	; ????
     534:	ff ff       	.word	0xffff	; ????
     536:	f0 f0       	brcs	.+60     	; 0x574 <__trampolines_end+0x48a>
     538:	f0 f0       	brcs	.+60     	; 0x576 <__trampolines_end+0x48c>
     53a:	f0 ff       	sbrs	r31, 0
     53c:	ff ff       	.word	0xffff	; ????
     53e:	00 00       	nop
     540:	00 00       	nop
     542:	00 ff       	sbrs	r16, 0
     544:	ff 0f       	add	r31, r31
     546:	0f 0f       	add	r16, r31
     548:	0f 0f       	add	r16, r31
     54a:	38 44       	sbci	r19, 0x48	; 72
     54c:	44 38       	cpi	r20, 0x84	; 132
     54e:	44 fc       	sbrc	r4, 4
     550:	4a 4a       	sbci	r20, 0xAA	; 170
     552:	4a 34       	cpi	r20, 0x4A	; 74
     554:	7e 02       	muls	r23, r30
     556:	02 06       	cpc	r0, r18
     558:	06 02       	muls	r16, r22
     55a:	7e 02       	muls	r23, r30
     55c:	7e 02       	muls	r23, r30
     55e:	63 55       	subi	r22, 0x53	; 83
     560:	49 41       	sbci	r20, 0x19	; 25
     562:	63 38       	cpi	r22, 0x83	; 131
     564:	44 44       	sbci	r20, 0x44	; 68
     566:	3c 04       	cpc	r3, r12
     568:	40 7e       	andi	r20, 0xE0	; 224
     56a:	20 1e       	adc	r2, r16
     56c:	20 06       	cpc	r2, r16
     56e:	02 7e       	andi	r16, 0xE2	; 226
     570:	02 02       	muls	r16, r18
     572:	99 a5       	ldd	r25, Y+41	; 0x29
     574:	e7 a5       	ldd	r30, Z+47	; 0x2f
     576:	99 1c       	adc	r9, r9
     578:	2a 49       	sbci	r18, 0x9A	; 154
     57a:	2a 1c       	adc	r2, r10
     57c:	4c 72       	andi	r20, 0x2C	; 44
     57e:	01 72       	andi	r16, 0x21	; 33
     580:	4c 30       	cpi	r20, 0x0C	; 12
     582:	4a 4d       	sbci	r20, 0xDA	; 218
     584:	4d 30       	cpi	r20, 0x0D	; 13
     586:	30 48       	sbci	r19, 0x80	; 128
     588:	78 48       	sbci	r23, 0x88	; 136
     58a:	30 bc       	out	0x20, r3	; 32
     58c:	62 5a       	subi	r22, 0xA2	; 162
     58e:	46 3d       	cpi	r20, 0xD6	; 214
     590:	3e 49       	sbci	r19, 0x9E	; 158
     592:	49 49       	sbci	r20, 0x99	; 153
     594:	00 7e       	andi	r16, 0xE0	; 224
     596:	01 01       	movw	r0, r2
     598:	01 7e       	andi	r16, 0xE1	; 225
     59a:	2a 2a       	or	r2, r26
     59c:	2a 2a       	or	r2, r26
     59e:	2a 44       	sbci	r18, 0x4A	; 74
     5a0:	44 5f       	subi	r20, 0xF4	; 244
     5a2:	44 44       	sbci	r20, 0x44	; 68
     5a4:	40 51       	subi	r20, 0x10	; 16
     5a6:	4a 44       	sbci	r20, 0x4A	; 74
     5a8:	40 40       	sbci	r20, 0x00	; 0
     5aa:	44 4a       	sbci	r20, 0xA4	; 164
     5ac:	51 40       	sbci	r21, 0x01	; 1
     5ae:	00 00       	nop
     5b0:	ff 01       	movw	r30, r30
     5b2:	03 e0       	ldi	r16, 0x03	; 3
     5b4:	80 ff       	sbrs	r24, 0
     5b6:	00 00       	nop
     5b8:	08 08       	sbc	r0, r8
     5ba:	6b 6b       	ori	r22, 0xBB	; 187
     5bc:	08 36       	cpi	r16, 0x68	; 104
     5be:	12 36       	cpi	r17, 0x62	; 98
     5c0:	24 36       	cpi	r18, 0x64	; 100
     5c2:	06 0f       	add	r16, r22
     5c4:	09 0f       	add	r16, r25
     5c6:	06 00       	.word	0x0006	; ????
     5c8:	00 18       	sub	r0, r0
     5ca:	18 00       	.word	0x0018	; ????
     5cc:	00 00       	nop
     5ce:	10 10       	cpse	r1, r0
     5d0:	00 30       	cpi	r16, 0x00	; 0
     5d2:	40 ff       	sbrs	r20, 0
     5d4:	01 01       	movw	r0, r2
     5d6:	00 1f       	adc	r16, r16
     5d8:	01 01       	movw	r0, r2
     5da:	1e 00       	.word	0x001e	; ????
     5dc:	19 1d       	adc	r17, r9
     5de:	17 12       	cpse	r1, r23
     5e0:	00 3c       	cpi	r16, 0xC0	; 192
     5e2:	3c 3c       	cpi	r19, 0xCC	; 204
     5e4:	3c 00       	.word	0x003c	; ????
     5e6:	00 00       	nop
	...

000005ea <__ctors_end>:
     5ea:	11 24       	eor	r1, r1
     5ec:	1f be       	out	0x3f, r1	; 63
     5ee:	cf ef       	ldi	r28, 0xFF	; 255
     5f0:	d8 e0       	ldi	r29, 0x08	; 8
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	cd bf       	out	0x3d, r28	; 61

000005f6 <__do_copy_data>:
     5f6:	11 e0       	ldi	r17, 0x01	; 1
     5f8:	a0 e0       	ldi	r26, 0x00	; 0
     5fa:	b1 e0       	ldi	r27, 0x01	; 1
     5fc:	e8 ef       	ldi	r30, 0xF8	; 248
     5fe:	f0 e5       	ldi	r31, 0x50	; 80
     600:	02 c0       	rjmp	.+4      	; 0x606 <__do_copy_data+0x10>
     602:	05 90       	lpm	r0, Z+
     604:	0d 92       	st	X+, r0
     606:	ae 36       	cpi	r26, 0x6E	; 110
     608:	b1 07       	cpc	r27, r17
     60a:	d9 f7       	brne	.-10     	; 0x602 <__do_copy_data+0xc>

0000060c <__do_clear_bss>:
     60c:	22 e0       	ldi	r18, 0x02	; 2
     60e:	ae e6       	ldi	r26, 0x6E	; 110
     610:	b1 e0       	ldi	r27, 0x01	; 1
     612:	01 c0       	rjmp	.+2      	; 0x616 <.do_clear_bss_start>

00000614 <.do_clear_bss_loop>:
     614:	1d 92       	st	X+, r1

00000616 <.do_clear_bss_start>:
     616:	a0 31       	cpi	r26, 0x10	; 16
     618:	b2 07       	cpc	r27, r18
     61a:	e1 f7       	brne	.-8      	; 0x614 <.do_clear_bss_loop>
     61c:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <main>
     620:	0c 94 7a 28 	jmp	0x50f4	; 0x50f4 <_exit>

00000624 <__bad_interrupt>:
     624:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000628 <_Z5floodjm>:

  CS_IDLE;
  return;
}

void flood(uint16_t color, uint32_t len) {
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
  uint16_t blocks;
  uint8_t  i, hi = color >> 8,
              lo = color;

  CS_ACTIVE;
     62c:	43 98       	cbi	0x08, 3	; 8
  CD_COMMAND;
     62e:	42 98       	cbi	0x08, 2	; 8
  write8(0x22);
     630:	20 e1       	ldi	r18, 0x10	; 16
     632:	2b b9       	out	0x0b, r18	; 11
     634:	21 e0       	ldi	r18, 0x01	; 1
     636:	25 b9       	out	0x05, r18	; 5
     638:	41 98       	cbi	0x08, 1	; 8
     63a:	41 9a       	sbi	0x08, 1	; 8
 
  // Write first pixel normally, decrement counter by 1
  CD_DATA;
     63c:	42 9a       	sbi	0x08, 2	; 8
  write8(hi);
     63e:	29 2f       	mov	r18, r25
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	d9 01       	movw	r26, r18
     644:	ac 7f       	andi	r26, 0xFC	; 252
     646:	bb 27       	eor	r27, r27
     648:	b5 95       	asr	r27
     64a:	a7 95       	ror	r26
     64c:	f9 01       	movw	r30, r18
     64e:	f6 95       	lsr	r31
     650:	fe 2f       	mov	r31, r30
     652:	ee 27       	eor	r30, r30
     654:	f7 95       	ror	r31
     656:	e7 95       	ror	r30
     658:	ea 2b       	or	r30, r26
     65a:	eb b9       	out	0x0b, r30	; 11
     65c:	26 95       	lsr	r18
     65e:	21 70       	andi	r18, 0x01	; 1
     660:	a2 2f       	mov	r26, r18
     662:	25 b9       	out	0x05, r18	; 5
     664:	41 98       	cbi	0x08, 1	; 8
     666:	41 9a       	sbi	0x08, 1	; 8
  write8(lo);
     668:	9c 01       	movw	r18, r24
     66a:	2c 7f       	andi	r18, 0xFC	; 252
     66c:	33 27       	eor	r19, r19
     66e:	35 95       	asr	r19
     670:	27 95       	ror	r18
     672:	f8 2f       	mov	r31, r24
     674:	f7 95       	ror	r31
     676:	ff 27       	eor	r31, r31
     678:	f7 95       	ror	r31
     67a:	f2 2b       	or	r31, r18
     67c:	fb b9       	out	0x0b, r31	; 11
     67e:	81 fb       	bst	r24, 1
     680:	22 27       	eor	r18, r18
     682:	20 f9       	bld	r18, 0
     684:	b2 2f       	mov	r27, r18
     686:	25 b9       	out	0x05, r18	; 5
     688:	41 98       	cbi	0x08, 1	; 8
     68a:	41 9a       	sbi	0x08, 1	; 8
  len--;
     68c:	41 50       	subi	r20, 0x01	; 1
     68e:	51 09       	sbc	r21, r1
     690:	61 09       	sbc	r22, r1
     692:	71 09       	sbc	r23, r1

  blocks = (uint16_t)(len / 64); // 64 pixels/block
     694:	8a 01       	movw	r16, r20
     696:	9b 01       	movw	r18, r22
     698:	68 94       	set
     69a:	15 f8       	bld	r1, 5
     69c:	36 95       	lsr	r19
     69e:	27 95       	ror	r18
     6a0:	17 95       	ror	r17
     6a2:	07 95       	ror	r16
     6a4:	16 94       	lsr	r1
     6a6:	d1 f7       	brne	.-12     	; 0x69c <_Z5floodjm+0x74>
  if(hi == lo) {
     6a8:	98 17       	cp	r25, r24
     6aa:	11 f0       	breq	.+4      	; 0x6b0 <_Z5floodjm+0x88>
    for(i = (uint8_t)len & 63; i--; ) {
      WR_STROBE;
      WR_STROBE;
    }
  } else {
    while(blocks--) {
     6ac:	90 e1       	ldi	r25, 0x10	; 16
     6ae:	48 c0       	rjmp	.+144    	; 0x740 <_Z5floodjm+0x118>

  blocks = (uint16_t)(len / 64); // 64 pixels/block
  if(hi == lo) {
    // High and low bytes are identical.  Leave prior data
    // on the port(s) and just toggle the write strobe.
    while(blocks--) {
     6b0:	90 e1       	ldi	r25, 0x10	; 16
     6b2:	12 c0       	rjmp	.+36     	; 0x6d8 <_Z5floodjm+0xb0>
      i = 16; // 64 pixels/block / 4 pixels/pass
      do {
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // 2 bytes/pixel
     6b4:	41 98       	cbi	0x08, 1	; 8
     6b6:	41 9a       	sbi	0x08, 1	; 8
     6b8:	41 98       	cbi	0x08, 1	; 8
     6ba:	41 9a       	sbi	0x08, 1	; 8
     6bc:	41 98       	cbi	0x08, 1	; 8
     6be:	41 9a       	sbi	0x08, 1	; 8
     6c0:	41 98       	cbi	0x08, 1	; 8
     6c2:	41 9a       	sbi	0x08, 1	; 8
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // x 4 pixels
     6c4:	41 98       	cbi	0x08, 1	; 8
     6c6:	41 9a       	sbi	0x08, 1	; 8
     6c8:	41 98       	cbi	0x08, 1	; 8
     6ca:	41 9a       	sbi	0x08, 1	; 8
     6cc:	41 98       	cbi	0x08, 1	; 8
     6ce:	41 9a       	sbi	0x08, 1	; 8
     6d0:	41 98       	cbi	0x08, 1	; 8
     6d2:	41 9a       	sbi	0x08, 1	; 8
     6d4:	81 50       	subi	r24, 0x01	; 1
  if(hi == lo) {
    // High and low bytes are identical.  Leave prior data
    // on the port(s) and just toggle the write strobe.
    while(blocks--) {
      i = 16; // 64 pixels/block / 4 pixels/pass
      do {
     6d6:	71 f7       	brne	.-36     	; 0x6b4 <_Z5floodjm+0x8c>

  blocks = (uint16_t)(len / 64); // 64 pixels/block
  if(hi == lo) {
    // High and low bytes are identical.  Leave prior data
    // on the port(s) and just toggle the write strobe.
    while(blocks--) {
     6d8:	01 50       	subi	r16, 0x01	; 1
     6da:	11 09       	sbc	r17, r1
     6dc:	10 f0       	brcs	.+4      	; 0x6e2 <_Z5floodjm+0xba>
     6de:	89 2f       	mov	r24, r25
     6e0:	e9 cf       	rjmp	.-46     	; 0x6b4 <_Z5floodjm+0x8c>
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // 2 bytes/pixel
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // x 4 pixels
      } while(--i);
    }
    // Fill any remaining pixels (1 to 64)
    for(i = (uint8_t)len & 63; i--; ) {
     6e2:	4f 73       	andi	r20, 0x3F	; 63
     6e4:	8f ef       	ldi	r24, 0xFF	; 255
     6e6:	84 0f       	add	r24, r20
     6e8:	44 23       	and	r20, r20
     6ea:	09 f4       	brne	.+2      	; 0x6ee <_Z5floodjm+0xc6>
     6ec:	3d c0       	rjmp	.+122    	; 0x768 <_Z5floodjm+0x140>
      WR_STROBE;
     6ee:	41 98       	cbi	0x08, 1	; 8
     6f0:	41 9a       	sbi	0x08, 1	; 8
      WR_STROBE;
     6f2:	41 98       	cbi	0x08, 1	; 8
     6f4:	41 9a       	sbi	0x08, 1	; 8
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // 2 bytes/pixel
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // x 4 pixels
      } while(--i);
    }
    // Fill any remaining pixels (1 to 64)
    for(i = (uint8_t)len & 63; i--; ) {
     6f6:	81 50       	subi	r24, 0x01	; 1
     6f8:	d0 f7       	brcc	.-12     	; 0x6ee <_Z5floodjm+0xc6>
     6fa:	36 c0       	rjmp	.+108    	; 0x768 <_Z5floodjm+0x140>
    }
  } else {
    while(blocks--) {
      i = 16; // 64 pixels/block / 4 pixels/pass
      do {
        write8(hi); write8(lo); write8(hi); write8(lo);
     6fc:	eb b9       	out	0x0b, r30	; 11
     6fe:	a5 b9       	out	0x05, r26	; 5
     700:	41 98       	cbi	0x08, 1	; 8
     702:	41 9a       	sbi	0x08, 1	; 8
     704:	fb b9       	out	0x0b, r31	; 11
     706:	b5 b9       	out	0x05, r27	; 5
     708:	41 98       	cbi	0x08, 1	; 8
     70a:	41 9a       	sbi	0x08, 1	; 8
     70c:	eb b9       	out	0x0b, r30	; 11
     70e:	a5 b9       	out	0x05, r26	; 5
     710:	41 98       	cbi	0x08, 1	; 8
     712:	41 9a       	sbi	0x08, 1	; 8
     714:	fb b9       	out	0x0b, r31	; 11
     716:	b5 b9       	out	0x05, r27	; 5
     718:	41 98       	cbi	0x08, 1	; 8
     71a:	41 9a       	sbi	0x08, 1	; 8
        write8(hi); write8(lo); write8(hi); write8(lo);
     71c:	eb b9       	out	0x0b, r30	; 11
     71e:	a5 b9       	out	0x05, r26	; 5
     720:	41 98       	cbi	0x08, 1	; 8
     722:	41 9a       	sbi	0x08, 1	; 8
     724:	fb b9       	out	0x0b, r31	; 11
     726:	b5 b9       	out	0x05, r27	; 5
     728:	41 98       	cbi	0x08, 1	; 8
     72a:	41 9a       	sbi	0x08, 1	; 8
     72c:	eb b9       	out	0x0b, r30	; 11
     72e:	a5 b9       	out	0x05, r26	; 5
     730:	41 98       	cbi	0x08, 1	; 8
     732:	41 9a       	sbi	0x08, 1	; 8
     734:	fb b9       	out	0x0b, r31	; 11
     736:	b5 b9       	out	0x05, r27	; 5
     738:	41 98       	cbi	0x08, 1	; 8
     73a:	41 9a       	sbi	0x08, 1	; 8
     73c:	81 50       	subi	r24, 0x01	; 1
      WR_STROBE;
    }
  } else {
    while(blocks--) {
      i = 16; // 64 pixels/block / 4 pixels/pass
      do {
     73e:	f1 f6       	brne	.-68     	; 0x6fc <_Z5floodjm+0xd4>
    for(i = (uint8_t)len & 63; i--; ) {
      WR_STROBE;
      WR_STROBE;
    }
  } else {
    while(blocks--) {
     740:	01 50       	subi	r16, 0x01	; 1
     742:	11 09       	sbc	r17, r1
     744:	10 f0       	brcs	.+4      	; 0x74a <_Z5floodjm+0x122>
     746:	89 2f       	mov	r24, r25
     748:	d9 cf       	rjmp	.-78     	; 0x6fc <_Z5floodjm+0xd4>
      do {
        write8(hi); write8(lo); write8(hi); write8(lo);
        write8(hi); write8(lo); write8(hi); write8(lo);
      } while(--i);
    }
    for(i = (uint8_t)len & 63; i--; ) {
     74a:	4f 73       	andi	r20, 0x3F	; 63
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	84 0f       	add	r24, r20
     750:	44 23       	and	r20, r20
     752:	51 f0       	breq	.+20     	; 0x768 <_Z5floodjm+0x140>
      write8(hi);
     754:	eb b9       	out	0x0b, r30	; 11
     756:	a5 b9       	out	0x05, r26	; 5
     758:	41 98       	cbi	0x08, 1	; 8
     75a:	41 9a       	sbi	0x08, 1	; 8
      write8(lo);
     75c:	fb b9       	out	0x0b, r31	; 11
     75e:	b5 b9       	out	0x05, r27	; 5
     760:	41 98       	cbi	0x08, 1	; 8
     762:	41 9a       	sbi	0x08, 1	; 8
      do {
        write8(hi); write8(lo); write8(hi); write8(lo);
        write8(hi); write8(lo); write8(hi); write8(lo);
      } while(--i);
    }
    for(i = (uint8_t)len & 63; i--; ) {
     764:	81 50       	subi	r24, 0x01	; 1
     766:	b0 f7       	brcc	.-20     	; 0x754 <_Z5floodjm+0x12c>
      write8(hi);
      write8(lo);
    }
  }
  CS_IDLE;
     768:	43 9a       	sbi	0x08, 3	; 8
}
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	08 95       	ret

00000770 <_Z14writeRegister8hh>:
  }
}

void writeRegister8(uint8_t a, uint8_t d) {

 writeRegister8inline(a,d); 
     770:	42 98       	cbi	0x08, 2	; 8
     772:	98 2f       	mov	r25, r24
     774:	9c 7f       	andi	r25, 0xFC	; 252
     776:	96 95       	lsr	r25
     778:	40 e8       	ldi	r20, 0x80	; 128
     77a:	84 9f       	mul	r24, r20
     77c:	90 01       	movw	r18, r0
     77e:	11 24       	eor	r1, r1
     780:	29 2b       	or	r18, r25
     782:	2b b9       	out	0x0b, r18	; 11
     784:	86 95       	lsr	r24
     786:	81 70       	andi	r24, 0x01	; 1
     788:	85 b9       	out	0x05, r24	; 5
     78a:	41 98       	cbi	0x08, 1	; 8
     78c:	41 9a       	sbi	0x08, 1	; 8
     78e:	42 9a       	sbi	0x08, 2	; 8
     790:	26 2f       	mov	r18, r22
     792:	2c 7f       	andi	r18, 0xFC	; 252
     794:	26 95       	lsr	r18
     796:	30 e8       	ldi	r19, 0x80	; 128
     798:	63 9f       	mul	r22, r19
     79a:	c0 01       	movw	r24, r0
     79c:	11 24       	eor	r1, r1
     79e:	82 2b       	or	r24, r18
     7a0:	8b b9       	out	0x0b, r24	; 11
     7a2:	66 95       	lsr	r22
     7a4:	61 70       	andi	r22, 0x01	; 1
     7a6:	65 b9       	out	0x05, r22	; 5
     7a8:	41 98       	cbi	0x08, 1	; 8
     7aa:	41 9a       	sbi	0x08, 1	; 8
     7ac:	08 95       	ret

000007ae <_Z15writeRegister16jj>:

  return;
}

void writeRegister16(uint16_t a, uint16_t d) {
 writeRegister16inline(a, d);
     7ae:	42 98       	cbi	0x08, 2	; 8
     7b0:	29 2f       	mov	r18, r25
     7b2:	33 27       	eor	r19, r19
     7b4:	f9 01       	movw	r30, r18
     7b6:	ec 7f       	andi	r30, 0xFC	; 252
     7b8:	ff 27       	eor	r31, r31
     7ba:	f5 95       	asr	r31
     7bc:	e7 95       	ror	r30
     7be:	a9 01       	movw	r20, r18
     7c0:	56 95       	lsr	r21
     7c2:	54 2f       	mov	r21, r20
     7c4:	44 27       	eor	r20, r20
     7c6:	57 95       	ror	r21
     7c8:	47 95       	ror	r20
     7ca:	4e 2b       	or	r20, r30
     7cc:	4b b9       	out	0x0b, r20	; 11
     7ce:	26 95       	lsr	r18
     7d0:	21 70       	andi	r18, 0x01	; 1
     7d2:	25 b9       	out	0x05, r18	; 5
     7d4:	41 98       	cbi	0x08, 1	; 8
     7d6:	41 9a       	sbi	0x08, 1	; 8
     7d8:	9c 01       	movw	r18, r24
     7da:	2c 7f       	andi	r18, 0xFC	; 252
     7dc:	33 27       	eor	r19, r19
     7de:	35 95       	asr	r19
     7e0:	27 95       	ror	r18
     7e2:	98 2f       	mov	r25, r24
     7e4:	97 95       	ror	r25
     7e6:	99 27       	eor	r25, r25
     7e8:	97 95       	ror	r25
     7ea:	29 2b       	or	r18, r25
     7ec:	2b b9       	out	0x0b, r18	; 11
     7ee:	86 95       	lsr	r24
     7f0:	81 70       	andi	r24, 0x01	; 1
     7f2:	85 b9       	out	0x05, r24	; 5
     7f4:	41 98       	cbi	0x08, 1	; 8
     7f6:	41 9a       	sbi	0x08, 1	; 8
     7f8:	42 9a       	sbi	0x08, 2	; 8
     7fa:	87 2f       	mov	r24, r23
     7fc:	99 27       	eor	r25, r25
     7fe:	ac 01       	movw	r20, r24
     800:	4c 7f       	andi	r20, 0xFC	; 252
     802:	55 27       	eor	r21, r21
     804:	55 95       	asr	r21
     806:	47 95       	ror	r20
     808:	9c 01       	movw	r18, r24
     80a:	36 95       	lsr	r19
     80c:	32 2f       	mov	r19, r18
     80e:	22 27       	eor	r18, r18
     810:	37 95       	ror	r19
     812:	27 95       	ror	r18
     814:	24 2b       	or	r18, r20
     816:	2b b9       	out	0x0b, r18	; 11
     818:	86 95       	lsr	r24
     81a:	81 70       	andi	r24, 0x01	; 1
     81c:	85 b9       	out	0x05, r24	; 5
     81e:	41 98       	cbi	0x08, 1	; 8
     820:	41 9a       	sbi	0x08, 1	; 8
     822:	cb 01       	movw	r24, r22
     824:	8c 7f       	andi	r24, 0xFC	; 252
     826:	99 27       	eor	r25, r25
     828:	95 95       	asr	r25
     82a:	87 95       	ror	r24
     82c:	96 2f       	mov	r25, r22
     82e:	97 95       	ror	r25
     830:	99 27       	eor	r25, r25
     832:	97 95       	ror	r25
     834:	89 2b       	or	r24, r25
     836:	8b b9       	out	0x0b, r24	; 11
     838:	66 95       	lsr	r22
     83a:	61 70       	andi	r22, 0x01	; 1
     83c:	65 b9       	out	0x05, r22	; 5
     83e:	41 98       	cbi	0x08, 1	; 8
     840:	41 9a       	sbi	0x08, 1	; 8
     842:	08 95       	ret

00000844 <_Z11setRotationh>:
  
} 


void setRotation(uint8_t x) {
  rotation = (x & 3);
     844:	83 70       	andi	r24, 0x03	; 3
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	90 93 87 01 	sts	0x0187, r25
     84c:	80 93 86 01 	sts	0x0186, r24
  switch(rotation) {
     850:	80 91 86 01 	lds	r24, 0x0186
     854:	90 91 87 01 	lds	r25, 0x0187
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	91 05       	cpc	r25, r1
     85c:	b9 f0       	breq	.+46     	; 0x88c <_Z11setRotationh+0x48>
     85e:	1c f4       	brge	.+6      	; 0x866 <_Z11setRotationh+0x22>
     860:	89 2b       	or	r24, r25
     862:	39 f0       	breq	.+14     	; 0x872 <_Z11setRotationh+0x2e>
     864:	1f c0       	rjmp	.+62     	; 0x8a4 <_Z11setRotationh+0x60>
     866:	82 30       	cpi	r24, 0x02	; 2
     868:	91 05       	cpc	r25, r1
     86a:	19 f0       	breq	.+6      	; 0x872 <_Z11setRotationh+0x2e>
     86c:	03 97       	sbiw	r24, 0x03	; 3
     86e:	71 f0       	breq	.+28     	; 0x88c <_Z11setRotationh+0x48>
     870:	19 c0       	rjmp	.+50     	; 0x8a4 <_Z11setRotationh+0x60>
   case 0:
   case 2:
   _width  = TFTWIDTH;
     872:	80 ef       	ldi	r24, 0xF0	; 240
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	90 93 8b 01 	sts	0x018B, r25
     87a:	80 93 8a 01 	sts	0x018A, r24
   _height = TFTHEIGHT;
     87e:	80 e4       	ldi	r24, 0x40	; 64
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	90 93 89 01 	sts	0x0189, r25
     886:	80 93 88 01 	sts	0x0188, r24
    break;
     88a:	0c c0       	rjmp	.+24     	; 0x8a4 <_Z11setRotationh+0x60>
   case 1:
   case 3:
    _width  = TFTHEIGHT;
     88c:	80 e4       	ldi	r24, 0x40	; 64
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	90 93 8b 01 	sts	0x018B, r25
     894:	80 93 8a 01 	sts	0x018A, r24
    _height = TFTWIDTH;
     898:	80 ef       	ldi	r24, 0xF0	; 240
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	90 93 89 01 	sts	0x0189, r25
     8a0:	80 93 88 01 	sts	0x0188, r24
    break;
  }
  
  uint16_t t;
    switch(rotation) {
     8a4:	80 91 86 01 	lds	r24, 0x0186
     8a8:	90 91 87 01 	lds	r25, 0x0187
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	91 05       	cpc	r25, r1
     8b0:	41 f0       	breq	.+16     	; 0x8c2 <_Z11setRotationh+0x7e>
     8b2:	83 30       	cpi	r24, 0x03	; 3
     8b4:	91 05       	cpc	r25, r1
     8b6:	41 f0       	breq	.+16     	; 0x8c8 <_Z11setRotationh+0x84>
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	49 f0       	breq	.+18     	; 0x8ce <_Z11setRotationh+0x8a>
     default: t = 0x1030; break;
     8bc:	60 e3       	ldi	r22, 0x30	; 48
     8be:	70 e1       	ldi	r23, 0x10	; 16
     8c0:	08 c0       	rjmp	.+16     	; 0x8d2 <_Z11setRotationh+0x8e>
     case 1 : t = 0x1028; break;
     case 2 : t = 0x1000; break;
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	70 e1       	ldi	r23, 0x10	; 16
     8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <_Z11setRotationh+0x8e>
     case 3 : t = 0x1018; break;
     8c8:	68 e1       	ldi	r22, 0x18	; 24
     8ca:	70 e1       	ldi	r23, 0x10	; 16
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <_Z11setRotationh+0x8e>
  }
  
  uint16_t t;
    switch(rotation) {
     default: t = 0x1030; break;
     case 1 : t = 0x1028; break;
     8ce:	68 e2       	ldi	r22, 0x28	; 40
     8d0:	70 e1       	ldi	r23, 0x10	; 16
     case 2 : t = 0x1000; break;
     case 3 : t = 0x1018; break;
    }
	writeRegister16(0x0003, t); // MADCTL
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
     8da:	08 95       	ret

000008dc <_Z13setAddrWindowiiii>:
  
  return;
}


void setAddrWindow(int x1, int y1, int x2, int y2) {
     8dc:	af 92       	push	r10
     8de:	bf 92       	push	r11
     8e0:	cf 92       	push	r12
     8e2:	df 92       	push	r13
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	eb 01       	movw	r28, r22
     8f2:	7a 01       	movw	r14, r20
     8f4:	89 01       	movw	r16, r18
  CS_ACTIVE;
     8f6:	43 98       	cbi	0x08, 3	; 8
 int x, y, t;
    switch(rotation) {
     8f8:	20 91 86 01 	lds	r18, 0x0186
     8fc:	30 91 87 01 	lds	r19, 0x0187
     900:	22 30       	cpi	r18, 0x02	; 2
     902:	31 05       	cpc	r19, r1
     904:	b1 f0       	breq	.+44     	; 0x932 <__stack+0x33>
     906:	23 30       	cpi	r18, 0x03	; 3
     908:	31 05       	cpc	r19, r1
     90a:	51 f1       	breq	.+84     	; 0x960 <__stack+0x61>
     90c:	21 30       	cpi	r18, 0x01	; 1
     90e:	31 05       	cpc	r19, r1
     910:	c9 f5       	brne	.+114    	; 0x984 <__stack+0x85>
      y  = y1;
      break;
     case 1:
      t  = y1;
      y1 = x1;
      x1 = TFTWIDTH  - 1 - y2;
     912:	2f ee       	ldi	r18, 0xEF	; 239
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	a9 01       	movw	r20, r18
     918:	40 1b       	sub	r20, r16
     91a:	51 0b       	sbc	r21, r17
      y2 = x2;
      x2 = TFTWIDTH  - 1 - t;
     91c:	26 1b       	sub	r18, r22
     91e:	37 0b       	sbc	r19, r23
      x  = x2;
      y  = y1;
     920:	c8 2e       	mov	r12, r24
     922:	d9 2e       	mov	r13, r25
      t  = y1;
      y1 = x1;
      x1 = TFTWIDTH  - 1 - y2;
      y2 = x2;
      x2 = TFTWIDTH  - 1 - t;
      x  = x2;
     924:	a2 2e       	mov	r10, r18
     926:	b3 2e       	mov	r11, r19
      break;
     case 1:
      t  = y1;
      y1 = x1;
      x1 = TFTWIDTH  - 1 - y2;
      y2 = x2;
     928:	87 01       	movw	r16, r14
      x2 = TFTWIDTH  - 1 - t;
     92a:	79 01       	movw	r14, r18
      x  = x1;
      y  = y1;
      break;
     case 1:
      t  = y1;
      y1 = x1;
     92c:	ec 01       	movw	r28, r24
      x1 = TFTWIDTH  - 1 - y2;
     92e:	ca 01       	movw	r24, r20
      y2 = x2;
      x2 = TFTWIDTH  - 1 - t;
      x  = x2;
      y  = y1;
      break;
     930:	2d c0       	rjmp	.+90     	; 0x98c <__stack+0x8d>
     case 2:
      t  = x1;
      x1 = TFTWIDTH  - 1 - x2;
     932:	2f ee       	ldi	r18, 0xEF	; 239
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	a9 01       	movw	r20, r18
     938:	4e 19       	sub	r20, r14
     93a:	5f 09       	sbc	r21, r15
      x2 = TFTWIDTH  - 1 - t;
     93c:	79 01       	movw	r14, r18
     93e:	e8 1a       	sub	r14, r24
     940:	f9 0a       	sbc	r15, r25
      t  = y1;
      y1 = TFTHEIGHT - 1 - y2;
     942:	8f e3       	ldi	r24, 0x3F	; 63
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	9c 01       	movw	r18, r24
     948:	20 1b       	sub	r18, r16
     94a:	31 0b       	sbc	r19, r17
      y2 = TFTHEIGHT - 1 - t;
     94c:	8c 01       	movw	r16, r24
     94e:	06 1b       	sub	r16, r22
     950:	17 0b       	sbc	r17, r23
      x  = x2;
      y  = y2;
     952:	c0 2e       	mov	r12, r16
     954:	d1 2e       	mov	r13, r17
      x1 = TFTWIDTH  - 1 - x2;
      x2 = TFTWIDTH  - 1 - t;
      t  = y1;
      y1 = TFTHEIGHT - 1 - y2;
      y2 = TFTHEIGHT - 1 - t;
      x  = x2;
     956:	ae 2c       	mov	r10, r14
     958:	bf 2c       	mov	r11, r15
     case 2:
      t  = x1;
      x1 = TFTWIDTH  - 1 - x2;
      x2 = TFTWIDTH  - 1 - t;
      t  = y1;
      y1 = TFTHEIGHT - 1 - y2;
     95a:	e9 01       	movw	r28, r18
      x  = x2;
      y  = y1;
      break;
     case 2:
      t  = x1;
      x1 = TFTWIDTH  - 1 - x2;
     95c:	ca 01       	movw	r24, r20
      t  = y1;
      y1 = TFTHEIGHT - 1 - y2;
      y2 = TFTHEIGHT - 1 - t;
      x  = x2;
      y  = y2;
      break;
     95e:	16 c0       	rjmp	.+44     	; 0x98c <__stack+0x8d>
     case 3:
      t  = x1;
      x1 = y1;
      y1 = TFTHEIGHT - 1 - x2;
     960:	2f e3       	ldi	r18, 0x3F	; 63
     962:	31 e0       	ldi	r19, 0x01	; 1
     964:	a9 01       	movw	r20, r18
     966:	4e 19       	sub	r20, r14
     968:	5f 09       	sbc	r21, r15
      x2 = y2;
      y2 = TFTHEIGHT - 1 - t;
     96a:	b9 01       	movw	r22, r18
     96c:	68 1b       	sub	r22, r24
     96e:	79 0b       	sbc	r23, r25
     970:	cb 01       	movw	r24, r22
      x  = x1;
      y  = y2;
     972:	c6 2e       	mov	r12, r22
     974:	d9 2e       	mov	r13, r25
      t  = x1;
      x1 = y1;
      y1 = TFTHEIGHT - 1 - x2;
      x2 = y2;
      y2 = TFTHEIGHT - 1 - t;
      x  = x1;
     976:	ac 2e       	mov	r10, r28
     978:	bd 2e       	mov	r11, r29
      break;
     case 3:
      t  = x1;
      x1 = y1;
      y1 = TFTHEIGHT - 1 - x2;
      x2 = y2;
     97a:	78 01       	movw	r14, r16
      y2 = TFTHEIGHT - 1 - t;
     97c:	8b 01       	movw	r16, r22
      x  = x2;
      y  = y2;
      break;
     case 3:
      t  = x1;
      x1 = y1;
     97e:	ce 01       	movw	r24, r28
      y1 = TFTHEIGHT - 1 - x2;
     980:	ea 01       	movw	r28, r20
      x2 = y2;
      y2 = TFTHEIGHT - 1 - t;
      x  = x1;
      y  = y2;
      break;
     982:	04 c0       	rjmp	.+8      	; 0x98c <__stack+0x8d>
  CS_ACTIVE;
 int x, y, t;
    switch(rotation) {
     default:
      x  = x1;
      y  = y1;
     984:	c6 2e       	mov	r12, r22
     986:	dd 2e       	mov	r13, r29
void setAddrWindow(int x1, int y1, int x2, int y2) {
  CS_ACTIVE;
 int x, y, t;
    switch(rotation) {
     default:
      x  = x1;
     988:	a8 2e       	mov	r10, r24
     98a:	b9 2e       	mov	r11, r25
      x  = x1;
      y  = y2;
      break;
    }
	
	writeRegister16(0x37, x1); //HorizontalStartAddress
     98c:	bc 01       	movw	r22, r24
     98e:	87 e3       	ldi	r24, 0x37	; 55
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
	writeRegister16(0x36, x2); //HorizontalEndAddress
     996:	b7 01       	movw	r22, r14
     998:	86 e3       	ldi	r24, 0x36	; 54
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
	writeRegister16(0x39, y1); //VerticalStartAddress
     9a0:	be 01       	movw	r22, r28
     9a2:	89 e3       	ldi	r24, 0x39	; 57
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
	writeRegister16(0x38, y2); //VertocalEndAddress
     9aa:	b8 01       	movw	r22, r16
     9ac:	88 e3       	ldi	r24, 0x38	; 56
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
	writeRegister16(0x20, x); //GRAM Address Set
     9b4:	6a 2d       	mov	r22, r10
     9b6:	7b 2d       	mov	r23, r11
     9b8:	80 e2       	ldi	r24, 0x20	; 32
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
	writeRegister16(0x21, y);
     9c0:	6c 2d       	mov	r22, r12
     9c2:	7d 2d       	mov	r23, r13
     9c4:	81 e2       	ldi	r24, 0x21	; 33
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
	writeRegister8(0x22, 0);
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	82 e2       	ldi	r24, 0x22	; 34
     9d0:	0e 94 b8 03 	call	0x770	; 0x770 <_Z14writeRegister8hh>

  CS_IDLE;
     9d4:	43 9a       	sbi	0x08, 3	; 8
  return;
}
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	ff 90       	pop	r15
     9e0:	ef 90       	pop	r14
     9e2:	df 90       	pop	r13
     9e4:	cf 90       	pop	r12
     9e6:	bf 90       	pop	r11
     9e8:	af 90       	pop	r10
     9ea:	08 95       	ret

000009ec <_Z13drawFastVLineiiij>:

  CS_IDLE;
  return;
}

void drawFastVLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	ea 01       	movw	r28, r20
     9f6:	89 01       	movw	r16, r18
  int16_t y2;

  // Initial off-screen clipping
  if((length <= 0      ) ||
     (x      <  0      ) || ( x                  >= _width) ||
     (y      >= _height) || ((y2 = (y+length-1)) <  0     )) return;
     9f8:	1c 16       	cp	r1, r28
     9fa:	1d 06       	cpc	r1, r29
     9fc:	c4 f5       	brge	.+112    	; 0xa6e <_Z13drawFastVLineiiij+0x82>

void drawFastVLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
  int16_t y2;

  // Initial off-screen clipping
  if((length <= 0      ) ||
     9fe:	99 23       	and	r25, r25
     a00:	b4 f1       	brlt	.+108    	; 0xa6e <_Z13drawFastVLineiiij+0x82>
     (x      <  0      ) || ( x                  >= _width) ||
     a02:	20 91 8a 01 	lds	r18, 0x018A
     a06:	30 91 8b 01 	lds	r19, 0x018B
     a0a:	82 17       	cp	r24, r18
     a0c:	93 07       	cpc	r25, r19
     a0e:	7c f5       	brge	.+94     	; 0xa6e <_Z13drawFastVLineiiij+0x82>
     (y      >= _height) || ((y2 = (y+length-1)) <  0     )) return;
     a10:	20 91 88 01 	lds	r18, 0x0188
     a14:	30 91 89 01 	lds	r19, 0x0189
void drawFastVLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
  int16_t y2;

  // Initial off-screen clipping
  if((length <= 0      ) ||
     (x      <  0      ) || ( x                  >= _width) ||
     a18:	62 17       	cp	r22, r18
     a1a:	73 07       	cpc	r23, r19
     a1c:	44 f5       	brge	.+80     	; 0xa6e <_Z13drawFastVLineiiij+0x82>
     (y      >= _height) || ((y2 = (y+length-1)) <  0     )) return;
     a1e:	ab 01       	movw	r20, r22
     a20:	4c 0f       	add	r20, r28
     a22:	5d 1f       	adc	r21, r29
     a24:	9a 01       	movw	r18, r20
     a26:	21 50       	subi	r18, 0x01	; 1
     a28:	31 09       	sbc	r19, r1

void drawFastVLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
  int16_t y2;

  // Initial off-screen clipping
  if((length <= 0      ) ||
     a2a:	33 23       	and	r19, r19
     a2c:	04 f1       	brlt	.+64     	; 0xa6e <_Z13drawFastVLineiiij+0x82>
     (x      <  0      ) || ( x                  >= _width) ||
     (y      >= _height) || ((y2 = (y+length-1)) <  0     )) return;
  if(y < 0) {         // Clip top
     a2e:	77 23       	and	r23, r23
     a30:	1c f4       	brge	.+6      	; 0xa38 <_Z13drawFastVLineiiij+0x4c>
    length += y;
     a32:	ea 01       	movw	r28, r20
    y       = 0;
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
  }
  if(y2 >= _height) { // Clip bottom
     a38:	40 91 88 01 	lds	r20, 0x0188
     a3c:	50 91 89 01 	lds	r21, 0x0189
     a40:	24 17       	cp	r18, r20
     a42:	35 07       	cpc	r19, r21
     a44:	4c f0       	brlt	.+18     	; 0xa58 <_Z13drawFastVLineiiij+0x6c>
    y2      = _height - 1;
     a46:	c0 91 88 01 	lds	r28, 0x0188
     a4a:	d0 91 89 01 	lds	r29, 0x0189
    length  = y2 - y + 1;
     a4e:	9e 01       	movw	r18, r28
     a50:	21 50       	subi	r18, 0x01	; 1
     a52:	31 09       	sbc	r19, r1
     a54:	c6 1b       	sub	r28, r22
     a56:	d7 0b       	sbc	r29, r23
  }

  setAddrWindow(x, y, x, y2);
     a58:	ac 01       	movw	r20, r24
     a5a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z13setAddrWindowiiii>
  flood(color, length);
     a5e:	ae 01       	movw	r20, r28
     a60:	66 27       	eor	r22, r22
     a62:	57 fd       	sbrc	r21, 7
     a64:	60 95       	com	r22
     a66:	76 2f       	mov	r23, r22
     a68:	c8 01       	movw	r24, r16
     a6a:	0e 94 14 03 	call	0x628	; 0x628 <_Z5floodjm>

}
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	08 95       	ret

00000a78 <_Z13drawFastHLineiiij>:

void drawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	ea 01       	movw	r28, r20
     a82:	89 01       	movw	r16, r18
  int16_t x2;

  // Initial off-screen clipping
  if((length <= 0     ) ||
     (y      <  0     ) || ( y                  >= _height) ||
     (x      >= _width) || ((x2 = (x+length-1)) <  0      )) return;
     a84:	1c 16       	cp	r1, r28
     a86:	1d 06       	cpc	r1, r29
     a88:	c4 f5       	brge	.+112    	; 0xafa <_Z13drawFastHLineiiij+0x82>

void drawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
  int16_t x2;

  // Initial off-screen clipping
  if((length <= 0     ) ||
     a8a:	77 23       	and	r23, r23
     a8c:	b4 f1       	brlt	.+108    	; 0xafa <_Z13drawFastHLineiiij+0x82>
     (y      <  0     ) || ( y                  >= _height) ||
     a8e:	20 91 88 01 	lds	r18, 0x0188
     a92:	30 91 89 01 	lds	r19, 0x0189
     a96:	62 17       	cp	r22, r18
     a98:	73 07       	cpc	r23, r19
     a9a:	7c f5       	brge	.+94     	; 0xafa <_Z13drawFastHLineiiij+0x82>
     (x      >= _width) || ((x2 = (x+length-1)) <  0      )) return;
     a9c:	20 91 8a 01 	lds	r18, 0x018A
     aa0:	30 91 8b 01 	lds	r19, 0x018B
void drawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
  int16_t x2;

  // Initial off-screen clipping
  if((length <= 0     ) ||
     (y      <  0     ) || ( y                  >= _height) ||
     aa4:	82 17       	cp	r24, r18
     aa6:	93 07       	cpc	r25, r19
     aa8:	44 f5       	brge	.+80     	; 0xafa <_Z13drawFastHLineiiij+0x82>
     (x      >= _width) || ((x2 = (x+length-1)) <  0      )) return;
     aaa:	9c 01       	movw	r18, r24
     aac:	24 0f       	add	r18, r20
     aae:	35 1f       	adc	r19, r21
     ab0:	a9 01       	movw	r20, r18
     ab2:	41 50       	subi	r20, 0x01	; 1
     ab4:	51 09       	sbc	r21, r1

void drawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
  int16_t x2;

  // Initial off-screen clipping
  if((length <= 0     ) ||
     ab6:	55 23       	and	r21, r21
     ab8:	04 f1       	brlt	.+64     	; 0xafa <_Z13drawFastHLineiiij+0x82>
     (y      <  0     ) || ( y                  >= _height) ||
     (x      >= _width) || ((x2 = (x+length-1)) <  0      )) return;

  if(x < 0) {        // Clip left
     aba:	99 23       	and	r25, r25
     abc:	1c f4       	brge	.+6      	; 0xac4 <_Z13drawFastHLineiiij+0x4c>
    length += x;
     abe:	e9 01       	movw	r28, r18
    x       = 0;
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
  }
  if(x2 >= _width) { // Clip right
     ac4:	20 91 8a 01 	lds	r18, 0x018A
     ac8:	30 91 8b 01 	lds	r19, 0x018B
     acc:	42 17       	cp	r20, r18
     ace:	53 07       	cpc	r21, r19
     ad0:	4c f0       	brlt	.+18     	; 0xae4 <_Z13drawFastHLineiiij+0x6c>
    x2      = _width - 1;
     ad2:	c0 91 8a 01 	lds	r28, 0x018A
     ad6:	d0 91 8b 01 	lds	r29, 0x018B
    length  = x2 - x + 1;
     ada:	ae 01       	movw	r20, r28
     adc:	41 50       	subi	r20, 0x01	; 1
     ade:	51 09       	sbc	r21, r1
     ae0:	c8 1b       	sub	r28, r24
     ae2:	d9 0b       	sbc	r29, r25
  }

  setAddrWindow(x, y, x2, y);
     ae4:	9b 01       	movw	r18, r22
     ae6:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z13setAddrWindowiiii>
  flood(color, length);
     aea:	ae 01       	movw	r20, r28
     aec:	66 27       	eor	r22, r22
     aee:	57 fd       	sbrc	r21, 7
     af0:	60 95       	com	r22
     af2:	76 2f       	mov	r23, r22
     af4:	c8 01       	movw	r24, r16
     af6:	0e 94 14 03 	call	0x628	; 0x628 <_Z5floodjm>
}
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	08 95       	ret

00000b04 <_Z9drawPixeliij>:
    }
  }
  CS_IDLE;
}

void drawPixel(int16_t x, int16_t y, uint16_t color) {
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	eb 01       	movw	r28, r22
     b0e:	8a 01       	movw	r16, r20

  // Clip
 	//if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;

  CS_ACTIVE;
     b10:	43 98       	cbi	0x08, 3	; 8
  
    int16_t t;
    switch(rotation) {
     b12:	20 91 86 01 	lds	r18, 0x0186
     b16:	30 91 87 01 	lds	r19, 0x0187
     b1a:	22 30       	cpi	r18, 0x02	; 2
     b1c:	31 05       	cpc	r19, r1
     b1e:	69 f0       	breq	.+26     	; 0xb3a <_Z9drawPixeliij+0x36>
     b20:	23 30       	cpi	r18, 0x03	; 3
     b22:	31 05       	cpc	r19, r1
     b24:	b9 f0       	breq	.+46     	; 0xb54 <_Z9drawPixeliij+0x50>
     b26:	21 30       	cpi	r18, 0x01	; 1
     b28:	31 05       	cpc	r19, r1
     b2a:	d1 f4       	brne	.+52     	; 0xb60 <_Z9drawPixeliij+0x5c>
     case 1:
      t = x;
      x = TFTWIDTH  - 1 - y;
     b2c:	2f ee       	ldi	r18, 0xEF	; 239
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	26 1b       	sub	r18, r22
     b32:	37 0b       	sbc	r19, r23
      y = t;
     b34:	ec 01       	movw	r28, r24
  
    int16_t t;
    switch(rotation) {
     case 1:
      t = x;
      x = TFTWIDTH  - 1 - y;
     b36:	c9 01       	movw	r24, r18
      y = t;
      break;
     b38:	13 c0       	rjmp	.+38     	; 0xb60 <_Z9drawPixeliij+0x5c>
     case 2:
      x = TFTWIDTH  - 1 - x;
     b3a:	2f ee       	ldi	r18, 0xEF	; 239
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	a9 01       	movw	r20, r18
     b40:	48 1b       	sub	r20, r24
     b42:	59 0b       	sbc	r21, r25
     b44:	ca 01       	movw	r24, r20
      y = TFTHEIGHT - 1 - y;
     b46:	2f e3       	ldi	r18, 0x3F	; 63
     b48:	31 e0       	ldi	r19, 0x01	; 1
     b4a:	a9 01       	movw	r20, r18
     b4c:	46 1b       	sub	r20, r22
     b4e:	57 0b       	sbc	r21, r23
     b50:	ea 01       	movw	r28, r20
      break;
     b52:	06 c0       	rjmp	.+12     	; 0xb60 <_Z9drawPixeliij+0x5c>
     case 3:
      t = x;
      x = y;
      y = TFTHEIGHT - 1 - t;
     b54:	2f e3       	ldi	r18, 0x3F	; 63
     b56:	31 e0       	ldi	r19, 0x01	; 1
     b58:	28 1b       	sub	r18, r24
     b5a:	39 0b       	sbc	r19, r25
      x = TFTWIDTH  - 1 - x;
      y = TFTHEIGHT - 1 - y;
      break;
     case 3:
      t = x;
      x = y;
     b5c:	cb 01       	movw	r24, r22
      y = TFTHEIGHT - 1 - t;
     b5e:	e9 01       	movw	r28, r18
      break;
	}

    writeRegister16(0x20, x);
     b60:	bc 01       	movw	r22, r24
     b62:	80 e2       	ldi	r24, 0x20	; 32
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
    writeRegister16(0x21, y);
     b6a:	be 01       	movw	r22, r28
     b6c:	81 e2       	ldi	r24, 0x21	; 33
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
    writeRegister16(0x22, color);
     b74:	b8 01       	movw	r22, r16
     b76:	82 e2       	ldi	r24, 0x22	; 34
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>

  CS_IDLE;
     b7e:	43 9a       	sbi	0x08, 3	; 8
  return;
}
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	08 95       	ret

00000b8a <_Z8drawLineiiiij>:

  setAddrWindow(x, y, x2, y);
  flood(color, length);
}

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,uint16_t color) {
     b8a:	2f 92       	push	r2
     b8c:	3f 92       	push	r3
     b8e:	4f 92       	push	r4
     b90:	5f 92       	push	r5
     b92:	6f 92       	push	r6
     b94:	7f 92       	push	r7
     b96:	8f 92       	push	r8
     b98:	9f 92       	push	r9
     b9a:	af 92       	push	r10
     b9c:	bf 92       	push	r11
     b9e:	cf 92       	push	r12
     ba0:	df 92       	push	r13
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	ec 01       	movw	r28, r24
     bb0:	7b 01       	movw	r14, r22
     bb2:	6a 01       	movw	r12, r20
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
     bb4:	c9 01       	movw	r24, r18
     bb6:	86 1b       	sub	r24, r22
     bb8:	97 0b       	sbc	r25, r23
     bba:	ac 01       	movw	r20, r24
     bbc:	22 f4       	brpl	.+8      	; 0xbc6 <_Z8drawLineiiiij+0x3c>
     bbe:	44 27       	eor	r20, r20
     bc0:	55 27       	eor	r21, r21
     bc2:	48 1b       	sub	r20, r24
     bc4:	59 0b       	sbc	r21, r25
     bc6:	b6 01       	movw	r22, r12
     bc8:	6c 1b       	sub	r22, r28
     bca:	7d 0b       	sbc	r23, r29
     bcc:	cb 01       	movw	r24, r22
     bce:	99 23       	and	r25, r25
     bd0:	24 f4       	brge	.+8      	; 0xbda <_Z8drawLineiiiij+0x50>
     bd2:	88 27       	eor	r24, r24
     bd4:	99 27       	eor	r25, r25
     bd6:	86 1b       	sub	r24, r22
     bd8:	97 0b       	sbc	r25, r23
     bda:	71 e0       	ldi	r23, 0x01	; 1
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	84 17       	cp	r24, r20
     be0:	95 07       	cpc	r25, r21
     be2:	0c f0       	brlt	.+2      	; 0xbe6 <_Z8drawLineiiiij+0x5c>
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	a7 2e       	mov	r10, r23
     be8:	b6 2e       	mov	r11, r22
  if (steep != 0) {
     bea:	a1 14       	cp	r10, r1
     bec:	b1 04       	cpc	r11, r1
     bee:	51 f0       	breq	.+20     	; 0xc04 <_Z8drawLineiiiij+0x7a>
     bf0:	9c 2d       	mov	r25, r12
     bf2:	8d 2d       	mov	r24, r13
	x0=y0;
	y0=tmpvar;
	
	tmpvar=0;	
	tmpvar = x1;
	x1=y1;
     bf4:	69 01       	movw	r12, r18
	y1=tmpvar;	
     bf6:	29 2f       	mov	r18, r25
     bf8:	38 2f       	mov	r19, r24
     bfa:	9c 2f       	mov	r25, r28
     bfc:	8d 2f       	mov	r24, r29
void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep != 0) {
	int16_t tmpvar=0;
	tmpvar = x0;
	x0=y0;
     bfe:	e7 01       	movw	r28, r14
	y0=tmpvar;
     c00:	e9 2e       	mov	r14, r25
     c02:	f8 2e       	mov	r15, r24
	x1=y1;
	y1=tmpvar;	
 
  }

  if (x0 > x1) {
     c04:	cc 16       	cp	r12, r28
     c06:	dd 06       	cpc	r13, r29
     c08:	54 f4       	brge	.+20     	; 0xc1e <_Z8drawLineiiiij+0x94>
     c0a:	9e 2d       	mov	r25, r14
     c0c:	8f 2d       	mov	r24, r15
	x0=x1;
	x1=tmpvar2;
	
	tmpvar2=0;	
	tmpvar2 = y0;
	y0=y1;
     c0e:	79 01       	movw	r14, r18
	y1=tmpvar2;	
     c10:	29 2f       	mov	r18, r25
     c12:	38 2f       	mov	r19, r24
     c14:	9c 2f       	mov	r25, r28
     c16:	8d 2f       	mov	r24, r29

  if (x0 > x1) {
	int16_t tmpvar2=0;
	
	tmpvar2 = x0;
	x0=x1;
     c18:	e6 01       	movw	r28, r12
	x1=tmpvar2;
     c1a:	c9 2e       	mov	r12, r25
     c1c:	d8 2e       	mov	r13, r24
	y1=tmpvar2;	

  }

  int16_t dx, dy;
  dx = x1 - x0;
     c1e:	16 01       	movw	r2, r12
     c20:	2c 1a       	sub	r2, r28
     c22:	3d 0a       	sbc	r3, r29
  dy = abs(y1 - y0);
     c24:	c9 01       	movw	r24, r18
     c26:	8e 19       	sub	r24, r14
     c28:	9f 09       	sbc	r25, r15
     c2a:	3c 01       	movw	r6, r24
     c2c:	22 f4       	brpl	.+8      	; 0xc36 <_Z8drawLineiiiij+0xac>
     c2e:	66 24       	eor	r6, r6
     c30:	77 24       	eor	r7, r7
     c32:	68 1a       	sub	r6, r24
     c34:	79 0a       	sbc	r7, r25

  int16_t err = dx / 2;
     c36:	41 01       	movw	r8, r2
     c38:	33 20       	and	r3, r3
     c3a:	1c f4       	brge	.+6      	; 0xc42 <_Z8drawLineiiiij+0xb8>
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	88 1a       	sub	r8, r24
     c40:	98 0a       	sbc	r9, r24
     c42:	95 94       	asr	r9
     c44:	87 94       	ror	r8
  int16_t ystep;

  if (y0 < y1) {
     c46:	e2 16       	cp	r14, r18
     c48:	f3 06       	cpc	r15, r19
     c4a:	24 f4       	brge	.+8      	; 0xc54 <_Z8drawLineiiiij+0xca>
    ystep = 1;
     c4c:	44 24       	eor	r4, r4
     c4e:	43 94       	inc	r4
     c50:	51 2c       	mov	r5, r1
     c52:	03 c0       	rjmp	.+6      	; 0xc5a <_Z8drawLineiiiij+0xd0>
  } else {
    ystep = -1;
     c54:	44 24       	eor	r4, r4
     c56:	4a 94       	dec	r4
     c58:	54 2c       	mov	r5, r4
  }

  for (; x0<=x1; x0++) {
     c5a:	cc 16       	cp	r12, r28
     c5c:	dd 06       	cpc	r13, r29
     c5e:	cc f0       	brlt	.+50     	; 0xc92 <_Z8drawLineiiiij+0x108>
    if (steep) {
     c60:	a1 14       	cp	r10, r1
     c62:	b1 04       	cpc	r11, r1
     c64:	31 f0       	breq	.+12     	; 0xc72 <_Z8drawLineiiiij+0xe8>
      drawPixel(y0, x0, color);
     c66:	a8 01       	movw	r20, r16
     c68:	be 01       	movw	r22, r28
     c6a:	c7 01       	movw	r24, r14
     c6c:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
     c70:	05 c0       	rjmp	.+10     	; 0xc7c <_Z8drawLineiiiij+0xf2>
    } else {
      drawPixel(x0, y0, color);
     c72:	a8 01       	movw	r20, r16
     c74:	b7 01       	movw	r22, r14
     c76:	ce 01       	movw	r24, r28
     c78:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
    }
    err -= dy;
     c7c:	86 18       	sub	r8, r6
     c7e:	97 08       	sbc	r9, r7
    if (err < 0) {
     c80:	22 f4       	brpl	.+8      	; 0xc8a <_Z8drawLineiiiij+0x100>
      y0 += ystep;
     c82:	e4 0c       	add	r14, r4
     c84:	f5 1c       	adc	r15, r5
      err += dx;
     c86:	82 0c       	add	r8, r2
     c88:	93 1c       	adc	r9, r3
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
     c8a:	21 96       	adiw	r28, 0x01	; 1
     c8c:	cc 16       	cp	r12, r28
     c8e:	dd 06       	cpc	r13, r29
     c90:	3c f7       	brge	.-50     	; 0xc60 <_Z8drawLineiiiij+0xd6>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	cf 90       	pop	r12
     ca2:	bf 90       	pop	r11
     ca4:	af 90       	pop	r10
     ca6:	9f 90       	pop	r9
     ca8:	8f 90       	pop	r8
     caa:	7f 90       	pop	r7
     cac:	6f 90       	pop	r6
     cae:	5f 90       	pop	r5
     cb0:	4f 90       	pop	r4
     cb2:	3f 90       	pop	r3
     cb4:	2f 90       	pop	r2
     cb6:	08 95       	ret

00000cb8 <_Z11setWriteDirv>:
 
    return;
}

void setWriteDir(void) {
  setWriteDirInline();
     cb8:	8e ef       	ldi	r24, 0xFE	; 254
     cba:	8a b9       	out	0x0a, r24	; 10
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	84 b9       	out	0x04, r24	; 4
     cc0:	08 95       	ret

00000cc2 <_Z8delay_msi>:
}

void delay_ms( int ms ){
	for (int i = 0; i < ms; i++)
     cc2:	18 16       	cp	r1, r24
     cc4:	19 06       	cpc	r1, r25
     cc6:	6c f4       	brge	.+26     	; 0xce2 <_Z8delay_msi+0x20>
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ccc:	e7 eb       	ldi	r30, 0xB7	; 183
     cce:	fb e0       	ldi	r31, 0x0B	; 11
     cd0:	31 97       	sbiw	r30, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <_Z8delay_msi+0xe>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <_Z8delay_msi+0x14>
     cd6:	00 00       	nop
     cd8:	2f 5f       	subi	r18, 0xFF	; 255
     cda:	3f 4f       	sbci	r19, 0xFF	; 255
     cdc:	28 17       	cp	r18, r24
     cde:	39 07       	cpc	r19, r25
     ce0:	a9 f7       	brne	.-22     	; 0xccc <_Z8delay_msi+0xa>
     ce2:	08 95       	ret

00000ce4 <_Z12init_S6D0154v>:
*/

//remember to only call init_S6D0154 when initializing
void init_S6D0154(void) {
  
  setWriteDir(); //sets write direction of data pins in pin magic
     ce4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_Z11setWriteDirv>
 CS_IDLE;
     ce8:	43 9a       	sbi	0x08, 3	; 8
  WR_IDLE;
     cea:	41 9a       	sbi	0x08, 1	; 8
   CD_DATA; //added
     cec:	42 9a       	sbi	0x08, 2	; 8
   
RESET_ACTIVE;
     cee:	44 98       	cbi	0x08, 4	; 8
  delay_ms(200); 
     cf0:	88 ec       	ldi	r24, 0xC8	; 200
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
RESET_NOT; //reset off
     cf8:	44 9a       	sbi	0x08, 4	; 8
  delay_ms(200); 
     cfa:	88 ec       	ldi	r24, 0xC8	; 200
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
  // Data transfer sync
  CS_ACTIVE;
     d02:	43 98       	cbi	0x08, 3	; 8
  CD_COMMAND;
     d04:	42 98       	cbi	0x08, 2	; 8
  write8(0x00);
     d06:	1b b8       	out	0x0b, r1	; 11
     d08:	15 b8       	out	0x05, r1	; 5
     d0a:	41 98       	cbi	0x08, 1	; 8
     d0c:	41 9a       	sbi	0x08, 1	; 8
  for(uint8_t i=0; i<3; i++) WR_STROBE; // Three extra 0x00s
     d0e:	41 98       	cbi	0x08, 1	; 8
     d10:	41 9a       	sbi	0x08, 1	; 8
     d12:	41 98       	cbi	0x08, 1	; 8
     d14:	41 9a       	sbi	0x08, 1	; 8
     d16:	41 98       	cbi	0x08, 1	; 8
     d18:	41 9a       	sbi	0x08, 1	; 8
  
 RD_IDLE;
     d1a:	40 9a       	sbi	0x08, 0	; 8
  CS_IDLE; // Set all control bits high
     d1c:	43 9a       	sbi	0x08, 3	; 8
  WR_IDLE;
     d1e:	41 9a       	sbi	0x08, 1	; 8

  CD_COMMAND;
     d20:	42 98       	cbi	0x08, 2	; 8

  delay_ms(200);
     d22:	88 ec       	ldi	r24, 0xC8	; 200
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
CS_ACTIVE;  
     d2a:	43 98       	cbi	0x08, 3	; 8

   //writeRegister16(0x80,0x008D); //Testkey
   //writeRegister16(0x92,0x0010);
   writeRegister16(0x11,0x001A); //power control 2 VCL1 amplifier control  2.7V
     d2c:	6a e1       	ldi	r22, 0x1A	; 26
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	81 e1       	ldi	r24, 0x11	; 17
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   writeRegister16(0x12,0x3121); //power control 3 dc21 and dc30, bt2,bt1 dc10
     d38:	61 e2       	ldi	r22, 0x21	; 33
     d3a:	71 e3       	ldi	r23, 0x31	; 49
     d3c:	82 e1       	ldi	r24, 0x12	; 18
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   writeRegister16(0x13,0x006C);
     d44:	6c e6       	ldi	r22, 0x6C	; 108
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	83 e1       	ldi	r24, 0x13	; 19
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   writeRegister16(0x14,0x4249);
     d50:	69 e4       	ldi	r22, 0x49	; 73
     d52:	72 e4       	ldi	r23, 0x42	; 66
     d54:	84 e1       	ldi	r24, 0x14	; 20
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   writeRegister16(0x10,0x0800);
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	78 e0       	ldi	r23, 0x08	; 8
     d60:	80 e1       	ldi	r24, 0x10	; 16
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   delay_ms(30);
     d68:	8e e1       	ldi	r24, 0x1E	; 30
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
   writeRegister16(0x11,0x011A);
     d70:	6a e1       	ldi	r22, 0x1A	; 26
     d72:	71 e0       	ldi	r23, 0x01	; 1
     d74:	81 e1       	ldi	r24, 0x11	; 17
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   delay_ms(30);
     d7c:	8e e1       	ldi	r24, 0x1E	; 30
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
   writeRegister16(0x11,0x031A);
     d84:	6a e1       	ldi	r22, 0x1A	; 26
     d86:	73 e0       	ldi	r23, 0x03	; 3
     d88:	81 e1       	ldi	r24, 0x11	; 17
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   delay_ms(30);
     d90:	8e e1       	ldi	r24, 0x1E	; 30
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
   writeRegister16(0x11,0x071A);
     d98:	6a e1       	ldi	r22, 0x1A	; 26
     d9a:	77 e0       	ldi	r23, 0x07	; 7
     d9c:	81 e1       	ldi	r24, 0x11	; 17
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   delay_ms(30);
     da4:	8e e1       	ldi	r24, 0x1E	; 30
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
   writeRegister16(0x11,0x0F1A);
     dac:	6a e1       	ldi	r22, 0x1A	; 26
     dae:	7f e0       	ldi	r23, 0x0F	; 15
     db0:	81 e1       	ldi	r24, 0x11	; 17
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   delay_ms(20);
     db8:	84 e1       	ldi	r24, 0x14	; 20
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
   writeRegister16(0x11,0x0F3A);
     dc0:	6a e3       	ldi	r22, 0x3A	; 58
     dc2:	7f e0       	ldi	r23, 0x0F	; 15
     dc4:	81 e1       	ldi	r24, 0x11	; 17
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   delay_ms(100);
     dcc:	84 e6       	ldi	r24, 0x64	; 100
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
   writeRegister16(0x01,0x0128); //ss, nl5, nl3  //bin13 rising edge data capture with set to 0 
     dd4:	68 e2       	ldi	r22, 0x28	; 40
     dd6:	71 e0       	ldi	r23, 0x01	; 1
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   // image mirroring is on ss
   // drive line is 160 or 720x160 number of horizontal lines 
   writeRegister16(0x02,0x0100); //two line mixed inversion
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	71 e0       	ldi	r23, 0x01	; 1
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   writeRegister16(0x03,0x1030); //automatic increment in address direction vertical and horizontal
     dec:	60 e3       	ldi	r22, 0x30	; 48
     dee:	70 e1       	ldi	r23, 0x10	; 16
     df0:	83 e0       	ldi	r24, 0x03	; 3
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   //if trying to write long outside display, will automatically move to next line or to (0,0) position
   writeRegister16(0x07,0x1012); //normal display, operate and display is on, (colours are on)
     df8:	62 e1       	ldi	r22, 0x12	; 18
     dfa:	70 e1       	ldi	r23, 0x10	; 16
     dfc:	87 e0       	ldi	r24, 0x07	; 7
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   writeRegister16(0x08,0x0303); //fp1,fp0 bp1-0
     e04:	63 e0       	ldi	r22, 0x03	; 3
     e06:	73 e0       	ldi	r23, 0x03	; 3
     e08:	88 e0       	ldi	r24, 0x08	; 8
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   writeRegister16(0x0B,0x1100);
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	71 e1       	ldi	r23, 0x11	; 17
     e14:	8b e0       	ldi	r24, 0x0B	; 11
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   writeRegister16(0x0C,0x0000);
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	8c e0       	ldi	r24, 0x0C	; 12
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   writeRegister16(0x0F,0x1801);
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	78 e1       	ldi	r23, 0x18	; 24
     e2c:	8f e0       	ldi	r24, 0x0F	; 15
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   writeRegister16(0x15,0x0020);
     e34:	60 e2       	ldi	r22, 0x20	; 32
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	85 e1       	ldi	r24, 0x15	; 21
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   writeRegister16(0x07,0x0012);
     e40:	62 e1       	ldi	r22, 0x12	; 18
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	87 e0       	ldi	r24, 0x07	; 7
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   delay_ms(40);
     e4c:	88 e2       	ldi	r24, 0x28	; 40
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
   writeRegister16(0x07,0x0013);//  GRAM Address Set 
     e54:	63 e1       	ldi	r22, 0x13	; 19
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	87 e0       	ldi	r24, 0x07	; 7
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   writeRegister16(0x07,0x0017);//  Display Control  DISPLAY ON 
     e60:	67 e1       	ldi	r22, 0x17	; 23
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	87 e0       	ldi	r24, 0x07	; 7
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z15writeRegister16jj>
   
    CS_IDLE;
     e6c:	43 9a       	sbi	0x08, 3	; 8
	  }
    }
  */
  
 
  rotation  = 3;
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	90 93 87 01 	sts	0x0187, r25
     e76:	80 93 86 01 	sts	0x0186, r24
  //cursor_y  = cursor_x = 0;
  //textsize  = 1;
  //textcolor = 0xFFFF;
  
   _width    = TFTWIDTH;
     e7a:	80 ef       	ldi	r24, 0xF0	; 240
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	90 93 8b 01 	sts	0x018B, r25
     e82:	80 93 8a 01 	sts	0x018A, r24
   _height   = TFTHEIGHT;
     e86:	80 e4       	ldi	r24, 0x40	; 64
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	90 93 89 01 	sts	0x0189, r25
     e8e:	80 93 88 01 	sts	0x0188, r24
   
  setRotation(rotation); //set right rotation here
     e92:	80 91 86 01 	lds	r24, 0x0186
     e96:	90 91 87 01 	lds	r25, 0x0187
     e9a:	0e 94 22 04 	call	0x844	; 0x844 <_Z11setRotationh>
  setAddrWindow(0, 0, TFTWIDTH-1, TFTHEIGHT-1); //with cs_idle
     e9e:	2f e3       	ldi	r18, 0x3F	; 63
     ea0:	31 e0       	ldi	r19, 0x01	; 1
     ea2:	4f ee       	ldi	r20, 0xEF	; 239
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z13setAddrWindowiiii>
     eb2:	08 95       	ret

00000eb4 <_Z10fillScreenj>:
		_delay_ms(1);
	}
}


void fillScreen(uint16_t color) {
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	ec 01       	movw	r28, r24
   //setAddrWindow(0, 0, _width - 1, _height - 1);
    setAddrWindow(0, 0, _width - 1, _height - 1);
     eba:	20 91 88 01 	lds	r18, 0x0188
     ebe:	30 91 89 01 	lds	r19, 0x0189
     ec2:	40 91 8a 01 	lds	r20, 0x018A
     ec6:	50 91 8b 01 	lds	r21, 0x018B
     eca:	21 50       	subi	r18, 0x01	; 1
     ecc:	31 09       	sbc	r19, r1
     ece:	41 50       	subi	r20, 0x01	; 1
     ed0:	51 09       	sbc	r21, r1
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z13setAddrWindowiiii>
  flood(color, (long)_width * (long)_height);
     ede:	20 91 8a 01 	lds	r18, 0x018A
     ee2:	30 91 8b 01 	lds	r19, 0x018B
     ee6:	a0 91 88 01 	lds	r26, 0x0188
     eea:	b0 91 89 01 	lds	r27, 0x0189
     eee:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <__mulhisi3>
     ef2:	ab 01       	movw	r20, r22
     ef4:	bc 01       	movw	r22, r24
     ef6:	ce 01       	movw	r24, r28
     ef8:	0e 94 14 03 	call	0x628	; 0x628 <_Z5floodjm>
}
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	08 95       	ret

00000f02 <_Z8fillRectiiiij>:
	*/
}



void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
     f02:	af 92       	push	r10
     f04:	bf 92       	push	r11
     f06:	cf 92       	push	r12
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	ec 01       	movw	r28, r24
     f18:	5b 01       	movw	r10, r22
     f1a:	69 01       	movw	r12, r18
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
     f1c:	7c 01       	movw	r14, r24
     f1e:	e4 0e       	add	r14, r20
     f20:	f5 1e       	adc	r15, r21
     f22:	8e 15       	cp	r24, r14
     f24:	9f 05       	cpc	r25, r15
     f26:	54 f4       	brge	.+20     	; 0xf3c <_Z8fillRectiiiij+0x3a>
    drawFastVLine(i, y, h, color);
     f28:	98 01       	movw	r18, r16
     f2a:	a6 01       	movw	r20, r12
     f2c:	b5 01       	movw	r22, r10
     f2e:	ce 01       	movw	r24, r28
     f30:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_Z13drawFastVLineiiij>



void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
     f34:	21 96       	adiw	r28, 0x01	; 1
     f36:	ce 15       	cp	r28, r14
     f38:	df 05       	cpc	r29, r15
     f3a:	b4 f3       	brlt	.-20     	; 0xf28 <_Z8fillRectiiiij+0x26>
    drawFastVLine(i, y, h, color);
  }
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	ff 90       	pop	r15
     f46:	ef 90       	pop	r14
     f48:	df 90       	pop	r13
     f4a:	cf 90       	pop	r12
     f4c:	bf 90       	pop	r11
     f4e:	af 90       	pop	r10
     f50:	08 95       	ret

00000f52 <_Z8drawChariihjjh>:

}


// Draw a character
void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,uint16_t bg, uint8_t size) {
     f52:	2f 92       	push	r2
     f54:	3f 92       	push	r3
     f56:	4f 92       	push	r4
     f58:	5f 92       	push	r5
     f5a:	6f 92       	push	r6
     f5c:	7f 92       	push	r7
     f5e:	8f 92       	push	r8
     f60:	9f 92       	push	r9
     f62:	af 92       	push	r10
     f64:	bf 92       	push	r11
     f66:	cf 92       	push	r12
     f68:	df 92       	push	r13
     f6a:	ef 92       	push	r14
     f6c:	ff 92       	push	r15
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	2f 97       	sbiw	r28, 0x0f	; 15
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	9b 87       	std	Y+11, r25	; 0x0b
     f88:	8a 87       	std	Y+10, r24	; 0x0a
     f8a:	49 01       	movw	r8, r18
     f8c:	1a 83       	std	Y+2, r17	; 0x02
     f8e:	09 83       	std	Y+1, r16	; 0x01
     f90:	1e 2d       	mov	r17, r14




//basic 5x7 font
if((x >= _width)            || // Clip right
     f92:	80 91 8a 01 	lds	r24, 0x018A
     f96:	90 91 8b 01 	lds	r25, 0x018B
       (y >= _height)           || // Clip bottom
       ((x + 6 * size - 1) < 0) || // Clip left
     f9a:	2a 85       	ldd	r18, Y+10	; 0x0a
     f9c:	3b 85       	ldd	r19, Y+11	; 0x0b
     f9e:	28 17       	cp	r18, r24
     fa0:	39 07       	cpc	r19, r25
     fa2:	0c f0       	brlt	.+2      	; 0xfa6 <_Z8drawChariihjjh+0x54>
     fa4:	bd c0       	rjmp	.+378    	; 0x1120 <_Z8drawChariihjjh+0x1ce>



//basic 5x7 font
if((x >= _width)            || // Clip right
       (y >= _height)           || // Clip bottom
     fa6:	20 91 88 01 	lds	r18, 0x0188
     faa:	30 91 89 01 	lds	r19, 0x0189




//basic 5x7 font
if((x >= _width)            || // Clip right
     fae:	62 17       	cp	r22, r18
     fb0:	73 07       	cpc	r23, r19
     fb2:	0c f0       	brlt	.+2      	; 0xfb6 <_Z8drawChariihjjh+0x64>
     fb4:	b5 c0       	rjmp	.+362    	; 0x1120 <_Z8drawChariihjjh+0x1ce>
       (y >= _height)           || // Clip bottom
       ((x + 6 * size - 1) < 0) || // Clip left
     fb6:	6e 2c       	mov	r6, r14
     fb8:	71 2c       	mov	r7, r1
     fba:	93 01       	movw	r18, r6
     fbc:	22 0f       	add	r18, r18
     fbe:	33 1f       	adc	r19, r19
     fc0:	26 0d       	add	r18, r6
     fc2:	37 1d       	adc	r19, r7
     fc4:	22 0f       	add	r18, r18
     fc6:	33 1f       	adc	r19, r19
     fc8:	8a 85       	ldd	r24, Y+10	; 0x0a
     fca:	9b 85       	ldd	r25, Y+11	; 0x0b
     fcc:	28 0f       	add	r18, r24
     fce:	39 1f       	adc	r19, r25
     fd0:	21 50       	subi	r18, 0x01	; 1
     fd2:	31 09       	sbc	r19, r1



//basic 5x7 font
if((x >= _width)            || // Clip right
       (y >= _height)           || // Clip bottom
     fd4:	33 23       	and	r19, r19
     fd6:	0c f4       	brge	.+2      	; 0xfda <_Z8drawChariihjjh+0x88>
     fd8:	a3 c0       	rjmp	.+326    	; 0x1120 <_Z8drawChariihjjh+0x1ce>
       ((x + 6 * size - 1) < 0) || // Clip left
       ((y + 8 * size - 1) < 0))   // Clip top
     fda:	c3 01       	movw	r24, r6
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	86 0f       	add	r24, r22
     fea:	97 1f       	adc	r25, r23
     fec:	01 97       	sbiw	r24, 0x01	; 1




//basic 5x7 font
if((x >= _width)            || // Clip right
     fee:	99 23       	and	r25, r25
     ff0:	0c f4       	brge	.+2      	; 0xff4 <_Z8drawChariihjjh+0xa2>
     ff2:	96 c0       	rjmp	.+300    	; 0x1120 <_Z8drawChariihjjh+0x1ce>
       (y >= _height)           || // Clip bottom
       ((x + 6 * size - 1) < 0) || // Clip left
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if( c >= 176) c++; // Handle 'classic' charset behavior
     ff4:	40 3b       	cpi	r20, 0xB0	; 176
     ff6:	08 f0       	brcs	.+2      	; 0xffa <_Z8drawChariihjjh+0xa8>
     ff8:	4f 5f       	subi	r20, 0xFF	; 255

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
     ffa:	84 2f       	mov	r24, r20
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	9c 01       	movw	r18, r24
    1000:	22 0f       	add	r18, r18
    1002:	33 1f       	adc	r19, r19
    1004:	22 0f       	add	r18, r18
    1006:	33 1f       	adc	r19, r19
    1008:	d9 01       	movw	r26, r18
    100a:	a8 0f       	add	r26, r24
    100c:	b9 1f       	adc	r27, r25
    100e:	bd 87       	std	Y+13, r27	; 0x0d
    1010:	ac 87       	std	Y+12, r26	; 0x0c
    1012:	b6 e0       	ldi	r27, 0x06	; 6
    1014:	bd 83       	std	Y+5, r27	; 0x05
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if( c >= 176) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
    1016:	21 2c       	mov	r2, r1
    1018:	41 2e       	mov	r4, r17
    101a:	51 2c       	mov	r5, r1
    101c:	6e 83       	std	Y+6, r22	; 0x06
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
      else      line = 0x0;
      for(int8_t j=0; j<8; j++, line >>= 1) {
        if(line & 0x1) {
          if(size == 1) drawPixel(x+i, y+j, color);
          else          fillRect(x+(i*size), y+(j*size), size, size, color);
    101e:	7f 83       	std	Y+7, r23	; 0x07

    if( c >= 176) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
    1020:	e4 e0       	ldi	r30, 0x04	; 4
    1022:	e2 15       	cp	r30, r2
    1024:	0c f4       	brge	.+2      	; 0x1028 <_Z8drawChariihjjh+0xd6>
    1026:	5a c0       	rjmp	.+180    	; 0x10dc <_Z8drawChariihjjh+0x18a>
    1028:	ec 85       	ldd	r30, Y+12	; 0x0c
    102a:	fd 85       	ldd	r31, Y+13	; 0x0d
    102c:	e2 0d       	add	r30, r2
    102e:	f1 1d       	adc	r31, r1
    1030:	27 fc       	sbrc	r2, 7
    1032:	fa 95       	dec	r31
    1034:	e6 51       	subi	r30, 0x16	; 22
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	34 90       	lpm	r3, Z
    103a:	51 c0       	rjmp	.+162    	; 0x10de <_Z8drawChariihjjh+0x18c>
      else      line = 0x0;
      for(int8_t j=0; j<8; j++, line >>= 1) {
        if(line & 0x1) {
    103c:	30 fe       	sbrs	r3, 0
    103e:	13 c0       	rjmp	.+38     	; 0x1066 <_Z8drawChariihjjh+0x114>
          if(size == 1) drawPixel(x+i, y+j, color);
    1040:	fe 85       	ldd	r31, Y+14	; 0x0e
    1042:	f1 30       	cpi	r31, 0x01	; 1
    1044:	39 f4       	brne	.+14     	; 0x1054 <_Z8drawChariihjjh+0x102>
    1046:	a4 01       	movw	r20, r8
    1048:	b5 01       	movw	r22, r10
    104a:	88 85       	ldd	r24, Y+8	; 0x08
    104c:	99 85       	ldd	r25, Y+9	; 0x09
    104e:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
    1052:	22 c0       	rjmp	.+68     	; 0x1098 <_Z8drawChariihjjh+0x146>
          else          fillRect(x+(i*size), y+(j*size), size, size, color);
    1054:	84 01       	movw	r16, r8
    1056:	93 01       	movw	r18, r6
    1058:	a3 01       	movw	r20, r6
    105a:	b7 01       	movw	r22, r14
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	0e 94 81 07 	call	0xf02	; 0xf02 <_Z8fillRectiiiij>
    1064:	19 c0       	rjmp	.+50     	; 0x1098 <_Z8drawChariihjjh+0x146>
        } else if(bg != color) {
    1066:	29 81       	ldd	r18, Y+1	; 0x01
    1068:	3a 81       	ldd	r19, Y+2	; 0x02
    106a:	28 15       	cp	r18, r8
    106c:	39 05       	cpc	r19, r9
    106e:	a1 f0       	breq	.+40     	; 0x1098 <_Z8drawChariihjjh+0x146>
          if(size == 1) drawPixel(x+i, y+j, bg);
    1070:	3e 85       	ldd	r19, Y+14	; 0x0e
    1072:	31 30       	cpi	r19, 0x01	; 1
    1074:	41 f4       	brne	.+16     	; 0x1086 <_Z8drawChariihjjh+0x134>
    1076:	49 81       	ldd	r20, Y+1	; 0x01
    1078:	5a 81       	ldd	r21, Y+2	; 0x02
    107a:	b5 01       	movw	r22, r10
    107c:	88 85       	ldd	r24, Y+8	; 0x08
    107e:	99 85       	ldd	r25, Y+9	; 0x09
    1080:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
    1084:	09 c0       	rjmp	.+18     	; 0x1098 <_Z8drawChariihjjh+0x146>
          else          fillRect(x+i*size, y+j*size, size, size, bg);
    1086:	09 81       	ldd	r16, Y+1	; 0x01
    1088:	1a 81       	ldd	r17, Y+2	; 0x02
    108a:	93 01       	movw	r18, r6
    108c:	a3 01       	movw	r20, r6
    108e:	b6 01       	movw	r22, r12
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	0e 94 81 07 	call	0xf02	; 0xf02 <_Z8fillRectiiiij>

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
      else      line = 0x0;
      for(int8_t j=0; j<8; j++, line >>= 1) {
    1098:	36 94       	lsr	r3
    109a:	4f 85       	ldd	r20, Y+15	; 0x0f
    109c:	41 50       	subi	r20, 0x01	; 1
    109e:	4f 87       	std	Y+15, r20	; 0x0f
    10a0:	e4 0c       	add	r14, r4
    10a2:	f5 1c       	adc	r15, r5
    10a4:	c4 0c       	add	r12, r4
    10a6:	d5 1c       	adc	r13, r5
    10a8:	5f ef       	ldi	r21, 0xFF	; 255
    10aa:	a5 1a       	sub	r10, r21
    10ac:	b5 0a       	sbc	r11, r21
    10ae:	41 11       	cpse	r20, r1
    10b0:	c5 cf       	rjmp	.-118    	; 0x103c <_Z8drawChariihjjh+0xea>
    10b2:	1e 85       	ldd	r17, Y+14	; 0x0e
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if( c >= 176) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
    10b4:	23 94       	inc	r2
    10b6:	8d 81       	ldd	r24, Y+5	; 0x05
    10b8:	81 50       	subi	r24, 0x01	; 1
    10ba:	8d 83       	std	Y+5, r24	; 0x05
    10bc:	81 11       	cpse	r24, r1
    10be:	b0 cf       	rjmp	.-160    	; 0x1020 <_Z8drawChariihjjh+0xce>
          else          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
    }
	
if((x >= _width)            || // Clip right
    10c0:	80 91 8a 01 	lds	r24, 0x018A
    10c4:	90 91 8b 01 	lds	r25, 0x018B
       (y >= _height)           || // Clip bottom
       ((x + 6 * size - 1) < 0) || // Clip left
    10c8:	aa 85       	ldd	r26, Y+10	; 0x0a
    10ca:	bb 85       	ldd	r27, Y+11	; 0x0b
    10cc:	a8 17       	cp	r26, r24
    10ce:	b9 07       	cpc	r27, r25
    10d0:	3c f5       	brge	.+78     	; 0x1120 <_Z8drawChariihjjh+0x1ce>
        }
      }
    }
	
if((x >= _width)            || // Clip right
       (y >= _height)           || // Clip bottom
    10d2:	80 91 88 01 	lds	r24, 0x0188
    10d6:	90 91 89 01 	lds	r25, 0x0189
    10da:	22 c0       	rjmp	.+68     	; 0x1120 <_Z8drawChariihjjh+0x1ce>
    if( c >= 176) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
      else      line = 0x0;
    10dc:	31 2c       	mov	r3, r1
      for(int8_t j=0; j<8; j++, line >>= 1) {
        if(line & 0x1) {
          if(size == 1) drawPixel(x+i, y+j, color);
          else          fillRect(x+(i*size), y+(j*size), size, size, color);
    10de:	82 2d       	mov	r24, r2
    10e0:	99 27       	eor	r25, r25
    10e2:	87 fd       	sbrc	r24, 7
    10e4:	90 95       	com	r25
    10e6:	68 9e       	mul	r6, r24
    10e8:	90 01       	movw	r18, r0
    10ea:	69 9e       	mul	r6, r25
    10ec:	30 0d       	add	r19, r0
    10ee:	78 9e       	mul	r7, r24
    10f0:	30 0d       	add	r19, r0
    10f2:	11 24       	eor	r1, r1
    10f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    10f6:	fb 85       	ldd	r31, Y+11	; 0x0b
    10f8:	e2 0f       	add	r30, r18
    10fa:	f3 1f       	adc	r31, r19
    10fc:	fc 83       	std	Y+4, r31	; 0x04
    10fe:	eb 83       	std	Y+3, r30	; 0x03
    1100:	ee 80       	ldd	r14, Y+6	; 0x06
    1102:	ff 80       	ldd	r15, Y+7	; 0x07
    1104:	ae 2c       	mov	r10, r14
    1106:	bf 2c       	mov	r11, r15
    1108:	ce 2c       	mov	r12, r14
    110a:	df 2c       	mov	r13, r15
    110c:	08 e0       	ldi	r16, 0x08	; 8
        } else if(bg != color) {
          if(size == 1) drawPixel(x+i, y+j, bg);
    110e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1110:	3b 85       	ldd	r19, Y+11	; 0x0b
    1112:	28 0f       	add	r18, r24
    1114:	39 1f       	adc	r19, r25
    1116:	39 87       	std	Y+9, r19	; 0x09
    1118:	28 87       	std	Y+8, r18	; 0x08
    111a:	0f 87       	std	Y+15, r16	; 0x0f
    111c:	1e 87       	std	Y+14, r17	; 0x0e
    111e:	8e cf       	rjmp	.-228    	; 0x103c <_Z8drawChariihjjh+0xea>
		line2 >>= 1;
	  }
	  i++;
	}	
	*/
}
    1120:	2f 96       	adiw	r28, 0x0f	; 15
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	9f 90       	pop	r9
    1142:	8f 90       	pop	r8
    1144:	7f 90       	pop	r7
    1146:	6f 90       	pop	r6
    1148:	5f 90       	pop	r5
    114a:	4f 90       	pop	r4
    114c:	3f 90       	pop	r3
    114e:	2f 90       	pop	r2
    1150:	08 95       	ret

00001152 <_Z7reversePci>:


// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
    1152:	9b 01       	movw	r18, r22
    1154:	21 50       	subi	r18, 0x01	; 1
    1156:	31 09       	sbc	r19, r1
	while (i<j)
    1158:	12 16       	cp	r1, r18
    115a:	13 06       	cpc	r1, r19
    115c:	8c f4       	brge	.+34     	; 0x1180 <_Z7reversePci+0x2e>
    115e:	dc 01       	movw	r26, r24
    1160:	a6 0f       	add	r26, r22
    1162:	b7 1f       	adc	r27, r23
    1164:	fc 01       	movw	r30, r24


// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	50 e0       	ldi	r21, 0x00	; 0
	while (i<j)
	{
		temp = str[i];
    116a:	80 81       	ld	r24, Z
		str[i] = str[j];
    116c:	9e 91       	ld	r25, -X
    116e:	91 93       	st	Z+, r25
		str[j] = temp;
    1170:	8c 93       	st	X, r24
		i++; j--;
    1172:	4f 5f       	subi	r20, 0xFF	; 255
    1174:	5f 4f       	sbci	r21, 0xFF	; 255
    1176:	21 50       	subi	r18, 0x01	; 1
    1178:	31 09       	sbc	r19, r1

// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
	while (i<j)
    117a:	42 17       	cp	r20, r18
    117c:	53 07       	cpc	r21, r19
    117e:	ac f3       	brlt	.-22     	; 0x116a <_Z7reversePci+0x18>
    1180:	08 95       	ret

00001182 <_Z8intToStriPci>:

// Converts a given integer x to string str[].  d is the number
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	8b 01       	movw	r16, r22
    1190:	7a 01       	movw	r14, r20
	int i = 0;
	while (x)
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	81 f0       	breq	.+32     	; 0x11b6 <_Z8intToStriPci+0x34>
    1196:	fb 01       	movw	r30, r22
// Converts a given integer x to string str[].  d is the number
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
	int i = 0;
    1198:	c0 e0       	ldi	r28, 0x00	; 0
    119a:	d0 e0       	ldi	r29, 0x00	; 0
	while (x)
	{
		str[i++] = (x%10) + '0';
    119c:	2a e0       	ldi	r18, 0x0A	; 10
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	21 96       	adiw	r28, 0x01	; 1
    11a2:	b9 01       	movw	r22, r18
    11a4:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__divmodhi4>
    11a8:	80 5d       	subi	r24, 0xD0	; 208
    11aa:	81 93       	st	Z+, r24
		x = x/10;
    11ac:	86 2f       	mov	r24, r22
    11ae:	97 2f       	mov	r25, r23
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x)
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	b1 f7       	brne	.-20     	; 0x11a0 <_Z8intToStriPci+0x1e>
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <_Z8intToStriPci+0x38>
// Converts a given integer x to string str[].  d is the number
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
	int i = 0;
    11b6:	c0 e0       	ldi	r28, 0x00	; 0
    11b8:	d0 e0       	ldi	r29, 0x00	; 0
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
    11ba:	ce 15       	cp	r28, r14
    11bc:	df 05       	cpc	r29, r15
    11be:	64 f4       	brge	.+24     	; 0x11d8 <_Z8intToStriPci+0x56>
    11c0:	f8 01       	movw	r30, r16
    11c2:	ec 0f       	add	r30, r28
    11c4:	fd 1f       	adc	r31, r29
    11c6:	c8 01       	movw	r24, r16
    11c8:	8e 0d       	add	r24, r14
    11ca:	9f 1d       	adc	r25, r15
	str[i++] = '0';
    11cc:	20 e3       	ldi	r18, 0x30	; 48
    11ce:	21 93       	st	Z+, r18
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
    11d0:	e8 17       	cp	r30, r24
    11d2:	f9 07       	cpc	r31, r25
    11d4:	e1 f7       	brne	.-8      	; 0x11ce <_Z8intToStriPci+0x4c>
    11d6:	e7 01       	movw	r28, r14
	str[i++] = '0';
	reverse(str, i);	
    11d8:	be 01       	movw	r22, r28
    11da:	c8 01       	movw	r24, r16
    11dc:	0e 94 a9 08 	call	0x1152	; 0x1152 <_Z7reversePci>
	str[i] = '\0';
    11e0:	f8 01       	movw	r30, r16
    11e2:	ec 0f       	add	r30, r28
    11e4:	fd 1f       	adc	r31, r29
    11e6:	10 82       	st	Z, r1
	return i;
}
    11e8:	ce 01       	movw	r24, r28
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	08 95       	ret

000011f8 <_Z4ftoafPci>:
// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
    11f8:	2f 92       	push	r2
    11fa:	3f 92       	push	r3
    11fc:	4f 92       	push	r4
    11fe:	5f 92       	push	r5
    1200:	6f 92       	push	r6
    1202:	7f 92       	push	r7
    1204:	8f 92       	push	r8
    1206:	9f 92       	push	r9
    1208:	af 92       	push	r10
    120a:	bf 92       	push	r11
    120c:	cf 92       	push	r12
    120e:	df 92       	push	r13
    1210:	ef 92       	push	r14
    1212:	ff 92       	push	r15
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	6b 01       	movw	r12, r22
    121e:	7c 01       	movw	r14, r24
    1220:	ea 01       	movw	r28, r20
    1222:	89 01       	movw	r16, r18
	// Extract integer part
	int ipart = (int)n;
    1224:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    1228:	4b 01       	movw	r8, r22
    122a:	5c 01       	movw	r10, r24
	
	// convert integer part to string

	//int i = intToStr(ipart, res, 0);

	int i = intToStr(ipart, res, 1); //forces to show 0 at the beginning
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	be 01       	movw	r22, r28
    1232:	c4 01       	movw	r24, r8
    1234:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
    1238:	1c 01       	movw	r2, r24

	// check for display option after point
	if (afterpoint != 0)
    123a:	01 15       	cp	r16, r1
    123c:	11 05       	cpc	r17, r1
    123e:	b1 f1       	breq	.+108    	; 0x12ac <_Z4ftoafPci+0xb4>
	{
		res[i] = '.';  // add dot
    1240:	fe 01       	movw	r30, r28
    1242:	e8 0f       	add	r30, r24
    1244:	f9 1f       	adc	r31, r25
    1246:	8e e2       	ldi	r24, 0x2E	; 46
    1248:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
    124a:	b8 01       	movw	r22, r16
    124c:	88 27       	eor	r24, r24
    124e:	77 fd       	sbrc	r23, 7
    1250:	80 95       	com	r24
    1252:	98 2f       	mov	r25, r24
    1254:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    1258:	9b 01       	movw	r18, r22
    125a:	ac 01       	movw	r20, r24
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	80 e2       	ldi	r24, 0x20	; 32
    1262:	91 e4       	ldi	r25, 0x41	; 65
    1264:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <pow>
    1268:	2b 01       	movw	r4, r22
    126a:	3c 01       	movw	r6, r24
{
	// Extract integer part
	int ipart = (int)n;
	
	// Extract floating part
	float fpart =(float) (n - (float)ipart);
    126c:	b4 01       	movw	r22, r8
    126e:	88 27       	eor	r24, r24
    1270:	77 fd       	sbrc	r23, 7
    1272:	80 95       	com	r24
    1274:	98 2f       	mov	r25, r24
    1276:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    127a:	9b 01       	movw	r18, r22
    127c:	ac 01       	movw	r20, r24
    127e:	c7 01       	movw	r24, r14
    1280:	b6 01       	movw	r22, r12
    1282:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    1286:	9b 01       	movw	r18, r22
    1288:	ac 01       	movw	r20, r24
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
		
		intToStr((int)fpart, res + i + 1, afterpoint);
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	28 1a       	sub	r2, r24
    128e:	38 0a       	sbc	r3, r24
    1290:	c2 0d       	add	r28, r2
    1292:	d3 1d       	adc	r29, r3
		res[i] = '.';  // add dot
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
    1294:	c3 01       	movw	r24, r6
    1296:	b2 01       	movw	r22, r4
    1298:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
		
		intToStr((int)fpart, res + i + 1, afterpoint);
    129c:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	a8 01       	movw	r20, r16
    12a6:	be 01       	movw	r22, r28
    12a8:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
	}
}	
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	bf 90       	pop	r11
    12be:	af 90       	pop	r10
    12c0:	9f 90       	pop	r9
    12c2:	8f 90       	pop	r8
    12c4:	7f 90       	pop	r7
    12c6:	6f 90       	pop	r6
    12c8:	5f 90       	pop	r5
    12ca:	4f 90       	pop	r4
    12cc:	3f 90       	pop	r3
    12ce:	2f 90       	pop	r2
    12d0:	08 95       	ret

000012d2 <_Z10drawStringiiPcjjh>:

void drawString( int16_t x, int16_t y, char stri[], uint16_t color,uint16_t bg, uint8_t size){
    12d2:	3f 92       	push	r3
    12d4:	4f 92       	push	r4
    12d6:	5f 92       	push	r5
    12d8:	6f 92       	push	r6
    12da:	7f 92       	push	r7
    12dc:	8f 92       	push	r8
    12de:	9f 92       	push	r9
    12e0:	af 92       	push	r10
    12e2:	bf 92       	push	r11
    12e4:	cf 92       	push	r12
    12e6:	df 92       	push	r13
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	3c 01       	movw	r6, r24
    12f6:	4b 01       	movw	r8, r22
    12f8:	ea 01       	movw	r28, r20
    12fa:	59 01       	movw	r10, r18
    12fc:	68 01       	movw	r12, r16
    12fe:	3e 2c       	mov	r3, r14
	uint8_t i=0;
    1300:	f1 2c       	mov	r15, r1
	char k;
	while(i < strlen(stri)){
	k=stri[i];
	drawChar(x+(i*(size)*6), y, k, color,bg, size);
    1302:	4e 2c       	mov	r4, r14
    1304:	51 2c       	mov	r5, r1
}	

void drawString( int16_t x, int16_t y, char stri[], uint16_t color,uint16_t bg, uint8_t size){
	uint8_t i=0;
	char k;
	while(i < strlen(stri)){
    1306:	1a c0       	rjmp	.+52     	; 0x133c <_Z10drawStringiiPcjjh+0x6a>
	k=stri[i];
    1308:	fe 01       	movw	r30, r28
    130a:	e8 0f       	add	r30, r24
    130c:	f9 1f       	adc	r31, r25
	drawChar(x+(i*(size)*6), y, k, color,bg, size);
    130e:	f4 9c       	mul	r15, r4
    1310:	90 01       	movw	r18, r0
    1312:	f5 9c       	mul	r15, r5
    1314:	30 0d       	add	r19, r0
    1316:	11 24       	eor	r1, r1
    1318:	c9 01       	movw	r24, r18
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	28 0f       	add	r18, r24
    1320:	39 1f       	adc	r19, r25
    1322:	c9 01       	movw	r24, r18
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	e3 2c       	mov	r14, r3
    132a:	86 01       	movw	r16, r12
    132c:	95 01       	movw	r18, r10
    132e:	40 81       	ld	r20, Z
    1330:	b4 01       	movw	r22, r8
    1332:	86 0d       	add	r24, r6
    1334:	97 1d       	adc	r25, r7
    1336:	0e 94 a9 07 	call	0xf52	; 0xf52 <_Z8drawChariihjjh>
	i++;
    133a:	f3 94       	inc	r15
}	

void drawString( int16_t x, int16_t y, char stri[], uint16_t color,uint16_t bg, uint8_t size){
	uint8_t i=0;
	char k;
	while(i < strlen(stri)){
    133c:	8f 2d       	mov	r24, r15
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	fe 01       	movw	r30, r28
    1342:	01 90       	ld	r0, Z+
    1344:	00 20       	and	r0, r0
    1346:	e9 f7       	brne	.-6      	; 0x1342 <_Z10drawStringiiPcjjh+0x70>
    1348:	31 97       	sbiw	r30, 0x01	; 1
    134a:	ec 1b       	sub	r30, r28
    134c:	fd 0b       	sbc	r31, r29
    134e:	8e 17       	cp	r24, r30
    1350:	9f 07       	cpc	r25, r31
    1352:	d0 f2       	brcs	.-76     	; 0x1308 <_Z10drawStringiiPcjjh+0x36>
	k=stri[i];
	drawChar(x+(i*(size)*6), y, k, color,bg, size);
	i++;
	} 
}
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	bf 90       	pop	r11
    1366:	af 90       	pop	r10
    1368:	9f 90       	pop	r9
    136a:	8f 90       	pop	r8
    136c:	7f 90       	pop	r7
    136e:	6f 90       	pop	r6
    1370:	5f 90       	pop	r5
    1372:	4f 90       	pop	r4
    1374:	3f 90       	pop	r3
    1376:	08 95       	ret

00001378 <_Z16fillCircleHelperiiihij>:
void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
  drawFastVLine(x0, y0-r, 2*r+1, color);
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) {
    1378:	2f 92       	push	r2
    137a:	3f 92       	push	r3
    137c:	4f 92       	push	r4
    137e:	5f 92       	push	r5
    1380:	6f 92       	push	r6
    1382:	7f 92       	push	r7
    1384:	8f 92       	push	r8
    1386:	9f 92       	push	r9
    1388:	af 92       	push	r10
    138a:	bf 92       	push	r11
    138c:	cf 92       	push	r12
    138e:	df 92       	push	r13
    1390:	ef 92       	push	r14
    1392:	ff 92       	push	r15
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	2a 97       	sbiw	r28, 0x0a	; 10
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	5c 01       	movw	r10, r24
    13ae:	6a 01       	movw	r12, r20
    13b0:	1c 83       	std	Y+4, r17	; 0x04
    13b2:	0b 83       	std	Y+3, r16	; 0x03

  int16_t f     = 1 - r;
    13b4:	01 e0       	ldi	r16, 0x01	; 1
    13b6:	10 e0       	ldi	r17, 0x00	; 0
    13b8:	04 1b       	sub	r16, r20
    13ba:	15 0b       	sbc	r17, r21
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
    13bc:	44 24       	eor	r4, r4
    13be:	55 24       	eor	r5, r5
    13c0:	44 1a       	sub	r4, r20
    13c2:	55 0a       	sbc	r5, r21
    13c4:	44 0c       	add	r4, r4
    13c6:	55 1c       	adc	r5, r5
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
    13c8:	14 16       	cp	r1, r20
    13ca:	15 06       	cpc	r1, r21
    13cc:	0c f0       	brlt	.+2      	; 0x13d0 <_Z16fillCircleHelperiiihij+0x58>
    13ce:	7a c0       	rjmp	.+244    	; 0x14c4 <_Z16fillCircleHelperiiihij+0x14c>
    13d0:	3b 01       	movw	r6, r22
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	68 1a       	sub	r6, r24
    13d6:	71 08       	sbc	r7, r1
    13d8:	88 24       	eor	r8, r8
    13da:	83 94       	inc	r8
    13dc:	91 2c       	mov	r9, r1
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1) {
    13de:	92 2f       	mov	r25, r18
    13e0:	91 70       	andi	r25, 0x01	; 1
    13e2:	99 83       	std	Y+1, r25	; 0x01
    13e4:	eb 81       	ldd	r30, Y+3	; 0x03
    13e6:	fc 81       	ldd	r31, Y+4	; 0x04
    13e8:	31 96       	adiw	r30, 0x01	; 1
    13ea:	fe 83       	std	Y+6, r31	; 0x06
    13ec:	ed 83       	std	Y+5, r30	; 0x05
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
      drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
    }
    if (cornername & 0x2) {
    13ee:	22 70       	andi	r18, 0x02	; 2
    13f0:	2a 83       	std	Y+2, r18	; 0x02
    13f2:	9a 86       	std	Y+10, r9	; 0x0a
    13f4:	89 86       	std	Y+9, r8	; 0x09
    13f6:	45 01       	movw	r8, r10
    13f8:	78 87       	std	Y+8, r23	; 0x08
    13fa:	6f 83       	std	Y+7, r22	; 0x07
    13fc:	17 01       	movw	r2, r14
  int16_t ddF_y = -2 * r;
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
    if (f >= 0) {
    13fe:	11 23       	and	r17, r17
    1400:	44 f0       	brlt	.+16     	; 0x1412 <_Z16fillCircleHelperiiihij+0x9a>
      y--;
    1402:	f1 e0       	ldi	r31, 0x01	; 1
    1404:	cf 1a       	sub	r12, r31
    1406:	d1 08       	sbc	r13, r1
      ddF_y += 2;
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	48 0e       	add	r4, r24
    140c:	51 1c       	adc	r5, r1
      f     += ddF_y;
    140e:	04 0d       	add	r16, r4
    1410:	15 1d       	adc	r17, r5
    }
    x++;
    1412:	a9 84       	ldd	r10, Y+9	; 0x09
    1414:	ba 84       	ldd	r11, Y+10	; 0x0a
    1416:	75 01       	movw	r14, r10
    1418:	ee 0c       	add	r14, r14
    141a:	ff 1c       	adc	r15, r15
    141c:	c7 01       	movw	r24, r14
    141e:	01 96       	adiw	r24, 0x01	; 1
    ddF_x += 2;
    f     += ddF_x;
    1420:	08 0f       	add	r16, r24
    1422:	19 1f       	adc	r17, r25

    if (cornername & 0x1) {
    1424:	99 81       	ldd	r25, Y+1	; 0x01
    1426:	99 23       	and	r25, r25
    1428:	f1 f0       	breq	.+60     	; 0x1466 <_Z16fillCircleHelperiiihij+0xee>
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
    142a:	a6 01       	movw	r20, r12
    142c:	44 0f       	add	r20, r20
    142e:	55 1f       	adc	r21, r21
    1430:	4f 5f       	subi	r20, 0xFF	; 255
    1432:	5f 4f       	sbci	r21, 0xFF	; 255
    1434:	eb 81       	ldd	r30, Y+3	; 0x03
    1436:	fc 81       	ldd	r31, Y+4	; 0x04
    1438:	4e 0f       	add	r20, r30
    143a:	5f 1f       	adc	r21, r31
    143c:	91 01       	movw	r18, r2
    143e:	6f 81       	ldd	r22, Y+7	; 0x07
    1440:	78 85       	ldd	r23, Y+8	; 0x08
    1442:	6c 19       	sub	r22, r12
    1444:	7d 09       	sbc	r23, r13
    1446:	c5 01       	movw	r24, r10
    1448:	88 0d       	add	r24, r8
    144a:	99 1d       	adc	r25, r9
    144c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_Z13drawFastVLineiiij>
      drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
    1450:	91 01       	movw	r18, r2
    1452:	4d 81       	ldd	r20, Y+5	; 0x05
    1454:	5e 81       	ldd	r21, Y+6	; 0x06
    1456:	4e 0d       	add	r20, r14
    1458:	5f 1d       	adc	r21, r15
    145a:	b3 01       	movw	r22, r6
    145c:	c4 01       	movw	r24, r8
    145e:	8c 0d       	add	r24, r12
    1460:	9d 1d       	adc	r25, r13
    1462:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_Z13drawFastVLineiiij>
    }
    if (cornername & 0x2) {
    1466:	fa 81       	ldd	r31, Y+2	; 0x02
    1468:	ff 23       	and	r31, r31
    146a:	01 f1       	breq	.+64     	; 0x14ac <_Z16fillCircleHelperiiihij+0x134>
      drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
    146c:	a6 01       	movw	r20, r12
    146e:	44 0f       	add	r20, r20
    1470:	55 1f       	adc	r21, r21
    1472:	4f 5f       	subi	r20, 0xFF	; 255
    1474:	5f 4f       	sbci	r21, 0xFF	; 255
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	48 0f       	add	r20, r24
    147c:	59 1f       	adc	r21, r25
    147e:	91 01       	movw	r18, r2
    1480:	6f 81       	ldd	r22, Y+7	; 0x07
    1482:	78 85       	ldd	r23, Y+8	; 0x08
    1484:	6c 19       	sub	r22, r12
    1486:	7d 09       	sbc	r23, r13
    1488:	c4 01       	movw	r24, r8
    148a:	e9 85       	ldd	r30, Y+9	; 0x09
    148c:	fa 85       	ldd	r31, Y+10	; 0x0a
    148e:	8e 1b       	sub	r24, r30
    1490:	9f 0b       	sbc	r25, r31
    1492:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_Z13drawFastVLineiiij>
    1496:	4d 81       	ldd	r20, Y+5	; 0x05
    1498:	5e 81       	ldd	r21, Y+6	; 0x06
    149a:	4e 0d       	add	r20, r14
    149c:	5f 1d       	adc	r21, r15
      drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
    149e:	91 01       	movw	r18, r2
    14a0:	b3 01       	movw	r22, r6
    14a2:	c4 01       	movw	r24, r8
    14a4:	8c 19       	sub	r24, r12
    14a6:	9d 09       	sbc	r25, r13
    14a8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_Z13drawFastVLineiiij>
    14ac:	89 85       	ldd	r24, Y+9	; 0x09
    14ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	9a 87       	std	Y+10, r25	; 0x0a
    14b4:	89 87       	std	Y+9, r24	; 0x09
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	69 1a       	sub	r6, r25
    14ba:	71 08       	sbc	r7, r1
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
    14bc:	ac 14       	cp	r10, r12
    14be:	bd 04       	cpc	r11, r13
    14c0:	0c f4       	brge	.+2      	; 0x14c4 <_Z16fillCircleHelperiiihij+0x14c>
    14c2:	9d cf       	rjmp	.-198    	; 0x13fe <_Z16fillCircleHelperiiihij+0x86>
    if (cornername & 0x2) {
      drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
      drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
    }
  }
}
    14c4:	2a 96       	adiw	r28, 0x0a	; 10
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	ff 90       	pop	r15
    14da:	ef 90       	pop	r14
    14dc:	df 90       	pop	r13
    14de:	cf 90       	pop	r12
    14e0:	bf 90       	pop	r11
    14e2:	af 90       	pop	r10
    14e4:	9f 90       	pop	r9
    14e6:	8f 90       	pop	r8
    14e8:	7f 90       	pop	r7
    14ea:	6f 90       	pop	r6
    14ec:	5f 90       	pop	r5
    14ee:	4f 90       	pop	r4
    14f0:	3f 90       	pop	r3
    14f2:	2f 90       	pop	r2
    14f4:	08 95       	ret

000014f6 <_Z10fillCircleiiij>:
	drawChar_gfx(x+(ii*(size)*17), y, kk, color,bg, size);
	ii++;
	} 
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
    14f6:	af 92       	push	r10
    14f8:	bf 92       	push	r11
    14fa:	cf 92       	push	r12
    14fc:	df 92       	push	r13
    14fe:	ef 92       	push	r14
    1500:	ff 92       	push	r15
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	6c 01       	movw	r12, r24
    150c:	5b 01       	movw	r10, r22
    150e:	ea 01       	movw	r28, r20
    1510:	79 01       	movw	r14, r18
  drawFastVLine(x0, y0-r, 2*r+1, color);
    1512:	44 0f       	add	r20, r20
    1514:	55 1f       	adc	r21, r21
    1516:	4f 5f       	subi	r20, 0xFF	; 255
    1518:	5f 4f       	sbci	r21, 0xFF	; 255
    151a:	6c 1b       	sub	r22, r28
    151c:	7d 0b       	sbc	r23, r29
    151e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_Z13drawFastVLineiiij>
  fillCircleHelper(x0, y0, r, 3, 0, color);
    1522:	00 e0       	ldi	r16, 0x00	; 0
    1524:	10 e0       	ldi	r17, 0x00	; 0
    1526:	23 e0       	ldi	r18, 0x03	; 3
    1528:	ae 01       	movw	r20, r28
    152a:	b5 01       	movw	r22, r10
    152c:	c6 01       	movw	r24, r12
    152e:	0e 94 bc 09 	call	0x1378	; 0x1378 <_Z16fillCircleHelperiiihij>
}
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	df 90       	pop	r13
    1540:	cf 90       	pop	r12
    1542:	bf 90       	pop	r11
    1544:	af 90       	pop	r10
    1546:	08 95       	ret

00001548 <_Z16drawCircleHelperiiihj>:
  drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
  drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
  drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color) {
    1548:	2f 92       	push	r2
    154a:	3f 92       	push	r3
    154c:	4f 92       	push	r4
    154e:	5f 92       	push	r5
    1550:	6f 92       	push	r6
    1552:	7f 92       	push	r7
    1554:	8f 92       	push	r8
    1556:	9f 92       	push	r9
    1558:	af 92       	push	r10
    155a:	bf 92       	push	r11
    155c:	cf 92       	push	r12
    155e:	df 92       	push	r13
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	2e 97       	sbiw	r28, 0x0e	; 14
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	6c 01       	movw	r12, r24
    157e:	5e 87       	std	Y+14, r21	; 0x0e
    1580:	4d 87       	std	Y+13, r20	; 0x0d
    1582:	1c 87       	std	Y+12, r17	; 0x0c
    1584:	0b 87       	std	Y+11, r16	; 0x0b
  int16_t f     = 1 - r;
    1586:	01 e0       	ldi	r16, 0x01	; 1
    1588:	10 e0       	ldi	r17, 0x00	; 0
    158a:	04 1b       	sub	r16, r20
    158c:	15 0b       	sbc	r17, r21
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
    158e:	ca 01       	movw	r24, r20
    1590:	91 95       	neg	r25
    1592:	81 95       	neg	r24
    1594:	91 09       	sbc	r25, r1
    1596:	ac 01       	movw	r20, r24
    1598:	44 0f       	add	r20, r20
    159a:	55 1f       	adc	r21, r21
    159c:	5a 83       	std	Y+2, r21	; 0x02
    159e:	49 83       	std	Y+1, r20	; 0x01
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
    15a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a4:	18 16       	cp	r1, r24
    15a6:	19 06       	cpc	r1, r25
    15a8:	0c f0       	brlt	.+2      	; 0x15ac <_Z16drawCircleHelperiiihj+0x64>
    15aa:	a9 c0       	rjmp	.+338    	; 0x16fe <_Z16drawCircleHelperiiihj+0x1b6>
    15ac:	7b 01       	movw	r14, r22
    15ae:	91 e0       	ldi	r25, 0x01	; 1
    15b0:	e9 1a       	sub	r14, r25
    15b2:	f1 08       	sbc	r15, r1
    15b4:	36 01       	movw	r6, r12
    15b6:	e1 e0       	ldi	r30, 0x01	; 1
    15b8:	6e 1a       	sub	r6, r30
    15ba:	71 08       	sbc	r7, r1
    15bc:	2b 01       	movw	r4, r22
    15be:	ff ef       	ldi	r31, 0xFF	; 255
    15c0:	4f 1a       	sub	r4, r31
    15c2:	5f 0a       	sbc	r5, r31
    15c4:	16 01       	movw	r2, r12
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	23 1a       	sub	r2, r19
    15ca:	33 0a       	sbc	r3, r19

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color) {
  int16_t f     = 1 - r;
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x     = 0;
    15cc:	81 2c       	mov	r8, r1
    15ce:	91 2c       	mov	r9, r1
      f     += ddF_y;
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4) {
    15d0:	42 2f       	mov	r20, r18
    15d2:	44 70       	andi	r20, 0x04	; 4
    15d4:	4f 83       	std	Y+7, r20	; 0x07
      drawPixel(x0 + x, y0 + y, color);
      drawPixel(x0 + y, y0 + x, color);
    }
    if (cornername & 0x2) {
    15d6:	52 2f       	mov	r21, r18
    15d8:	52 70       	andi	r21, 0x02	; 2
    15da:	58 87       	std	Y+8, r21	; 0x08
      drawPixel(x0 + x, y0 - y, color);
      drawPixel(x0 + y, y0 - x, color);
    }
    if (cornername & 0x8) {
    15dc:	82 2f       	mov	r24, r18
    15de:	88 70       	andi	r24, 0x08	; 8
    15e0:	89 87       	std	Y+9, r24	; 0x09
      drawPixel(x0 - y, y0 + x, color);
      drawPixel(x0 - x, y0 + y, color);
    }
    if (cornername & 0x1) {
    15e2:	21 70       	andi	r18, 0x01	; 1
    15e4:	2a 87       	std	Y+10, r18	; 0x0a
    15e6:	dc 82       	std	Y+4, r13	; 0x04
    15e8:	cb 82       	std	Y+3, r12	; 0x03
    15ea:	7e 83       	std	Y+6, r23	; 0x06
    15ec:	6d 83       	std	Y+5, r22	; 0x05
    15ee:	a9 80       	ldd	r10, Y+1	; 0x01
    15f0:	ba 80       	ldd	r11, Y+2	; 0x02
    15f2:	cb 84       	ldd	r12, Y+11	; 0x0b
    15f4:	dc 84       	ldd	r13, Y+12	; 0x0c
  int16_t ddF_y = -2 * r;
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
    if (f >= 0) {
    15f6:	11 23       	and	r17, r17
    15f8:	5c f0       	brlt	.+22     	; 0x1610 <_Z16drawCircleHelperiiihj+0xc8>
      y--;
    15fa:	2d 85       	ldd	r18, Y+13	; 0x0d
    15fc:	3e 85       	ldd	r19, Y+14	; 0x0e
    15fe:	21 50       	subi	r18, 0x01	; 1
    1600:	31 09       	sbc	r19, r1
    1602:	3e 87       	std	Y+14, r19	; 0x0e
    1604:	2d 87       	std	Y+13, r18	; 0x0d
      ddF_y += 2;
    1606:	32 e0       	ldi	r19, 0x02	; 2
    1608:	a3 0e       	add	r10, r19
    160a:	b1 1c       	adc	r11, r1
      f     += ddF_y;
    160c:	0a 0d       	add	r16, r10
    160e:	1b 1d       	adc	r17, r11
    }
    x++;
    1610:	4f ef       	ldi	r20, 0xFF	; 255
    1612:	84 1a       	sub	r8, r20
    1614:	94 0a       	sbc	r9, r20
    1616:	c4 01       	movw	r24, r8
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	01 96       	adiw	r24, 0x01	; 1
    ddF_x += 2;
    f     += ddF_x;
    161e:	08 0f       	add	r16, r24
    1620:	19 1f       	adc	r17, r25
    if (cornername & 0x4) {
    1622:	5f 81       	ldd	r21, Y+7	; 0x07
    1624:	55 23       	and	r21, r21
    1626:	a1 f0       	breq	.+40     	; 0x1650 <_Z16drawCircleHelperiiihj+0x108>
      drawPixel(x0 + x, y0 + y, color);
    1628:	a6 01       	movw	r20, r12
    162a:	6d 81       	ldd	r22, Y+5	; 0x05
    162c:	7e 81       	ldd	r23, Y+6	; 0x06
    162e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1630:	9e 85       	ldd	r25, Y+14	; 0x0e
    1632:	68 0f       	add	r22, r24
    1634:	79 1f       	adc	r23, r25
    1636:	c1 01       	movw	r24, r2
    1638:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
      drawPixel(x0 + y, y0 + x, color);
    163c:	a6 01       	movw	r20, r12
    163e:	b2 01       	movw	r22, r4
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	9c 81       	ldd	r25, Y+4	; 0x04
    1644:	ed 85       	ldd	r30, Y+13	; 0x0d
    1646:	fe 85       	ldd	r31, Y+14	; 0x0e
    1648:	8e 0f       	add	r24, r30
    164a:	9f 1f       	adc	r25, r31
    164c:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
    }
    if (cornername & 0x2) {
    1650:	f8 85       	ldd	r31, Y+8	; 0x08
    1652:	ff 23       	and	r31, r31
    1654:	a1 f0       	breq	.+40     	; 0x167e <_Z16drawCircleHelperiiihj+0x136>
      drawPixel(x0 + x, y0 - y, color);
    1656:	a6 01       	movw	r20, r12
    1658:	6d 81       	ldd	r22, Y+5	; 0x05
    165a:	7e 81       	ldd	r23, Y+6	; 0x06
    165c:	2d 85       	ldd	r18, Y+13	; 0x0d
    165e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1660:	62 1b       	sub	r22, r18
    1662:	73 0b       	sbc	r23, r19
    1664:	c1 01       	movw	r24, r2
    1666:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
      drawPixel(x0 + y, y0 - x, color);
    166a:	a6 01       	movw	r20, r12
    166c:	b7 01       	movw	r22, r14
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	ed 85       	ldd	r30, Y+13	; 0x0d
    1674:	fe 85       	ldd	r31, Y+14	; 0x0e
    1676:	8e 0f       	add	r24, r30
    1678:	9f 1f       	adc	r25, r31
    167a:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
    }
    if (cornername & 0x8) {
    167e:	f9 85       	ldd	r31, Y+9	; 0x09
    1680:	ff 23       	and	r31, r31
    1682:	a1 f0       	breq	.+40     	; 0x16ac <_Z16drawCircleHelperiiihj+0x164>
      drawPixel(x0 - y, y0 + x, color);
    1684:	a6 01       	movw	r20, r12
    1686:	b2 01       	movw	r22, r4
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	2d 85       	ldd	r18, Y+13	; 0x0d
    168e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1690:	82 1b       	sub	r24, r18
    1692:	93 0b       	sbc	r25, r19
    1694:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
      drawPixel(x0 - x, y0 + y, color);
    1698:	a6 01       	movw	r20, r12
    169a:	6d 81       	ldd	r22, Y+5	; 0x05
    169c:	7e 81       	ldd	r23, Y+6	; 0x06
    169e:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a2:	68 0f       	add	r22, r24
    16a4:	79 1f       	adc	r23, r25
    16a6:	c3 01       	movw	r24, r6
    16a8:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
    }
    if (cornername & 0x1) {
    16ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ae:	99 23       	and	r25, r25
    16b0:	a1 f0       	breq	.+40     	; 0x16da <_Z16drawCircleHelperiiihj+0x192>
      drawPixel(x0 - y, y0 - x, color);
    16b2:	a6 01       	movw	r20, r12
    16b4:	b7 01       	movw	r22, r14
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	ed 85       	ldd	r30, Y+13	; 0x0d
    16bc:	fe 85       	ldd	r31, Y+14	; 0x0e
    16be:	8e 1b       	sub	r24, r30
    16c0:	9f 0b       	sbc	r25, r31
    16c2:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
      drawPixel(x0 - x, y0 - y, color);
    16c6:	a6 01       	movw	r20, r12
    16c8:	6d 81       	ldd	r22, Y+5	; 0x05
    16ca:	7e 81       	ldd	r23, Y+6	; 0x06
    16cc:	2d 85       	ldd	r18, Y+13	; 0x0d
    16ce:	3e 85       	ldd	r19, Y+14	; 0x0e
    16d0:	62 1b       	sub	r22, r18
    16d2:	73 0b       	sbc	r23, r19
    16d4:	c3 01       	movw	r24, r6
    16d6:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
    16da:	31 e0       	ldi	r19, 0x01	; 1
    16dc:	e3 1a       	sub	r14, r19
    16de:	f1 08       	sbc	r15, r1
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	64 1a       	sub	r6, r20
    16e4:	71 08       	sbc	r7, r1
    16e6:	5f ef       	ldi	r21, 0xFF	; 255
    16e8:	45 1a       	sub	r4, r21
    16ea:	55 0a       	sbc	r5, r21
    16ec:	8f ef       	ldi	r24, 0xFF	; 255
    16ee:	28 1a       	sub	r2, r24
    16f0:	38 0a       	sbc	r3, r24
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
    16f2:	ed 85       	ldd	r30, Y+13	; 0x0d
    16f4:	fe 85       	ldd	r31, Y+14	; 0x0e
    16f6:	8e 16       	cp	r8, r30
    16f8:	9f 06       	cpc	r9, r31
    16fa:	0c f4       	brge	.+2      	; 0x16fe <_Z16drawCircleHelperiiihj+0x1b6>
    16fc:	7c cf       	rjmp	.-264    	; 0x15f6 <_Z16drawCircleHelperiiihj+0xae>
    if (cornername & 0x1) {
      drawPixel(x0 - y, y0 - x, color);
      drawPixel(x0 - x, y0 - y, color);
    }
  }
}
    16fe:	2e 96       	adiw	r28, 0x0e	; 14
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	bf 90       	pop	r11
    171c:	af 90       	pop	r10
    171e:	9f 90       	pop	r9
    1720:	8f 90       	pop	r8
    1722:	7f 90       	pop	r7
    1724:	6f 90       	pop	r6
    1726:	5f 90       	pop	r5
    1728:	4f 90       	pop	r4
    172a:	3f 90       	pop	r3
    172c:	2f 90       	pop	r2
    172e:	08 95       	ret

00001730 <_Z13drawRoundRectiiiiij>:
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
}

// Draw a rounded rectangle
void drawRoundRect(int16_t x, int16_t y, int16_t w,int16_t h, int16_t r, uint16_t color) {
    1730:	2f 92       	push	r2
    1732:	3f 92       	push	r3
    1734:	4f 92       	push	r4
    1736:	5f 92       	push	r5
    1738:	6f 92       	push	r6
    173a:	7f 92       	push	r7
    173c:	8f 92       	push	r8
    173e:	9f 92       	push	r9
    1740:	af 92       	push	r10
    1742:	bf 92       	push	r11
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	00 d0       	rcall	.+0      	; 0x1756 <_Z13drawRoundRectiiiiij+0x26>
    1756:	00 d0       	rcall	.+0      	; 0x1758 <_Z13drawRoundRectiiiiij+0x28>
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	3c 01       	movw	r6, r24
    175e:	5b 01       	movw	r10, r22
    1760:	1a 01       	movw	r2, r20
    1762:	29 01       	movw	r4, r18
    1764:	1c 83       	std	Y+4, r17	; 0x04
    1766:	0b 83       	std	Y+3, r16	; 0x03
  // smarter version
  drawFastHLine(x+r  , y    , w-2*r, color); // Top
    1768:	11 95       	neg	r17
    176a:	01 95       	neg	r16
    176c:	11 09       	sbc	r17, r1
    176e:	00 0f       	add	r16, r16
    1770:	11 1f       	adc	r17, r17
    1772:	48 01       	movw	r8, r16
    1774:	84 0e       	add	r8, r20
    1776:	95 1e       	adc	r9, r21
    1778:	cb 80       	ldd	r12, Y+3	; 0x03
    177a:	dc 80       	ldd	r13, Y+4	; 0x04
    177c:	c8 0e       	add	r12, r24
    177e:	d9 1e       	adc	r13, r25
    1780:	97 01       	movw	r18, r14
    1782:	a4 01       	movw	r20, r8
    1784:	c6 01       	movw	r24, r12
    1786:	0e 94 3c 05 	call	0xa78	; 0xa78 <_Z13drawFastHLineiiij>
  drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
    178a:	c5 01       	movw	r24, r10
    178c:	84 0d       	add	r24, r4
    178e:	95 1d       	adc	r25, r5
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	bc 01       	movw	r22, r24
    1796:	61 50       	subi	r22, 0x01	; 1
    1798:	71 09       	sbc	r23, r1
    179a:	97 01       	movw	r18, r14
    179c:	a4 01       	movw	r20, r8
    179e:	c6 01       	movw	r24, r12
    17a0:	0e 94 3c 05 	call	0xa78	; 0xa78 <_Z13drawFastHLineiiij>
  drawFastVLine(x    , y+r  , h-2*r, color); // Left
    17a4:	04 0d       	add	r16, r4
    17a6:	15 1d       	adc	r17, r5
    17a8:	eb 81       	ldd	r30, Y+3	; 0x03
    17aa:	fc 81       	ldd	r31, Y+4	; 0x04
    17ac:	ae 0e       	add	r10, r30
    17ae:	bf 1e       	adc	r11, r31
    17b0:	97 01       	movw	r18, r14
    17b2:	a8 01       	movw	r20, r16
    17b4:	b5 01       	movw	r22, r10
    17b6:	c3 01       	movw	r24, r6
    17b8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_Z13drawFastVLineiiij>
  drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
    17bc:	62 0c       	add	r6, r2
    17be:	73 1c       	adc	r7, r3
    17c0:	97 01       	movw	r18, r14
    17c2:	a8 01       	movw	r20, r16
    17c4:	b5 01       	movw	r22, r10
    17c6:	c3 01       	movw	r24, r6
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_Z13drawFastVLineiiij>
  // draw four corners
  drawCircleHelper(x+r    , y+r    , r, 1, color);
    17ce:	87 01       	movw	r16, r14
    17d0:	21 e0       	ldi	r18, 0x01	; 1
    17d2:	4b 81       	ldd	r20, Y+3	; 0x03
    17d4:	5c 81       	ldd	r21, Y+4	; 0x04
    17d6:	b5 01       	movw	r22, r10
    17d8:	c6 01       	movw	r24, r12
    17da:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_Z16drawCircleHelperiiihj>
  drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	68 1a       	sub	r6, r24
    17e4:	79 0a       	sbc	r7, r25
    17e6:	91 e0       	ldi	r25, 0x01	; 1
    17e8:	69 1a       	sub	r6, r25
    17ea:	71 08       	sbc	r7, r1
    17ec:	22 e0       	ldi	r18, 0x02	; 2
    17ee:	4b 81       	ldd	r20, Y+3	; 0x03
    17f0:	5c 81       	ldd	r21, Y+4	; 0x04
    17f2:	b5 01       	movw	r22, r10
    17f4:	c3 01       	movw	r24, r6
    17f6:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_Z16drawCircleHelperiiihj>
  drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
    17fa:	a9 80       	ldd	r10, Y+1	; 0x01
    17fc:	ba 80       	ldd	r11, Y+2	; 0x02
    17fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1800:	fc 81       	ldd	r31, Y+4	; 0x04
    1802:	ae 1a       	sub	r10, r30
    1804:	bf 0a       	sbc	r11, r31
    1806:	f1 e0       	ldi	r31, 0x01	; 1
    1808:	af 1a       	sub	r10, r31
    180a:	b1 08       	sbc	r11, r1
    180c:	24 e0       	ldi	r18, 0x04	; 4
    180e:	4b 81       	ldd	r20, Y+3	; 0x03
    1810:	5c 81       	ldd	r21, Y+4	; 0x04
    1812:	b5 01       	movw	r22, r10
    1814:	c3 01       	movw	r24, r6
    1816:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_Z16drawCircleHelperiiihj>
  drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
    181a:	28 e0       	ldi	r18, 0x08	; 8
    181c:	4b 81       	ldd	r20, Y+3	; 0x03
    181e:	5c 81       	ldd	r21, Y+4	; 0x04
    1820:	b5 01       	movw	r22, r10
    1822:	c6 01       	movw	r24, r12
    1824:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_Z16drawCircleHelperiiihj>
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	ff 90       	pop	r15
    183a:	ef 90       	pop	r14
    183c:	df 90       	pop	r13
    183e:	cf 90       	pop	r12
    1840:	bf 90       	pop	r11
    1842:	af 90       	pop	r10
    1844:	9f 90       	pop	r9
    1846:	8f 90       	pop	r8
    1848:	7f 90       	pop	r7
    184a:	6f 90       	pop	r6
    184c:	5f 90       	pop	r5
    184e:	4f 90       	pop	r4
    1850:	3f 90       	pop	r3
    1852:	2f 90       	pop	r2
    1854:	08 95       	ret

00001856 <_Z8getPointPjS_Pd>:
  }
return;
  }
#endif

void getPoint( uint16_t *x_point, uint16_t *y_point, double *z_point) {
    1856:	8f 92       	push	r8
    1858:	9f 92       	push	r9
    185a:	af 92       	push	r10
    185c:	bf 92       	push	r11
    185e:	cf 92       	push	r12
    1860:	df 92       	push	r13
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	7c 01       	movw	r14, r24
    1870:	ea 01       	movw	r28, r20
 // pinMode(_xp, OUTPUT);
 // pinMode(_xm, OUTPUT);
 // digitalWrite(_xp, HIGH);
 // digitalWrite(_xm, LOW);
 
  YPLOW;
    1872:	41 98       	cbi	0x08, 1	; 8
  YMLOW;
    1874:	5e 98       	cbi	0x0b, 6	; 11
  YPReadDir;
    1876:	39 98       	cbi	0x07, 1	; 7
  YMReadDir; 
    1878:	56 98       	cbi	0x0a, 6	; 10
  
  XPWriteDir;
    187a:	55 9a       	sbi	0x0a, 5	; 10
  XMWriteDir;
    187c:	3a 9a       	sbi	0x07, 2	; 7
  XPHIGH;
    187e:	5d 9a       	sbi	0x0b, 5	; 11
  XMLOW;
    1880:	42 98       	cbi	0x08, 2	; 8
  
  //write digital inputs off in used ADC pins to save power!
  DIDR0=0B00000110; //remember to write back to zeros when done!!!!
    1882:	86 e0       	ldi	r24, 0x06	; 6
    1884:	80 93 7e 00 	sts	0x007E, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1888:	84 e0       	ldi	r24, 0x04	; 4
    188a:	8a 95       	dec	r24
    188c:	f1 f7       	brne	.-4      	; 0x188a <_Z8getPointPjS_Pd+0x34>
  //ADMUX ADC1=YP=PC1=0001 , ADC2=XM=PC2=0010
	_delay_us(1);
	ADMUX=0b00000001; 		//YP
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	80 93 7c 00 	sts	0x007C, r24
    1894:	e4 e0       	ldi	r30, 0x04	; 4
    1896:	ea 95       	dec	r30
    1898:	f1 f7       	brne	.-4      	; 0x1896 <_Z8getPointPjS_Pd+0x40>
	_delay_us(1);
	//ADCSRA |= (1 << ADSC);	 // start an ADC conversion
	//while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
	
    for (i=0; i<NUMSAMPLES; i++) {
		ADCSRA |= (1 << ADSC);	 // start an ADC conversion
    189a:	ea e7       	ldi	r30, 0x7A	; 122
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	80 64       	ori	r24, 0x40	; 64
    18a2:	80 83       	st	Z, r24
		while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
    18a4:	80 81       	ld	r24, Z
    18a6:	86 fd       	sbrc	r24, 6
    18a8:	fd cf       	rjmp	.-6      	; 0x18a4 <_Z8getPointPjS_Pd+0x4e>
		samples[i] = ADC;
    18aa:	80 91 78 00 	lds	r24, 0x0078
    18ae:	90 91 79 00 	lds	r25, 0x0079
    18b2:	8c 01       	movw	r16, r24
	_delay_us(1);
	//ADCSRA |= (1 << ADSC);	 // start an ADC conversion
	//while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
	
    for (i=0; i<NUMSAMPLES; i++) {
		ADCSRA |= (1 << ADSC);	 // start an ADC conversion
    18b4:	ea e7       	ldi	r30, 0x7A	; 122
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	80 64       	ori	r24, 0x40	; 64
    18bc:	80 83       	st	Z, r24
		while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
    18be:	80 81       	ld	r24, Z
    18c0:	86 fd       	sbrc	r24, 6
    18c2:	fd cf       	rjmp	.-6      	; 0x18be <_Z8getPointPjS_Pd+0x68>
		samples[i] = ADC;
    18c4:	80 91 78 00 	lds	r24, 0x0078
    18c8:	90 91 79 00 	lds	r25, 0x0079
    18cc:	9c 01       	movw	r18, r24
	insert_sort(samples, NUMSAMPLES);
#endif
#if NUMSAMPLES == 2
	// Allow small amount of measurement noise, because capacitive
	// coupling to a TFT display's signals can induce some noise.
	if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
    18ce:	a8 01       	movw	r20, r16
    18d0:	48 1b       	sub	r20, r24
    18d2:	59 0b       	sbc	r21, r25
    18d4:	4c 5f       	subi	r20, 0xFC	; 252
    18d6:	5f 4f       	sbci	r21, 0xFF	; 255
    18d8:	49 30       	cpi	r20, 0x09	; 9
    18da:	51 05       	cpc	r21, r1
    18dc:	28 f4       	brcc	.+10     	; 0x18e8 <_Z8getPointPjS_Pd+0x92>
		valid = 0;
	} else {
		samples[1] = (samples[0] + samples[1]) >> 1; // average 2 samples 
    18de:	80 0f       	add	r24, r16
    18e0:	91 1f       	adc	r25, r17
    18e2:	9c 01       	movw	r18, r24
    18e4:	35 95       	asr	r19
    18e6:	27 95       	ror	r18
	}
#endif
	
	*x_point =1023-samples[NUMSAMPLES/2];
    18e8:	8f ef       	ldi	r24, 0xFF	; 255
    18ea:	93 e0       	ldi	r25, 0x03	; 3
    18ec:	82 1b       	sub	r24, r18
    18ee:	93 0b       	sbc	r25, r19
    18f0:	f7 01       	movw	r30, r14
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	80 83       	st	Z, r24
 //  digitalWrite(_xp, LOW);
 //  pinMode(_yp, OUTPUT);
 //  digitalWrite(_yp, HIGH);
 //  pinMode(_ym, OUTPUT);
  
	XPLOW;
    18f6:	5d 98       	cbi	0x0b, 5	; 11
	XPReadDir;
    18f8:	55 98       	cbi	0x0a, 5	; 10
	XMReadDir;
    18fa:	3a 98       	cbi	0x07, 2	; 7
	YPWriteDir;
    18fc:	39 9a       	sbi	0x07, 1	; 7
	YPHIGH;
    18fe:	41 9a       	sbi	0x08, 1	; 8
	YMWriteDir;
    1900:	56 9a       	sbi	0x0a, 6	; 10
    1902:	f4 e0       	ldi	r31, 0x04	; 4
    1904:	fa 95       	dec	r31
    1906:	f1 f7       	brne	.-4      	; 0x1904 <_Z8getPointPjS_Pd+0xae>
	
	_delay_us(1);
	ADMUX=0b00000010; 		//XM	
    1908:	82 e0       	ldi	r24, 0x02	; 2
    190a:	80 93 7c 00 	sts	0x007C, r24
    190e:	84 e0       	ldi	r24, 0x04	; 4
    1910:	8a 95       	dec	r24
    1912:	f1 f7       	brne	.-4      	; 0x1910 <_Z8getPointPjS_Pd+0xba>
	_delay_us(1);	
	//ADCSRA |= (1 << ADSC);	 // start an ADC conversion
	//while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
	
    for (i=0; i<NUMSAMPLES; i++) {
		ADCSRA |= (1 << ADSC);	 // start an ADC conversion
    1914:	ea e7       	ldi	r30, 0x7A	; 122
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	80 64       	ori	r24, 0x40	; 64
    191c:	80 83       	st	Z, r24
		while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
    191e:	80 81       	ld	r24, Z
    1920:	86 fd       	sbrc	r24, 6
    1922:	fd cf       	rjmp	.-6      	; 0x191e <_Z8getPointPjS_Pd+0xc8>
		samples[i] = ADC;
    1924:	80 91 78 00 	lds	r24, 0x0078
    1928:	90 91 79 00 	lds	r25, 0x0079
    192c:	8c 01       	movw	r16, r24
	_delay_us(1);	
	//ADCSRA |= (1 << ADSC);	 // start an ADC conversion
	//while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
	
    for (i=0; i<NUMSAMPLES; i++) {
		ADCSRA |= (1 << ADSC);	 // start an ADC conversion
    192e:	ea e7       	ldi	r30, 0x7A	; 122
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	80 64       	ori	r24, 0x40	; 64
    1936:	80 83       	st	Z, r24
		while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
    1938:	80 81       	ld	r24, Z
    193a:	86 fd       	sbrc	r24, 6
    193c:	fd cf       	rjmp	.-6      	; 0x1938 <_Z8getPointPjS_Pd+0xe2>
		samples[i] = ADC;
    193e:	80 91 78 00 	lds	r24, 0x0078
    1942:	90 91 79 00 	lds	r25, 0x0079
    1946:	9c 01       	movw	r18, r24
	insert_sort(samples, NUMSAMPLES);
#endif
#if NUMSAMPLES == 2
	// Allow small amount of measurement noise, because capacitive
	// coupling to a TFT display's signals can induce some noise.
	if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
    1948:	a8 01       	movw	r20, r16
    194a:	48 1b       	sub	r20, r24
    194c:	59 0b       	sbc	r21, r25
    194e:	4c 5f       	subi	r20, 0xFC	; 252
    1950:	5f 4f       	sbci	r21, 0xFF	; 255
    1952:	49 30       	cpi	r20, 0x09	; 9
    1954:	51 05       	cpc	r21, r1
    1956:	28 f4       	brcc	.+10     	; 0x1962 <_Z8getPointPjS_Pd+0x10c>
		valid = 0;
	} else {
		samples[1] = (samples[0] + samples[1]) >> 1; // average 2 samples
    1958:	80 0f       	add	r24, r16
    195a:	91 1f       	adc	r25, r17
    195c:	9c 01       	movw	r18, r24
    195e:	35 95       	asr	r19
    1960:	27 95       	ror	r18
	}
#endif

   *y_point =1023-samples[NUMSAMPLES/2];
    1962:	8f ef       	ldi	r24, 0xFF	; 255
    1964:	93 e0       	ldi	r25, 0x03	; 3
    1966:	82 1b       	sub	r24, r18
    1968:	93 0b       	sbc	r25, r19
    196a:	fb 01       	movw	r30, r22
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
  // digitalWrite(_ym, HIGH); 
   // Hi-Z X- and Y+   
  // digitalWrite(_yp, LOW);
  // pinMode(_yp, INPUT);
   
	XPWriteDir;
    1970:	55 9a       	sbi	0x0a, 5	; 10
	XPLOW;	
    1972:	5d 98       	cbi	0x0b, 5	; 11
	YMHIGH;
    1974:	5e 9a       	sbi	0x0b, 6	; 11
	YPLOW;
    1976:	41 98       	cbi	0x08, 1	; 8
	YPReadDir;	
    1978:	39 98       	cbi	0x07, 1	; 7
    197a:	f4 e0       	ldi	r31, 0x04	; 4
    197c:	fa 95       	dec	r31
    197e:	f1 f7       	brne	.-4      	; 0x197c <_Z8getPointPjS_Pd+0x126>
	_delay_us(1);
	ADMUX=0b00000010; 		//XM	  
    1980:	82 e0       	ldi	r24, 0x02	; 2
    1982:	80 93 7c 00 	sts	0x007C, r24
    1986:	84 e0       	ldi	r24, 0x04	; 4
    1988:	8a 95       	dec	r24
    198a:	f1 f7       	brne	.-4      	; 0x1988 <_Z8getPointPjS_Pd+0x132>
	_delay_us(1);
	//ADCSRA |= (1 << ADSC);	 // start an ADC conversion
	//while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
	ADCSRA |= (1 << ADSC);	 // start an ADC conversion
    198c:	ea e7       	ldi	r30, 0x7A	; 122
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	80 64       	ori	r24, 0x40	; 64
    1994:	80 83       	st	Z, r24
	while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
    1996:	80 81       	ld	r24, Z
    1998:	86 fd       	sbrc	r24, 6
    199a:	fd cf       	rjmp	.-6      	; 0x1996 <_Z8getPointPjS_Pd+0x140>
	int z1=ADC;
    199c:	00 91 78 00 	lds	r16, 0x0078
    19a0:	10 91 79 00 	lds	r17, 0x0079
    19a4:	e4 e0       	ldi	r30, 0x04	; 4
    19a6:	ea 95       	dec	r30
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <_Z8getPointPjS_Pd+0x150>
	_delay_us(1);
	ADMUX=0b00000001; 		//YP
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	80 93 7c 00 	sts	0x007C, r24
    19b0:	f4 e0       	ldi	r31, 0x04	; 4
    19b2:	fa 95       	dec	r31
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <_Z8getPointPjS_Pd+0x15c>
	_delay_us(1);	
	//ADCSRA |= (1 << ADSC);	 // start an ADC conversion
	//while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
	ADCSRA |= (1 << ADSC);	 // start an ADC conversion
    19b6:	ea e7       	ldi	r30, 0x7A	; 122
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	80 64       	ori	r24, 0x40	; 64
    19be:	80 83       	st	Z, r24
	while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
    19c0:	80 81       	ld	r24, Z
    19c2:	86 fd       	sbrc	r24, 6
    19c4:	fd cf       	rjmp	.-6      	; 0x19c0 <_Z8getPointPjS_Pd+0x16a>
	int z2 =ADC;
    19c6:	60 91 78 00 	lds	r22, 0x0078
    19ca:	70 91 79 00 	lds	r23, 0x0079

   
     // now read the x 
     double rtouch;
     rtouch = z2;
    19ce:	88 27       	eor	r24, r24
    19d0:	77 fd       	sbrc	r23, 7
    19d2:	80 95       	com	r24
    19d4:	98 2f       	mov	r25, r24
    19d6:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    19da:	4b 01       	movw	r8, r22
    19dc:	5c 01       	movw	r10, r24
     rtouch /= z1;
    19de:	b8 01       	movw	r22, r16
    19e0:	88 27       	eor	r24, r24
    19e2:	77 fd       	sbrc	r23, 7
    19e4:	80 95       	com	r24
    19e6:	98 2f       	mov	r25, r24
    19e8:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    19ec:	9b 01       	movw	r18, r22
    19ee:	ac 01       	movw	r20, r24
    19f0:	c5 01       	movw	r24, r10
    19f2:	b4 01       	movw	r22, r8
    19f4:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
     rtouch -= 1;
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e8       	ldi	r20, 0x80	; 128
    19fe:	5f e3       	ldi	r21, 0x3F	; 63
    1a00:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    1a04:	4b 01       	movw	r8, r22
    1a06:	5c 01       	movw	r10, r24
     rtouch *= (*x_point);
    1a08:	f7 01       	movw	r30, r14
    1a0a:	60 81       	ld	r22, Z
    1a0c:	71 81       	ldd	r23, Z+1	; 0x01
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    1a16:	a5 01       	movw	r20, r10
    1a18:	94 01       	movw	r18, r8
    1a1a:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    1a1e:	6b 01       	movw	r12, r22
    1a20:	7c 01       	movw	r14, r24
     rtouch *= _rxplate;
    1a22:	60 91 84 01 	lds	r22, 0x0184
    1a26:	70 91 85 01 	lds	r23, 0x0185
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    1a32:	a7 01       	movw	r20, r14
    1a34:	96 01       	movw	r18, r12
    1a36:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
     rtouch /= 1024;
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e8       	ldi	r20, 0x80	; 128
    1a40:	5a e3       	ldi	r21, 0x3A	; 58
    1a42:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>

     *z_point = rtouch;
    1a46:	68 83       	st	Y, r22
    1a48:	79 83       	std	Y+1, r23	; 0x01
    1a4a:	8a 83       	std	Y+2, r24	; 0x02
    1a4c:	9b 83       	std	Y+3, r25	; 0x03

   if (! valid) {
     z_point = 0;
   }
//at the end of function revert pins back to original states
	DIDR0=0B00000000;
    1a4e:	10 92 7e 00 	sts	0x007E, r1
	XPHIGH;
    1a52:	5d 9a       	sbi	0x0b, 5	; 11
	XMHIGH;
    1a54:	42 9a       	sbi	0x08, 2	; 8
	YPHIGH;
    1a56:	41 9a       	sbi	0x08, 1	; 8
	YMHIGH;
    1a58:	5e 9a       	sbi	0x0b, 6	; 11
	XPWriteDir;
    1a5a:	55 9a       	sbi	0x0a, 5	; 10
	XMWriteDir;
    1a5c:	3a 9a       	sbi	0x07, 2	; 7
	YPWriteDir;
    1a5e:	39 9a       	sbi	0x07, 1	; 7
	YMWriteDir;
    1a60:	56 9a       	sbi	0x0a, 6	; 10
	// _delay_us(1);
	return;
}
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	ff 90       	pop	r15
    1a6c:	ef 90       	pop	r14
    1a6e:	df 90       	pop	r13
    1a70:	cf 90       	pop	r12
    1a72:	bf 90       	pop	r11
    1a74:	af 90       	pop	r10
    1a76:	9f 90       	pop	r9
    1a78:	8f 90       	pop	r8
    1a7a:	08 95       	ret

00001a7c <_Z10readTouchXv>:
   pinMode(_xm, OUTPUT);
   digitalWrite(_xm, LOW);
*/   

	// _delay_us(1);
	YPReadDir;
    1a7c:	39 98       	cbi	0x07, 1	; 7
	YMReadDir;
    1a7e:	56 98       	cbi	0x0a, 6	; 10
	YPLOW;  
    1a80:	41 98       	cbi	0x08, 1	; 8
	YMLOW;  
    1a82:	5e 98       	cbi	0x0b, 6	; 11
   
	XPWriteDir;
    1a84:	55 9a       	sbi	0x0a, 5	; 10
	XPHIGH;
    1a86:	5d 9a       	sbi	0x0b, 5	; 11
	XMWriteDir;	
    1a88:	3a 9a       	sbi	0x07, 2	; 7
	XMLOW;	
    1a8a:	42 98       	cbi	0x08, 2	; 8
    1a8c:	84 e0       	ldi	r24, 0x04	; 4
    1a8e:	8a 95       	dec	r24
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <_Z10readTouchXv+0x12>
	
	_delay_us(1);
    ADMUX=0b00000001; 		//YP
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	80 93 7c 00 	sts	0x007C, r24
    1a98:	84 e0       	ldi	r24, 0x04	; 4
    1a9a:	8a 95       	dec	r24
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <_Z10readTouchXv+0x1e>
	_delay_us(1);	
	//ADCSRA |= (1 << ADSC);	 // start an ADC conversion
	//while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
	ADCSRA |= (1 << ADSC);	 // start an ADC conversion
    1a9e:	ea e7       	ldi	r30, 0x7A	; 122
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	80 64       	ori	r24, 0x40	; 64
    1aa6:	80 83       	st	Z, r24
	while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
    1aa8:	80 81       	ld	r24, Z
    1aaa:	86 fd       	sbrc	r24, 6
    1aac:	fd cf       	rjmp	.-6      	; 0x1aa8 <_Z10readTouchXv+0x2c>
	return (1023-ADC);
    1aae:	20 91 78 00 	lds	r18, 0x0078
    1ab2:	30 91 79 00 	lds	r19, 0x0079
}
    1ab6:	8f ef       	ldi	r24, 0xFF	; 255
    1ab8:	93 e0       	ldi	r25, 0x03	; 3
    1aba:	82 1b       	sub	r24, r18
    1abc:	93 0b       	sbc	r25, r19
    1abe:	08 95       	ret

00001ac0 <_Z8pressurev>:
   
   return (1023-analogRead(_xm));
}
*/

uint16_t pressure(void) {
    1ac0:	cf 92       	push	r12
    1ac2:	df 92       	push	r13
    1ac4:	ef 92       	push	r14
    1ac6:	ff 92       	push	r15
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
  pinMode(_xm, INPUT);
  digitalWrite(_yp, LOW);
  pinMode(_yp, INPUT);
  */
  //_delay_us(1);
	XPWriteDir;
    1acc:	55 9a       	sbi	0x0a, 5	; 10
	XPLOW;
    1ace:	5d 98       	cbi	0x0b, 5	; 11
	YMWriteDir;	  
    1ad0:	56 9a       	sbi	0x0a, 6	; 10
	YMHIGH;
    1ad2:	5e 9a       	sbi	0x0b, 6	; 11
	
	XMLOW;
    1ad4:	42 98       	cbi	0x08, 2	; 8
	XMReadDir;
    1ad6:	3a 98       	cbi	0x07, 2	; 7
	YPLOW;
    1ad8:	41 98       	cbi	0x08, 1	; 8
	YPReadDir;
    1ada:	39 98       	cbi	0x07, 1	; 7
	
	 //write digital inputs off in used ADC pins to save power!
	DIDR0=0B00000110; //remember to write back to zeros when done!!!!
    1adc:	86 e0       	ldi	r24, 0x06	; 6
    1ade:	80 93 7e 00 	sts	0x007E, r24
    1ae2:	84 e0       	ldi	r24, 0x04	; 4
    1ae4:	8a 95       	dec	r24
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <_Z8pressurev+0x24>
	
	_delay_us(1);
    ADMUX=0b00000010; 		//XM	  
    1ae8:	82 e0       	ldi	r24, 0x02	; 2
    1aea:	80 93 7c 00 	sts	0x007C, r24
	//ADCSRA |= (1 << ADSC);	 // start an ADC conversion
	//while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
	ADCSRA |= (1 << ADSC);	 // start an ADC conversion
    1aee:	ea e7       	ldi	r30, 0x7A	; 122
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	80 64       	ori	r24, 0x40	; 64
    1af6:	80 83       	st	Z, r24
	while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
    1af8:	80 81       	ld	r24, Z
    1afa:	86 fd       	sbrc	r24, 6
    1afc:	fd cf       	rjmp	.-6      	; 0x1af8 <_Z8pressurev+0x38>
	int z1= ADC;
    1afe:	c0 91 78 00 	lds	r28, 0x0078
    1b02:	d0 91 79 00 	lds	r29, 0x0079
    1b06:	94 e0       	ldi	r25, 0x04	; 4
    1b08:	9a 95       	dec	r25
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <_Z8pressurev+0x48>
	_delay_us(1);
	ADMUX=0b00000001; 		//YP
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	80 93 7c 00 	sts	0x007C, r24
    1b12:	84 e0       	ldi	r24, 0x04	; 4
    1b14:	8a 95       	dec	r24
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <_Z8pressurev+0x54>
	_delay_us(1);	
	//ADCSRA |= (1 << ADSC);	 // start an ADC conversion
	//while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
	ADCSRA |= (1 << ADSC);	 // start an ADC conversion
    1b18:	ea e7       	ldi	r30, 0x7A	; 122
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	80 64       	ori	r24, 0x40	; 64
    1b20:	80 83       	st	Z, r24
	while(ADCSRA & _BV(ADSC));    // wait until conversion is complete
    1b22:	80 81       	ld	r24, Z
    1b24:	86 fd       	sbrc	r24, 6
    1b26:	fd cf       	rjmp	.-6      	; 0x1b22 <_Z8pressurev+0x62>
	int z2= ADC;
    1b28:	60 91 78 00 	lds	r22, 0x0078
    1b2c:	70 91 79 00 	lds	r23, 0x0079
  
  if (_rxplate != 0) {
    1b30:	80 91 84 01 	lds	r24, 0x0184
    1b34:	90 91 85 01 	lds	r25, 0x0185
    1b38:	89 2b       	or	r24, r25
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <_Z8pressurev+0x7e>
    1b3c:	4c c0       	rjmp	.+152    	; 0x1bd6 <_Z8pressurev+0x116>
    // now read the x 
    double rtouch;
    rtouch = z2;
    1b3e:	88 27       	eor	r24, r24
    1b40:	77 fd       	sbrc	r23, 7
    1b42:	80 95       	com	r24
    1b44:	98 2f       	mov	r25, r24
    1b46:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    1b4a:	6b 01       	movw	r12, r22
    1b4c:	7c 01       	movw	r14, r24
    rtouch /= z1;
    1b4e:	be 01       	movw	r22, r28
    1b50:	88 27       	eor	r24, r24
    1b52:	77 fd       	sbrc	r23, 7
    1b54:	80 95       	com	r24
    1b56:	98 2f       	mov	r25, r24
    1b58:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    1b5c:	9b 01       	movw	r18, r22
    1b5e:	ac 01       	movw	r20, r24
    1b60:	c7 01       	movw	r24, r14
    1b62:	b6 01       	movw	r22, r12
    1b64:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
    rtouch -= 1;
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e8       	ldi	r20, 0x80	; 128
    1b6e:	5f e3       	ldi	r21, 0x3F	; 63
    1b70:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    1b74:	6b 01       	movw	r12, r22
    1b76:	7c 01       	movw	r14, r24
    rtouch *= readTouchX();
    1b78:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <_Z10readTouchXv>
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	88 27       	eor	r24, r24
    1b80:	77 fd       	sbrc	r23, 7
    1b82:	80 95       	com	r24
    1b84:	98 2f       	mov	r25, r24
    1b86:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    1b8a:	a7 01       	movw	r20, r14
    1b8c:	96 01       	movw	r18, r12
    1b8e:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    1b92:	6b 01       	movw	r12, r22
    1b94:	7c 01       	movw	r14, r24
    rtouch *= _rxplate;
    1b96:	60 91 84 01 	lds	r22, 0x0184
    1b9a:	70 91 85 01 	lds	r23, 0x0185
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    1ba6:	a7 01       	movw	r20, r14
    1ba8:	96 01       	movw	r18, r12
    1baa:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    rtouch /= 1024;
    //at the end of function revert pins back to original states
	DIDR0=0B00000000;
    1bae:	10 92 7e 00 	sts	0x007E, r1
	XPHIGH;
    1bb2:	5d 9a       	sbi	0x0b, 5	; 11
	XMHIGH;
    1bb4:	42 9a       	sbi	0x08, 2	; 8
	YPHIGH;
    1bb6:	41 9a       	sbi	0x08, 1	; 8
	YMHIGH;
    1bb8:	5e 9a       	sbi	0x0b, 6	; 11
	XPWriteDir;
    1bba:	55 9a       	sbi	0x0a, 5	; 10
	XMWriteDir;
    1bbc:	3a 9a       	sbi	0x07, 2	; 7
	YPWriteDir;
    1bbe:	39 9a       	sbi	0x07, 1	; 7
	YMWriteDir;
    1bc0:	56 9a       	sbi	0x0a, 6	; 10
    rtouch = z2;
    rtouch /= z1;
    rtouch -= 1;
    rtouch *= readTouchX();
    rtouch *= _rxplate;
    rtouch /= 1024;
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e8       	ldi	r20, 0x80	; 128
    1bc8:	5a e3       	ldi	r21, 0x3A	; 58
    1bca:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
	XPWriteDir;
	XMWriteDir;
	YPWriteDir;
	YMWriteDir;
	 //_delay_us(1);
    return rtouch;
    1bce:	0e 94 c8 24 	call	0x4990	; 0x4990 <__fixunssfsi>
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <_Z8pressurev+0x134>
  } else {
	//at the end of function revert pins back to original states
	DIDR0=0B00000000;
    1bd6:	10 92 7e 00 	sts	0x007E, r1
	XPHIGH;
    1bda:	5d 9a       	sbi	0x0b, 5	; 11
	XMHIGH;
    1bdc:	42 9a       	sbi	0x08, 2	; 8
	YPHIGH;
    1bde:	41 9a       	sbi	0x08, 1	; 8
	YMHIGH;
    1be0:	5e 9a       	sbi	0x0b, 6	; 11
	XPWriteDir;
    1be2:	55 9a       	sbi	0x0a, 5	; 10
	XMWriteDir;
    1be4:	3a 9a       	sbi	0x07, 2	; 7
	YPWriteDir;
    1be6:	39 9a       	sbi	0x07, 1	; 7
	YMWriteDir;
    1be8:	56 9a       	sbi	0x0a, 6	; 10
	// _delay_us(1);
    return (1023-(z2-z1));
    1bea:	ce 01       	movw	r24, r28
    1bec:	86 1b       	sub	r24, r22
    1bee:	97 0b       	sbc	r25, r23
    1bf0:	81 50       	subi	r24, 0x01	; 1
    1bf2:	9c 4f       	sbci	r25, 0xFC	; 252
  }
}
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	ff 90       	pop	r15
    1bfa:	ef 90       	pop	r14
    1bfc:	df 90       	pop	r13
    1bfe:	cf 90       	pop	r12
    1c00:	08 95       	ret

00001c02 <_Z11TransactSPIh>:
 MAX31855_IDLE;
  return d;
}

uint8_t TransactSPI(uint8_t data){
    SPDR = data;
    1c02:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1<<SPIF)))
    1c04:	0d b4       	in	r0, 0x2d	; 45
    1c06:	07 fe       	sbrs	r0, 7
    1c08:	fd cf       	rjmp	.-6      	; 0x1c04 <_Z11TransactSPIh+0x2>
    {
    //do nothing, loop itself is a jump (2 instr. cycles?)
    }
    return SPDR;
    1c0a:	8e b5       	in	r24, 0x2e	; 46
}
    1c0c:	08 95       	ret

00001c0e <_Z20MAX31855_spireadhw32v>:
  // LSB = 0.25 degrees C
  centigrade *= 0.25;
  return centigrade;
}

uint32_t MAX31855_spireadhw32(void) { 
    1c0e:	cf 92       	push	r12
    1c10:	df 92       	push	r13
    1c12:	ef 92       	push	r14
    1c14:	ff 92       	push	r15
uint32_t d = 0;
uint8_t dummy=0x00;
uint8_t tmp=0;

	MAX31855_ACTIVE;
    1c16:	58 98       	cbi	0x0b, 0	; 11
    1c18:	24 e0       	ldi	r18, 0x04	; 4
    1c1a:	2a 95       	dec	r18
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <_Z20MAX31855_spireadhw32v+0xc>
	_delay_us(1);
    tmp = TransactSPI(dummy);
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_Z11TransactSPIh>
	d=d+tmp;
    1c24:	c8 2e       	mov	r12, r24
    1c26:	d1 2c       	mov	r13, r1
    1c28:	e1 2c       	mov	r14, r1
    1c2a:	f1 2c       	mov	r15, r1
	d<<=8;
    1c2c:	fe 2c       	mov	r15, r14
    1c2e:	ed 2c       	mov	r14, r13
    1c30:	dc 2c       	mov	r13, r12
    1c32:	cc 24       	eor	r12, r12
	tmp = TransactSPI(dummy);
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_Z11TransactSPIh>
	d=d+tmp;
    1c3a:	c8 0e       	add	r12, r24
    1c3c:	d1 1c       	adc	r13, r1
    1c3e:	e1 1c       	adc	r14, r1
    1c40:	f1 1c       	adc	r15, r1
	d<<=8;
    1c42:	fe 2c       	mov	r15, r14
    1c44:	ed 2c       	mov	r14, r13
    1c46:	dc 2c       	mov	r13, r12
    1c48:	cc 24       	eor	r12, r12
	tmp = TransactSPI(dummy);
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_Z11TransactSPIh>
	d=d+tmp;
    1c50:	c8 0e       	add	r12, r24
    1c52:	d1 1c       	adc	r13, r1
    1c54:	e1 1c       	adc	r14, r1
    1c56:	f1 1c       	adc	r15, r1
	d<<=8;
    1c58:	fe 2c       	mov	r15, r14
    1c5a:	ed 2c       	mov	r14, r13
    1c5c:	dc 2c       	mov	r13, r12
    1c5e:	cc 24       	eor	r12, r12
	tmp = TransactSPI(dummy);
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_Z11TransactSPIh>
	d=d+tmp;

 MAX31855_IDLE;
    1c66:	58 9a       	sbi	0x0b, 0	; 11
	d<<=8;
	tmp = TransactSPI(dummy);
	d=d+tmp;
	d<<=8;
	tmp = TransactSPI(dummy);
	d=d+tmp;
    1c68:	a7 01       	movw	r20, r14
    1c6a:	96 01       	movw	r18, r12
    1c6c:	28 0f       	add	r18, r24
    1c6e:	31 1d       	adc	r19, r1
    1c70:	41 1d       	adc	r20, r1
    1c72:	51 1d       	adc	r21, r1
    1c74:	ca 01       	movw	r24, r20
    1c76:	b9 01       	movw	r22, r18

 MAX31855_IDLE;
  return d;
}
    1c78:	ff 90       	pop	r15
    1c7a:	ef 90       	pop	r14
    1c7c:	df 90       	pop	r13
    1c7e:	cf 90       	pop	r12
    1c80:	08 95       	ret

00001c82 <_Z20MAX31855_readCelsiusv>:

double MAX31855_readCelsius(void) {
//MAX31855_IDLE; 
//delay_ms(1);
//spi enabled, clk/16 mode, master
	SPCR=0b01010010; //0b01010001; //now fixed with rising edge sampling
    1c82:	82 e5       	ldi	r24, 0x52	; 82
    1c84:	8c bd       	out	0x2c, r24	; 44
  uint32_t v;
  v = MAX31855_spireadhw32();
    1c86:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_Z20MAX31855_spireadhw32v>
    // uh oh, a serious problem! //bits are: short to vcc,gnd and open circuit
  //  return NAN; //or NAN
  //}
 */

  if (v & 0x80000000) { //0B1000 0000 0000 0000 0000 0000 0000 0000
    1c8a:	99 23       	and	r25, r25
    1c8c:	8c f4       	brge	.+34     	; 0x1cb0 <_Z20MAX31855_readCelsiusv+0x2e>
    // Negative value, drop the lower 18 bits and explicitly extend sign bits.
	 v = 0xFFFFC000 | ((v >> 18) & 0x00003FFFF);   //   1111 1111 1111 1111 1100 0000 0000 0000     &0B0011 1111 1111 1111 1111
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	07 2e       	mov	r0, r23
    1c94:	72 e1       	ldi	r23, 0x12	; 18
    1c96:	b6 95       	lsr	r27
    1c98:	a7 95       	ror	r26
    1c9a:	97 95       	ror	r25
    1c9c:	87 95       	ror	r24
    1c9e:	7a 95       	dec	r23
    1ca0:	d1 f7       	brne	.-12     	; 0x1c96 <_Z20MAX31855_readCelsiusv+0x14>
    1ca2:	70 2d       	mov	r23, r0
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	cd 01       	movw	r24, r26
    1ca8:	70 6c       	ori	r23, 0xC0	; 192
    1caa:	8f 6f       	ori	r24, 0xFF	; 255
    1cac:	9f 6f       	ori	r25, 0xFF	; 255
    1cae:	09 c0       	rjmp	.+18     	; 0x1cc2 <_Z20MAX31855_readCelsiusv+0x40>
  }
  else {
    // Positive value, just drop the lower 18 bits.
    v >>= 18;
    1cb0:	05 2e       	mov	r0, r21
    1cb2:	52 e1       	ldi	r21, 0x12	; 18
    1cb4:	96 95       	lsr	r25
    1cb6:	87 95       	ror	r24
    1cb8:	77 95       	ror	r23
    1cba:	67 95       	ror	r22
    1cbc:	5a 95       	dec	r21
    1cbe:	d1 f7       	brne	.-12     	; 0x1cb4 <_Z20MAX31855_readCelsiusv+0x32>
    1cc0:	50 2d       	mov	r21, r0
  }
  double centigrade = v;
    1cc2:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>

  // LSB = 0.25 degrees C
  centigrade *= 0.25;
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5e e3       	ldi	r21, 0x3E	; 62
    1cce:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
  return centigrade;
}
    1cd2:	08 95       	ret

00001cd4 <_Z14writefirsttimev>:
uint16_t EEMEM PROFILE[8][6]; //2d eeprom array




void writefirsttime(void){
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	c0 56       	subi	r28, 0x60	; 96
    1cde:	d1 09       	sbc	r29, r1
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
//cli(); //no interrupts during eeprom write
//active profile is so that you can start running that one right away.

//temp, time,temp, time, temp, time
const uint16_t PROFILEs1[8][6] = 
{110,150, 140, 80, 210,40};
    1cea:	fe 01       	movw	r30, r28
    1cec:	31 96       	adiw	r30, 0x01	; 1
    1cee:	80 e6       	ldi	r24, 0x60	; 96
    1cf0:	df 01       	movw	r26, r30
    1cf2:	1d 92       	st	X+, r1
    1cf4:	8a 95       	dec	r24
    1cf6:	e9 f7       	brne	.-6      	; 0x1cf2 <_Z14writefirsttimev+0x1e>
    1cf8:	8e e6       	ldi	r24, 0x6E	; 110
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	86 e9       	ldi	r24, 0x96	; 150
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	9c 83       	std	Y+4, r25	; 0x04
    1d06:	8b 83       	std	Y+3, r24	; 0x03
    1d08:	8c e8       	ldi	r24, 0x8C	; 140
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
    1d10:	80 e5       	ldi	r24, 0x50	; 80
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	98 87       	std	Y+8, r25	; 0x08
    1d16:	8f 83       	std	Y+7, r24	; 0x07
    1d18:	82 ed       	ldi	r24, 0xD2	; 210
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9a 87       	std	Y+10, r25	; 0x0a
    1d1e:	89 87       	std	Y+9, r24	; 0x09
    1d20:	88 e2       	ldi	r24, 0x28	; 40
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9c 87       	std	Y+12, r25	; 0x0c
    1d26:	8b 87       	std	Y+11, r24	; 0x0b
    1d28:	84 e6       	ldi	r24, 0x64	; 100
    1d2a:	90 e0       	ldi	r25, 0x00	; 0

int justtobesure=0;
//write eeprom at start
		while(1){
			justtobesure++;
			if(eeprom_is_ready()==1) {
    1d2c:	f9 99       	sbic	0x1f, 1	; 31
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <_Z14writefirsttimev+0x7a>
				eeprom_write_block((const void*)&PROFILEs1,(void*)&PROFILE[0][0],12); //write 12 bytes( first profile)
    1d30:	4c e0       	ldi	r20, 0x0C	; 12
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	70 e0       	ldi	r23, 0x00	; 0
    1d38:	ce 01       	movw	r24, r28
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	0e 94 4d 28 	call	0x509a	; 0x509a <__eewr_block_m328p>
				eeprom_write_word(&ACTIVE_PROFILE, 0);
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	80 e6       	ldi	r24, 0x60	; 96
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	0e 94 65 28 	call	0x50ca	; 0x50ca <__eewr_word_m328p>
				break;
    1d4c:	03 c0       	rjmp	.+6      	; 0x1d54 <_Z14writefirsttimev+0x80>
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
			}
			if (justtobesure>=100){
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	61 f7       	brne	.-40     	; 0x1d2c <_Z14writefirsttimev+0x58>
				break;
			}
		}

}
    1d54:	c0 5a       	subi	r28, 0xA0	; 160
    1d56:	df 4f       	sbci	r29, 0xFF	; 255
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	08 95       	ret

00001d68 <_Z11READ_EEPROMv>:
return;
}

//this reads eeprom from active profile
void READ_EEPROM(){
activated_profile = eeprom_read_word(&ACTIVE_PROFILE);
    1d68:	80 e6       	ldi	r24, 0x60	; 96
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	0e 94 47 28 	call	0x508e	; 0x508e <__eerd_word_m328p>
    1d70:	90 93 83 01 	sts	0x0183, r25
    1d74:	80 93 82 01 	sts	0x0182, r24
prof.PreHeatTemp = eeprom_read_word(&PROFILE[activated_profile][0]);
    1d78:	80 91 82 01 	lds	r24, 0x0182
    1d7c:	90 91 83 01 	lds	r25, 0x0183
    1d80:	9c 01       	movw	r18, r24
    1d82:	22 0f       	add	r18, r18
    1d84:	33 1f       	adc	r19, r19
    1d86:	82 0f       	add	r24, r18
    1d88:	93 1f       	adc	r25, r19
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	80 50       	subi	r24, 0x00	; 0
    1d94:	90 40       	sbci	r25, 0x00	; 0
    1d96:	0e 94 47 28 	call	0x508e	; 0x508e <__eerd_word_m328p>
    1d9a:	90 93 77 01 	sts	0x0177, r25
    1d9e:	80 93 76 01 	sts	0x0176, r24
prof.PreHeatTime = eeprom_read_word(&PROFILE[activated_profile][1]);
    1da2:	80 91 82 01 	lds	r24, 0x0182
    1da6:	90 91 83 01 	lds	r25, 0x0183
    1daa:	9c 01       	movw	r18, r24
    1dac:	22 0f       	add	r18, r18
    1dae:	33 1f       	adc	r19, r19
    1db0:	82 0f       	add	r24, r18
    1db2:	93 1f       	adc	r25, r19
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	8e 5f       	subi	r24, 0xFE	; 254
    1dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc0:	0e 94 47 28 	call	0x508e	; 0x508e <__eerd_word_m328p>
    1dc4:	90 93 79 01 	sts	0x0179, r25
    1dc8:	80 93 78 01 	sts	0x0178, r24
prof.SoakHeatTemp = eeprom_read_word(&PROFILE[activated_profile][2]);
    1dcc:	80 91 82 01 	lds	r24, 0x0182
    1dd0:	90 91 83 01 	lds	r25, 0x0183
    1dd4:	9c 01       	movw	r18, r24
    1dd6:	22 0f       	add	r18, r18
    1dd8:	33 1f       	adc	r19, r19
    1dda:	82 0f       	add	r24, r18
    1ddc:	93 1f       	adc	r25, r19
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	8c 5f       	subi	r24, 0xFC	; 252
    1de8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dea:	0e 94 47 28 	call	0x508e	; 0x508e <__eerd_word_m328p>
    1dee:	90 93 7b 01 	sts	0x017B, r25
    1df2:	80 93 7a 01 	sts	0x017A, r24
prof.SoakHeatTime = eeprom_read_word(&PROFILE[activated_profile][3]);
    1df6:	80 91 82 01 	lds	r24, 0x0182
    1dfa:	90 91 83 01 	lds	r25, 0x0183
    1dfe:	9c 01       	movw	r18, r24
    1e00:	22 0f       	add	r18, r18
    1e02:	33 1f       	adc	r19, r19
    1e04:	82 0f       	add	r24, r18
    1e06:	93 1f       	adc	r25, r19
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	8a 5f       	subi	r24, 0xFA	; 250
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	0e 94 47 28 	call	0x508e	; 0x508e <__eerd_word_m328p>
    1e18:	90 93 7d 01 	sts	0x017D, r25
    1e1c:	80 93 7c 01 	sts	0x017C, r24
prof.PeakHeatTemp = eeprom_read_word(&PROFILE[activated_profile][4]);
    1e20:	80 91 82 01 	lds	r24, 0x0182
    1e24:	90 91 83 01 	lds	r25, 0x0183
    1e28:	9c 01       	movw	r18, r24
    1e2a:	22 0f       	add	r18, r18
    1e2c:	33 1f       	adc	r19, r19
    1e2e:	82 0f       	add	r24, r18
    1e30:	93 1f       	adc	r25, r19
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	88 5f       	subi	r24, 0xF8	; 248
    1e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3e:	0e 94 47 28 	call	0x508e	; 0x508e <__eerd_word_m328p>
    1e42:	90 93 7f 01 	sts	0x017F, r25
    1e46:	80 93 7e 01 	sts	0x017E, r24
prof.PeakHeatTime = eeprom_read_word(&PROFILE[activated_profile][5]);
    1e4a:	80 91 82 01 	lds	r24, 0x0182
    1e4e:	90 91 83 01 	lds	r25, 0x0183
    1e52:	9c 01       	movw	r18, r24
    1e54:	22 0f       	add	r18, r18
    1e56:	33 1f       	adc	r19, r19
    1e58:	82 0f       	add	r24, r18
    1e5a:	93 1f       	adc	r25, r19
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	86 5f       	subi	r24, 0xF6	; 246
    1e66:	9f 4f       	sbci	r25, 0xFF	; 255
    1e68:	0e 94 47 28 	call	0x508e	; 0x508e <__eerd_word_m328p>
    1e6c:	90 93 81 01 	sts	0x0181, r25
    1e70:	80 93 80 01 	sts	0x0180, r24
    1e74:	08 95       	ret

00001e76 <_Z7heat_upRjS_S_RbS0_>:
return;
}

//slow heat up 
void heat_up(uint16_t& temp,uint16_t& time, uint16_t& timers_help,bool& cancel,bool& res ){
    1e76:	2f 92       	push	r2
    1e78:	3f 92       	push	r3
    1e7a:	4f 92       	push	r4
    1e7c:	5f 92       	push	r5
    1e7e:	6f 92       	push	r6
    1e80:	7f 92       	push	r7
    1e82:	8f 92       	push	r8
    1e84:	9f 92       	push	r9
    1e86:	af 92       	push	r10
    1e88:	bf 92       	push	r11
    1e8a:	cf 92       	push	r12
    1e8c:	df 92       	push	r13
    1e8e:	ef 92       	push	r14
    1e90:	ff 92       	push	r15
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	e6 97       	sbiw	r28, 0x36	; 54
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	6c 01       	movw	r12, r24
    1eac:	7c 8b       	std	Y+20, r23	; 0x14
    1eae:	6b 8b       	std	Y+19, r22	; 0x13
    1eb0:	5e 8b       	std	Y+22, r21	; 0x16
    1eb2:	4d 8b       	std	Y+21, r20	; 0x15
    1eb4:	29 01       	movw	r4, r18
    1eb6:	18 01       	movw	r2, r16

	double slope_yx =0;
	uint16_t tmp_time=0;
	int16_t duty=ICR1;
    1eb8:	20 91 86 00 	lds	r18, 0x0086
    1ebc:	30 91 87 00 	lds	r19, 0x0087
    1ec0:	38 8f       	std	Y+24, r19	; 0x18
    1ec2:	2f 8b       	std	Y+23, r18	; 0x17
	
	int16_t draw_temp=0;
	int16_t draw_time=0;
	
	char duty1[10];
	char xx[8]="Heating";
    1ec4:	88 e0       	ldi	r24, 0x08	; 8
    1ec6:	e3 e1       	ldi	r30, 0x13	; 19
    1ec8:	f1 e0       	ldi	r31, 0x01	; 1
    1eca:	de 01       	movw	r26, r28
    1ecc:	1b 96       	adiw	r26, 0x0b	; 11
    1ece:	01 90       	ld	r0, Z+
    1ed0:	0d 92       	st	X+, r0
    1ed2:	8a 95       	dec	r24
    1ed4:	e1 f7       	brne	.-8      	; 0x1ece <_Z7heat_upRjS_S_RbS0_+0x58>
	drawString( 200,0,xx, WHITE, GREEN, 2);	
    1ed6:	68 94       	set
    1ed8:	ee 24       	eor	r14, r14
    1eda:	e1 f8       	bld	r14, 1
    1edc:	00 ee       	ldi	r16, 0xE0	; 224
    1ede:	17 e0       	ldi	r17, 0x07	; 7
    1ee0:	2f ef       	ldi	r18, 0xFF	; 255
    1ee2:	3f ef       	ldi	r19, 0xFF	; 255
    1ee4:	ae 01       	movw	r20, r28
    1ee6:	45 5f       	subi	r20, 0xF5	; 245
    1ee8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	88 ec       	ldi	r24, 0xC8	; 200
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
	
	//OCR1A=0;
	//delay_ms(131);
	tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    1ef6:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    1efa:	4b 01       	movw	r8, r22
    1efc:	5c 01       	movw	r10, r24
	if (tmp > 1000 || tmp < 0){
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a e7       	ldi	r20, 0x7A	; 122
    1f04:	54 e4       	ldi	r21, 0x44	; 68
    1f06:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    1f0a:	18 16       	cp	r1, r24
    1f0c:	4c f0       	brlt	.+18     	; 0x1f20 <_Z7heat_upRjS_S_RbS0_+0xaa>
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	a9 01       	movw	r20, r18
    1f14:	c5 01       	movw	r24, r10
    1f16:	b4 01       	movw	r22, r8
    1f18:	0e 94 57 24 	call	0x48ae	; 0x48ae <__cmpsf2>
    1f1c:	88 23       	and	r24, r24
    1f1e:	24 f4       	brge	.+8      	; 0x1f28 <_Z7heat_upRjS_S_RbS0_+0xb2>
		tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    1f20:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    1f24:	4b 01       	movw	r8, r22
    1f26:	5c 01       	movw	r10, r24
	}
	tmp+=duty/20; //add 5% of duty cycle to value to get it about right
    1f28:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2c:	64 e1       	ldi	r22, 0x14	; 20
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__divmodhi4>
    1f34:	88 27       	eor	r24, r24
    1f36:	77 fd       	sbrc	r23, 7
    1f38:	80 95       	com	r24
    1f3a:	98 2f       	mov	r25, r24
    1f3c:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    1f40:	a5 01       	movw	r20, r10
    1f42:	94 01       	movw	r18, r8
    1f44:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    1f48:	0f 2e       	mov	r0, r31
    1f4a:	fa ec       	ldi	r31, 0xCA	; 202
    1f4c:	ef 2e       	mov	r14, r31
    1f4e:	f1 e0       	ldi	r31, 0x01	; 1
    1f50:	ff 2e       	mov	r15, r31
    1f52:	f0 2d       	mov	r31, r0
    1f54:	0f 2e       	mov	r0, r31
    1f56:	fe ee       	ldi	r31, 0xEE	; 238
    1f58:	6f 2e       	mov	r6, r31
    1f5a:	f1 e0       	ldi	r31, 0x01	; 1
    1f5c:	7f 2e       	mov	r7, r31
    1f5e:	f0 2d       	mov	r31, r0
    1f60:	f7 01       	movw	r30, r14
	//delay_ms(5);
	
	//fill
	for (uint8_t iii=0; iii < memory-1;iii++){
		mean_I_err[iii]=0;
    1f62:	11 92       	st	Z+, r1
    1f64:	11 92       	st	Z+, r1
    1f66:	11 92       	st	Z+, r1
    1f68:	11 92       	st	Z+, r1
	}
	tmp+=duty/20; //add 5% of duty cycle to value to get it about right
	//delay_ms(5);
	
	//fill
	for (uint8_t iii=0; iii < memory-1;iii++){
    1f6a:	e6 15       	cp	r30, r6
    1f6c:	f7 05       	cpc	r31, r7
    1f6e:	c9 f7       	brne	.-14     	; 0x1f62 <_Z7heat_upRjS_S_RbS0_+0xec>
	//char xxyx4[10];
		
	//for (int i=0;i< memory;i++){
	//	last_tempsval[i]=(uint16_t)round(tmp);
	//}
	uint16_t tmpstart=(uint16_t)round(tmp);
    1f70:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    1f74:	0e 94 c8 24 	call	0x4990	; 0x4990 <__fixunssfsi>
    1f78:	8b 01       	movw	r16, r22
	//uint16_t last_temps[4]={(uint16_t)round(tmp),(uint16_t)round(tmp),(uint16_t)round(tmp),(uint16_t)round(tmp)}; //fill with current temp
	slope_yx = (double) (temp-tmpstart)/time; //this is the degrees / second we want to achieve
    1f7a:	d6 01       	movw	r26, r12
    1f7c:	2d 91       	ld	r18, X+
    1f7e:	3c 91       	ld	r19, X
    1f80:	f9 01       	movw	r30, r18
    1f82:	e6 1b       	sub	r30, r22
    1f84:	f7 0b       	sbc	r31, r23
    1f86:	bf 01       	movw	r22, r30
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    1f90:	4b 01       	movw	r8, r22
    1f92:	5c 01       	movw	r10, r24
    1f94:	ab 89       	ldd	r26, Y+19	; 0x13
    1f96:	bc 89       	ldd	r27, Y+20	; 0x14
    1f98:	6d 91       	ld	r22, X+
    1f9a:	7c 91       	ld	r23, X
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    1fa4:	9b 01       	movw	r18, r22
    1fa6:	ac 01       	movw	r20, r24
    1fa8:	c5 01       	movw	r24, r10
    1faa:	b4 01       	movw	r22, r8
    1fac:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
    1fb0:	69 a7       	std	Y+41, r22	; 0x29
    1fb2:	7a a7       	std	Y+42, r23	; 0x2a
    1fb4:	8b a7       	std	Y+43, r24	; 0x2b
    1fb6:	9c a7       	std	Y+44, r25	; 0x2c
	//cancel =0;
	
	//profile times and added 30seconds for cooling whole 320 pixels for time
	double req_time=(double)320/(prof.PreHeatTime+prof.SoakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+30); 
    1fb8:	80 91 80 01 	lds	r24, 0x0180
    1fbc:	90 91 81 01 	lds	r25, 0x0181
    1fc0:	60 91 78 01 	lds	r22, 0x0178
    1fc4:	70 91 79 01 	lds	r23, 0x0179
    1fc8:	20 91 7c 01 	lds	r18, 0x017C
    1fcc:	30 91 7d 01 	lds	r19, 0x017D
    1fd0:	62 0f       	add	r22, r18
    1fd2:	73 1f       	adc	r23, r19
    1fd4:	62 5e       	subi	r22, 0xE2	; 226
    1fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd8:	68 0f       	add	r22, r24
    1fda:	79 1f       	adc	r23, r25
    1fdc:	68 0f       	add	r22, r24
    1fde:	79 1f       	adc	r23, r25
    1fe0:	68 0f       	add	r22, r24
    1fe2:	79 1f       	adc	r23, r25
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    1fec:	9b 01       	movw	r18, r22
    1fee:	ac 01       	movw	r20, r24
    1ff0:	60 e0       	ldi	r22, 0x00	; 0
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	80 ea       	ldi	r24, 0xA0	; 160
    1ff6:	93 e4       	ldi	r25, 0x43	; 67
    1ff8:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
    1ffc:	69 a3       	std	Y+33, r22	; 0x21
    1ffe:	7a a3       	std	Y+34, r23	; 0x22
    2000:	8b a3       	std	Y+35, r24	; 0x23
    2002:	9c a3       	std	Y+36, r25	; 0x24
	double req_temp=(double)220/(prof.PeakHeatTemp+35); //that's what we should need from display 220 pixels for temp
    2004:	60 91 7e 01 	lds	r22, 0x017E
    2008:	70 91 7f 01 	lds	r23, 0x017F
    200c:	6d 5d       	subi	r22, 0xDD	; 221
    200e:	7f 4f       	sbci	r23, 0xFF	; 255
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    2018:	9b 01       	movw	r18, r22
    201a:	ac 01       	movw	r20, r24
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	8c e5       	ldi	r24, 0x5C	; 92
    2022:	93 e4       	ldi	r25, 0x43	; 67
    2024:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
    2028:	4b 01       	movw	r8, r22
    202a:	5c 01       	movw	r10, r24
			
			
			if(timers_help >= 1 ) {			
				
				err_old=err;
				err=slope_yx*timers_help+tmpstart-tmp;
    202c:	98 01       	movw	r18, r16
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	2d a7       	std	Y+45, r18	; 0x2d
    2034:	3e a7       	std	Y+46, r19	; 0x2e
    2036:	4f a7       	std	Y+47, r20	; 0x2f
    2038:	58 ab       	std	Y+48, r21	; 0x30
				P_err=err;
				
				mean_I_err[memory-1]=err_old;
    203a:	ef a2       	std	Y+39, r14	; 0x27
    203c:	f8 a6       	std	Y+40, r15	; 0x28
    203e:	8a ec       	ldi	r24, 0xCA	; 202
    2040:	91 e0       	ldi	r25, 0x01	; 1
    2042:	ac 01       	movw	r20, r24
    2044:	48 5d       	subi	r20, 0xD8	; 216
    2046:	5f 4f       	sbci	r21, 0xFF	; 255
    2048:	5a ab       	std	Y+50, r21	; 0x32
    204a:	49 ab       	std	Y+49, r20	; 0x31
    204c:	89 8e       	std	Y+25, r8	; 0x19
    204e:	9a 8e       	std	Y+26, r9	; 0x1a
    2050:	ab 8e       	std	Y+27, r10	; 0x1b
    2052:	bc 8e       	std	Y+28, r11	; 0x1c
    2054:	7e a2       	std	Y+38, r7	; 0x26
    2056:	6d a2       	std	Y+37, r6	; 0x25
    2058:	51 01       	movw	r10, r2
    205a:	12 01       	movw	r2, r4
	
	//profile times and added 30seconds for cooling whole 320 pixels for time
	double req_time=(double)320/(prof.PreHeatTime+prof.SoakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+30); 
	double req_temp=(double)220/(prof.PeakHeatTemp+35); //that's what we should need from display 220 pixels for temp
	
	while(timers_help < time){
    205c:	ba c1       	rjmp	.+884    	; 0x23d2 <_Z7heat_upRjS_S_RbS0_+0x55c>
    205e:	f1 01       	movw	r30, r2
    2060:	d8 01       	movw	r26, r16
	
		if( cancel == 1){
    2062:	80 81       	ld	r24, Z
    2064:	88 23       	and	r24, r24
    2066:	29 f0       	breq	.+10     	; 0x2072 <_Z7heat_upRjS_S_RbS0_+0x1fc>
		OCR1A=0;			
    2068:	10 92 89 00 	sts	0x0089, r1
    206c:	10 92 88 00 	sts	0x0088, r1
		//drawString( 100, 30, "yes", BLACK, BLUE, 2); //x and y are inverted
		return;
    2070:	d8 c1       	rjmp	.+944    	; 0x2422 <_Z7heat_upRjS_S_RbS0_+0x5ac>
		}
		//PWM is in 16-bit counter, max value is 100, OCR1A houses the uint16_t duty cycle value
		if (res){
    2072:	8c 91       	ld	r24, X
    2074:	88 23       	and	r24, r24
    2076:	a9 f3       	breq	.-22     	; 0x2062 <_Z7heat_upRjS_S_RbS0_+0x1ec>
    2078:	1f 01       	movw	r2, r30
    207a:	8d 01       	movw	r16, r26
			res =0;
    207c:	1c 92       	st	X, r1
			//OCR1A=0;
			//delay_ms(131);			
			
			//delay_ms(5);
			//OCR1A=duty;
			tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    207e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    2082:	6b 01       	movw	r12, r22
    2084:	7c 01       	movw	r14, r24
			if (tmp > 1000 || tmp < 0){
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	4a e7       	ldi	r20, 0x7A	; 122
    208c:	54 e4       	ldi	r21, 0x44	; 68
    208e:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    2092:	18 16       	cp	r1, r24
    2094:	4c f0       	brlt	.+18     	; 0x20a8 <_Z7heat_upRjS_S_RbS0_+0x232>
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	a9 01       	movw	r20, r18
    209c:	c7 01       	movw	r24, r14
    209e:	b6 01       	movw	r22, r12
    20a0:	0e 94 57 24 	call	0x48ae	; 0x48ae <__cmpsf2>
    20a4:	88 23       	and	r24, r24
    20a6:	24 f4       	brge	.+8      	; 0x20b0 <_Z7heat_upRjS_S_RbS0_+0x23a>
				tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    20a8:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    20ac:	6b 01       	movw	r12, r22
    20ae:	7c 01       	movw	r14, r24
			}
			tmp+=duty/20; //add 5% of duty cycle to value to get it about right
    20b0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20b2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    20b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20b6:	98 a1       	ldd	r25, Y+32	; 0x20
    20b8:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    20bc:	a7 01       	movw	r20, r14
    20be:	96 01       	movw	r18, r12
    20c0:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    20c4:	6b ab       	std	Y+51, r22	; 0x33
    20c6:	7c ab       	std	Y+52, r23	; 0x34
    20c8:	8d ab       	std	Y+53, r24	; 0x35
    20ca:	9e ab       	std	Y+54, r25	; 0x36
			
			draw_temp=round(tmp*req_temp);	
    20cc:	a3 01       	movw	r20, r6
    20ce:	92 01       	movw	r18, r4
    20d0:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    20d4:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    20d8:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    20dc:	4b 01       	movw	r8, r22
    20de:	5c 01       	movw	r10, r24
			draw_time=round(timers_help*req_time);
    20e0:	ad 89       	ldd	r26, Y+21	; 0x15
    20e2:	be 89       	ldd	r27, Y+22	; 0x16
    20e4:	6d 91       	ld	r22, X+
    20e6:	7c 91       	ld	r23, X
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    20f0:	29 a1       	ldd	r18, Y+33	; 0x21
    20f2:	3a a1       	ldd	r19, Y+34	; 0x22
    20f4:	4b a1       	ldd	r20, Y+35	; 0x23
    20f6:	5c a1       	ldd	r21, Y+36	; 0x24
    20f8:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    20fc:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    2100:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    2104:	6b 01       	movw	r12, r22
    2106:	7c 01       	movw	r14, r24
			drawPixel(draw_time, 240-draw_temp,color_real); //x,y
    2108:	60 ef       	ldi	r22, 0xF0	; 240
    210a:	70 e0       	ldi	r23, 0x00	; 0
    210c:	68 19       	sub	r22, r8
    210e:	79 09       	sbc	r23, r9
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	58 ef       	ldi	r21, 0xF8	; 248
    2114:	c6 01       	movw	r24, r12
    2116:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
			drawPixel(draw_time, 240-draw_temp+1,color_real); //x,y
    211a:	61 ef       	ldi	r22, 0xF1	; 241
    211c:	70 e0       	ldi	r23, 0x00	; 0
    211e:	68 19       	sub	r22, r8
    2120:	79 09       	sbc	r23, r9
    2122:	40 e0       	ldi	r20, 0x00	; 0
    2124:	58 ef       	ldi	r21, 0xF8	; 248
    2126:	c6 01       	movw	r24, r12
    2128:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
			
			
			if(timers_help >= 1 ) {			
    212c:	ed 89       	ldd	r30, Y+21	; 0x15
    212e:	fe 89       	ldd	r31, Y+22	; 0x16
    2130:	80 81       	ld	r24, Z
    2132:	91 81       	ldd	r25, Z+1	; 0x01
    2134:	89 2b       	or	r24, r25
    2136:	09 f4       	brne	.+2      	; 0x213a <_Z7heat_upRjS_S_RbS0_+0x2c4>
    2138:	60 c1       	rjmp	.+704    	; 0x23fa <_Z7heat_upRjS_S_RbS0_+0x584>
    213a:	58 01       	movw	r10, r16
				
				err_old=err;
    213c:	40 90 04 02 	lds	r4, 0x0204
    2140:	50 90 05 02 	lds	r5, 0x0205
    2144:	60 90 06 02 	lds	r6, 0x0206
    2148:	70 90 07 02 	lds	r7, 0x0207
    214c:	40 92 00 02 	sts	0x0200, r4
    2150:	50 92 01 02 	sts	0x0201, r5
    2154:	60 92 02 02 	sts	0x0202, r6
    2158:	70 92 03 02 	sts	0x0203, r7
				err=slope_yx*timers_help+tmpstart-tmp;
    215c:	60 81       	ld	r22, Z
    215e:	71 81       	ldd	r23, Z+1	; 0x01
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    2168:	29 a5       	ldd	r18, Y+41	; 0x29
    216a:	3a a5       	ldd	r19, Y+42	; 0x2a
    216c:	4b a5       	ldd	r20, Y+43	; 0x2b
    216e:	5c a5       	ldd	r21, Y+44	; 0x2c
    2170:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    2174:	6b 01       	movw	r12, r22
    2176:	7c 01       	movw	r14, r24
    2178:	6d a5       	ldd	r22, Y+45	; 0x2d
    217a:	7e a5       	ldd	r23, Y+46	; 0x2e
    217c:	8f a5       	ldd	r24, Y+47	; 0x2f
    217e:	98 a9       	ldd	r25, Y+48	; 0x30
    2180:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    2184:	9b 01       	movw	r18, r22
    2186:	ac 01       	movw	r20, r24
    2188:	c7 01       	movw	r24, r14
    218a:	b6 01       	movw	r22, r12
    218c:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    2190:	2b a9       	ldd	r18, Y+51	; 0x33
    2192:	3c a9       	ldd	r19, Y+52	; 0x34
    2194:	4d a9       	ldd	r20, Y+53	; 0x35
    2196:	5e a9       	ldd	r21, Y+54	; 0x36
    2198:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    219c:	6b 01       	movw	r12, r22
    219e:	7c 01       	movw	r14, r24
    21a0:	60 93 04 02 	sts	0x0204, r22
    21a4:	70 93 05 02 	sts	0x0205, r23
    21a8:	80 93 06 02 	sts	0x0206, r24
    21ac:	90 93 07 02 	sts	0x0207, r25
				P_err=err;
    21b0:	60 93 f8 01 	sts	0x01F8, r22
    21b4:	70 93 f9 01 	sts	0x01F9, r23
    21b8:	80 93 fa 01 	sts	0x01FA, r24
    21bc:	90 93 fb 01 	sts	0x01FB, r25
				
				mean_I_err[memory-1]=err_old;
    21c0:	ae ee       	ldi	r26, 0xEE	; 238
    21c2:	b1 e0       	ldi	r27, 0x01	; 1
    21c4:	4d 92       	st	X+, r4
    21c6:	5d 92       	st	X+, r5
    21c8:	6d 92       	st	X+, r6
    21ca:	7c 92       	st	X, r7
    21cc:	13 97       	sbiw	r26, 0x03	; 3
    21ce:	ef a1       	ldd	r30, Y+39	; 0x27
    21d0:	f8 a5       	ldd	r31, Y+40	; 0x28
				for (int i=0;i< memory-1;i++){
					mean_I_err[i]=(double)mean_I_err[i+1];
    21d2:	84 81       	ldd	r24, Z+4	; 0x04
    21d4:	95 81       	ldd	r25, Z+5	; 0x05
    21d6:	a6 81       	ldd	r26, Z+6	; 0x06
    21d8:	b7 81       	ldd	r27, Z+7	; 0x07
    21da:	81 93       	st	Z+, r24
    21dc:	91 93       	st	Z+, r25
    21de:	a1 93       	st	Z+, r26
    21e0:	b1 93       	st	Z+, r27
				err_old=err;
				err=slope_yx*timers_help+tmpstart-tmp;
				P_err=err;
				
				mean_I_err[memory-1]=err_old;
				for (int i=0;i< memory-1;i++){
    21e2:	2d a1       	ldd	r18, Y+37	; 0x25
    21e4:	3e a1       	ldd	r19, Y+38	; 0x26
    21e6:	e2 17       	cp	r30, r18
    21e8:	f3 07       	cpc	r31, r19
    21ea:	99 f7       	brne	.-26     	; 0x21d2 <_Z7heat_upRjS_S_RbS0_+0x35c>
    21ec:	0f a1       	ldd	r16, Y+39	; 0x27
    21ee:	18 a5       	ldd	r17, Y+40	; 0x28
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	a0 e0       	ldi	r26, 0x00	; 0
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	e0 e0       	ldi	r30, 0x00	; 0
    21f8:	cd 8e       	std	Y+29, r12	; 0x1d
    21fa:	de 8e       	std	Y+30, r13	; 0x1e
    21fc:	ef 8e       	std	Y+31, r14	; 0x1f
    21fe:	f8 a2       	std	Y+32, r15	; 0x20
    2200:	45 01       	movw	r8, r10
    2202:	e9 a8       	ldd	r14, Y+49	; 0x31
    2204:	fa a8       	ldd	r15, Y+50	; 0x32
    2206:	df 2e       	mov	r13, r31
    2208:	ce 2e       	mov	r12, r30
					mean_I_err[i]=(double)mean_I_err[i+1];
				}
				mean_I_error=0;
				for (int i=0;i< memory;i++){
					mean_I_error+=(double)mean_I_err[i];
    220a:	f8 01       	movw	r30, r16
    220c:	61 91       	ld	r22, Z+
    220e:	71 91       	ld	r23, Z+
    2210:	81 91       	ld	r24, Z+
    2212:	91 91       	ld	r25, Z+
    2214:	8f 01       	movw	r16, r30
    2216:	2b 2f       	mov	r18, r27
    2218:	3a 2f       	mov	r19, r26
    221a:	4d 2d       	mov	r20, r13
    221c:	5c 2d       	mov	r21, r12
    221e:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
				mean_I_err[memory-1]=err_old;
				for (int i=0;i< memory-1;i++){
					mean_I_err[i]=(double)mean_I_err[i+1];
				}
				mean_I_error=0;
				for (int i=0;i< memory;i++){
    2222:	0e 15       	cp	r16, r14
    2224:	1f 05       	cpc	r17, r15
    2226:	29 f0       	breq	.+10     	; 0x2232 <_Z7heat_upRjS_S_RbS0_+0x3bc>
					mean_I_error+=(double)mean_I_err[i];
    2228:	b6 2f       	mov	r27, r22
    222a:	a7 2f       	mov	r26, r23
    222c:	d8 2e       	mov	r13, r24
    222e:	c9 2e       	mov	r12, r25
    2230:	ec cf       	rjmp	.-40     	; 0x220a <_Z7heat_upRjS_S_RbS0_+0x394>
    2232:	cd 8c       	ldd	r12, Y+29	; 0x1d
    2234:	de 8c       	ldd	r13, Y+30	; 0x1e
    2236:	ef 8c       	ldd	r14, Y+31	; 0x1f
    2238:	f8 a0       	ldd	r15, Y+32	; 0x20
    223a:	54 01       	movw	r10, r8
    223c:	16 2f       	mov	r17, r22
    223e:	07 2f       	mov	r16, r23
    2240:	88 2e       	mov	r8, r24
    2242:	99 2e       	mov	r9, r25
    2244:	86 2f       	mov	r24, r22
    2246:	90 2f       	mov	r25, r16
    2248:	a8 2d       	mov	r26, r8
    224a:	b9 2d       	mov	r27, r9
    224c:	80 93 f2 01 	sts	0x01F2, r24
    2250:	90 93 f3 01 	sts	0x01F3, r25
    2254:	a0 93 f4 01 	sts	0x01F4, r26
    2258:	b0 93 f5 01 	sts	0x01F5, r27
				}				
				I_err=mean_I_error;
    225c:	80 93 fc 01 	sts	0x01FC, r24
    2260:	90 93 fd 01 	sts	0x01FD, r25
    2264:	a0 93 fe 01 	sts	0x01FE, r26
    2268:	b0 93 ff 01 	sts	0x01FF, r27
				//I_err+=err_old
				D_err=err-err_old;				
    226c:	a3 01       	movw	r20, r6
    226e:	92 01       	movw	r18, r4
    2270:	c7 01       	movw	r24, r14
    2272:	b6 01       	movw	r22, r12
    2274:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    2278:	2b 01       	movw	r4, r22
    227a:	3c 01       	movw	r6, r24
    227c:	60 93 08 02 	sts	0x0208, r22
    2280:	70 93 09 02 	sts	0x0209, r23
    2284:	80 93 0a 02 	sts	0x020A, r24
    2288:	90 93 0b 02 	sts	0x020B, r25
				
				if(err > error_rate || err < -error_rate){
    228c:	20 91 09 01 	lds	r18, 0x0109
    2290:	30 91 0a 01 	lds	r19, 0x010A
    2294:	40 91 0b 01 	lds	r20, 0x010B
    2298:	50 91 0c 01 	lds	r21, 0x010C
    229c:	2d 8f       	std	Y+29, r18	; 0x1d
    229e:	3e 8f       	std	Y+30, r19	; 0x1e
    22a0:	4f 8f       	std	Y+31, r20	; 0x1f
    22a2:	58 a3       	std	Y+32, r21	; 0x20
    22a4:	c7 01       	movw	r24, r14
    22a6:	b6 01       	movw	r22, r12
    22a8:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    22ac:	18 16       	cp	r1, r24
    22ae:	5c f0       	brlt	.+22     	; 0x22c6 <_Z7heat_upRjS_S_RbS0_+0x450>
    22b0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    22b2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    22b4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    22b6:	58 a1       	ldd	r21, Y+32	; 0x20
    22b8:	50 58       	subi	r21, 0x80	; 128
    22ba:	c7 01       	movw	r24, r14
    22bc:	b6 01       	movw	r22, r12
    22be:	0e 94 57 24 	call	0x48ae	; 0x48ae <__cmpsf2>
    22c2:	88 23       	and	r24, r24
    22c4:	c4 f5       	brge	.+112    	; 0x2336 <_Z7heat_upRjS_S_RbS0_+0x4c0>
					PID=P_val*P_err + I_val*I_err + D_val*D_err;
    22c6:	a7 01       	movw	r20, r14
    22c8:	96 01       	movw	r18, r12
    22ca:	c7 01       	movw	r24, r14
    22cc:	b6 01       	movw	r22, r12
    22ce:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    22d2:	6b 01       	movw	r12, r22
    22d4:	7c 01       	movw	r14, r24
    22d6:	2d ec       	ldi	r18, 0xCD	; 205
    22d8:	3c ec       	ldi	r19, 0xCC	; 204
    22da:	4c e4       	ldi	r20, 0x4C	; 76
    22dc:	5f e3       	ldi	r21, 0x3F	; 63
    22de:	61 2f       	mov	r22, r17
    22e0:	70 2f       	mov	r23, r16
    22e2:	88 2d       	mov	r24, r8
    22e4:	99 2d       	mov	r25, r9
    22e6:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    22ea:	9b 01       	movw	r18, r22
    22ec:	ac 01       	movw	r20, r24
    22ee:	c7 01       	movw	r24, r14
    22f0:	b6 01       	movw	r22, r12
    22f2:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    22f6:	6b 01       	movw	r12, r22
    22f8:	7c 01       	movw	r14, r24
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	c3 01       	movw	r24, r6
    2304:	b2 01       	movw	r22, r4
    2306:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    230a:	9b 01       	movw	r18, r22
    230c:	ac 01       	movw	r20, r24
    230e:	c7 01       	movw	r24, r14
    2310:	b6 01       	movw	r22, r12
    2312:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    2316:	60 93 0c 02 	sts	0x020C, r22
    231a:	70 93 0d 02 	sts	0x020D, r23
    231e:	80 93 0e 02 	sts	0x020E, r24
    2322:	90 93 0f 02 	sts	0x020F, r25
					duty11=round(PID);	
    2326:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    232a:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    232e:	70 93 f7 01 	sts	0x01F7, r23
    2332:	60 93 f6 01 	sts	0x01F6, r22
				//ftoa(I_err,xxyx3,5);
				//drawString( 100,40,xxyx3, BLACK, WHITE, 2);
				//ftoa(D_err,xxyx4,5);
				//drawString( 100,60,xxyx4, BLACK, WHITE, 2);
				
				if (duty11 > 0){
    2336:	80 91 f6 01 	lds	r24, 0x01F6
    233a:	90 91 f7 01 	lds	r25, 0x01F7
    233e:	18 16       	cp	r1, r24
    2340:	19 06       	cpc	r1, r25
    2342:	2c f0       	brlt	.+10     	; 0x234e <_Z7heat_upRjS_S_RbS0_+0x4d8>
					duty=duty11;
				} 
				else if (duty11 < 0){
    2344:	99 23       	and	r25, r25
    2346:	0c f4       	brge	.+2      	; 0x234a <_Z7heat_upRjS_S_RbS0_+0x4d4>
    2348:	65 c0       	rjmp	.+202    	; 0x2414 <_Z7heat_upRjS_S_RbS0_+0x59e>
    234a:	8f 89       	ldd	r24, Y+23	; 0x17
    234c:	98 8d       	ldd	r25, Y+24	; 0x18
					duty=0;
				} 				
				if ( duty > ICR1 ){
    234e:	a6 e8       	ldi	r26, 0x86	; 134
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	2d 91       	ld	r18, X+
    2354:	3c 91       	ld	r19, X
    2356:	11 97       	sbiw	r26, 0x01	; 1
    2358:	28 17       	cp	r18, r24
    235a:	39 07       	cpc	r19, r25
    235c:	28 f4       	brcc	.+10     	; 0x2368 <_Z7heat_upRjS_S_RbS0_+0x4f2>
					duty = ICR1;
    235e:	ed 91       	ld	r30, X+
    2360:	fc 91       	ld	r31, X
    2362:	f8 8f       	std	Y+24, r31	; 0x18
    2364:	ef 8b       	std	Y+23, r30	; 0x17
    2366:	02 c0       	rjmp	.+4      	; 0x236c <_Z7heat_upRjS_S_RbS0_+0x4f6>
    2368:	98 8f       	std	Y+24, r25	; 0x18
    236a:	8f 8b       	std	Y+23, r24	; 0x17
				}		
				OCR1A=duty;
    236c:	ef 89       	ldd	r30, Y+23	; 0x17
    236e:	f8 8d       	ldd	r31, Y+24	; 0x18
    2370:	a8 e8       	ldi	r26, 0x88	; 136
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	11 96       	adiw	r26, 0x01	; 1
    2376:	fc 93       	st	X, r31
    2378:	ee 93       	st	-X, r30
				
				intToStr(duty, duty1 ,3);				
    237a:	43 e0       	ldi	r20, 0x03	; 3
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	be 01       	movw	r22, r28
    2380:	6f 5f       	subi	r22, 0xFF	; 255
    2382:	7f 4f       	sbci	r23, 0xFF	; 255
    2384:	8f 89       	ldd	r24, Y+23	; 0x17
    2386:	98 8d       	ldd	r25, Y+24	; 0x18
    2388:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
				drawString( 70, 232, cycle112, BLACK, YELLOW, 1); //x and y are inverted
    238c:	ee 24       	eor	r14, r14
    238e:	e3 94       	inc	r14
    2390:	00 ee       	ldi	r16, 0xE0	; 224
    2392:	1f ef       	ldi	r17, 0xFF	; 255
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	42 e0       	ldi	r20, 0x02	; 2
    239a:	51 e0       	ldi	r21, 0x01	; 1
    239c:	68 ee       	ldi	r22, 0xE8	; 232
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	86 e4       	ldi	r24, 0x46	; 70
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
				drawString( 100, 232, duty1, BLACK, YELLOW, 1); //x and y are inverted
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	ae 01       	movw	r20, r28
    23ae:	4f 5f       	subi	r20, 0xFF	; 255
    23b0:	5f 4f       	sbci	r21, 0xFF	; 255
    23b2:	68 ee       	ldi	r22, 0xE8	; 232
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	84 e6       	ldi	r24, 0x64	; 100
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
				drawString( 118, 232, percentmark, BLACK, YELLOW, 1); //x and y are inverted
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	51 e0       	ldi	r21, 0x01	; 1
    23c6:	68 ee       	ldi	r22, 0xE8	; 232
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	86 e7       	ldi	r24, 0x76	; 118
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
			//OCR1A=duty;
			tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
			if (tmp > 1000 || tmp < 0){
				tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
			}
			tmp+=duty/20; //add 5% of duty cycle to value to get it about right
    23d2:	8f 89       	ldd	r24, Y+23	; 0x17
    23d4:	98 8d       	ldd	r25, Y+24	; 0x18
    23d6:	64 e1       	ldi	r22, 0x14	; 20
    23d8:	70 e0       	ldi	r23, 0x00	; 0
    23da:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__divmodhi4>
    23de:	9b 01       	movw	r18, r22
    23e0:	44 27       	eor	r20, r20
    23e2:	37 fd       	sbrc	r19, 7
    23e4:	40 95       	com	r20
    23e6:	54 2f       	mov	r21, r20
    23e8:	2d 8f       	std	Y+29, r18	; 0x1d
    23ea:	3e 8f       	std	Y+30, r19	; 0x1e
    23ec:	4f 8f       	std	Y+31, r20	; 0x1f
    23ee:	58 a3       	std	Y+32, r21	; 0x20
    23f0:	49 8c       	ldd	r4, Y+25	; 0x19
    23f2:	5a 8c       	ldd	r5, Y+26	; 0x1a
    23f4:	6b 8c       	ldd	r6, Y+27	; 0x1b
    23f6:	7c 8c       	ldd	r7, Y+28	; 0x1c
    23f8:	85 01       	movw	r16, r10
	
	//profile times and added 30seconds for cooling whole 320 pixels for time
	double req_time=(double)320/(prof.PreHeatTime+prof.SoakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+30); 
	double req_temp=(double)220/(prof.PeakHeatTemp+35); //that's what we should need from display 220 pixels for temp
	
	while(timers_help < time){
    23fa:	ad 89       	ldd	r26, Y+21	; 0x15
    23fc:	be 89       	ldd	r27, Y+22	; 0x16
    23fe:	2d 91       	ld	r18, X+
    2400:	3c 91       	ld	r19, X
    2402:	eb 89       	ldd	r30, Y+19	; 0x13
    2404:	fc 89       	ldd	r31, Y+20	; 0x14
    2406:	80 81       	ld	r24, Z
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	28 17       	cp	r18, r24
    240c:	39 07       	cpc	r19, r25
    240e:	08 f4       	brcc	.+2      	; 0x2412 <_Z7heat_upRjS_S_RbS0_+0x59c>
    2410:	26 ce       	rjmp	.-948    	; 0x205e <_Z7heat_upRjS_S_RbS0_+0x1e8>
    2412:	07 c0       	rjmp	.+14     	; 0x2422 <_Z7heat_upRjS_S_RbS0_+0x5ac>
					duty=duty11;
				} 
				else if (duty11 < 0){
					duty=0;
				} 				
				if ( duty > ICR1 ){
    2414:	a6 e8       	ldi	r26, 0x86	; 134
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	8d 91       	ld	r24, X+
    241a:	9c 91       	ld	r25, X
				
				if (duty11 > 0){
					duty=duty11;
				} 
				else if (duty11 < 0){
					duty=0;
    241c:	1f 8a       	std	Y+23, r1	; 0x17
    241e:	18 8e       	std	Y+24, r1	; 0x18
    2420:	a5 cf       	rjmp	.-182    	; 0x236c <_Z7heat_upRjS_S_RbS0_+0x4f6>
					
			}
		}
	}
return;
}
    2422:	e6 96       	adiw	r28, 0x36	; 54
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	de bf       	out	0x3e, r29	; 62
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	1f 91       	pop	r17
    2434:	0f 91       	pop	r16
    2436:	ff 90       	pop	r15
    2438:	ef 90       	pop	r14
    243a:	df 90       	pop	r13
    243c:	cf 90       	pop	r12
    243e:	bf 90       	pop	r11
    2440:	af 90       	pop	r10
    2442:	9f 90       	pop	r9
    2444:	8f 90       	pop	r8
    2446:	7f 90       	pop	r7
    2448:	6f 90       	pop	r6
    244a:	5f 90       	pop	r5
    244c:	4f 90       	pop	r4
    244e:	3f 90       	pop	r3
    2450:	2f 90       	pop	r2
    2452:	08 95       	ret

00002454 <_Z7soak_upRjS_S_RbS0_>:

void soak_up(uint16_t& temp,uint16_t& time, uint16_t& timers_help,bool& cancel,bool& res ){
    2454:	2f 92       	push	r2
    2456:	3f 92       	push	r3
    2458:	4f 92       	push	r4
    245a:	5f 92       	push	r5
    245c:	6f 92       	push	r6
    245e:	7f 92       	push	r7
    2460:	8f 92       	push	r8
    2462:	9f 92       	push	r9
    2464:	af 92       	push	r10
    2466:	bf 92       	push	r11
    2468:	cf 92       	push	r12
    246a:	df 92       	push	r13
    246c:	ef 92       	push	r14
    246e:	ff 92       	push	r15
    2470:	0f 93       	push	r16
    2472:	1f 93       	push	r17
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	ac 97       	sbiw	r28, 0x2c	; 44
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	6c 01       	movw	r12, r24
    248a:	7c 8b       	std	Y+20, r23	; 0x14
    248c:	6b 8b       	std	Y+19, r22	; 0x13
    248e:	5e 8b       	std	Y+22, r21	; 0x16
    2490:	4d 8b       	std	Y+21, r20	; 0x15
    2492:	19 01       	movw	r2, r18
    2494:	38 01       	movw	r6, r16
	
double slope_yx =0;
	uint16_t tmp_time=0;
	int16_t duty=OCR1A;
    2496:	80 91 88 00 	lds	r24, 0x0088
    249a:	90 91 89 00 	lds	r25, 0x0089
    249e:	98 8f       	std	Y+24, r25	; 0x18
    24a0:	8f 8b       	std	Y+23, r24	; 0x17
	int16_t draw_temp=0;
	int16_t draw_time=0;
			
	//char xx[10];
	char duty1[10];
	char xx[8]="Soaking";
    24a2:	88 e0       	ldi	r24, 0x08	; 8
    24a4:	eb e1       	ldi	r30, 0x1B	; 27
    24a6:	f1 e0       	ldi	r31, 0x01	; 1
    24a8:	de 01       	movw	r26, r28
    24aa:	1b 96       	adiw	r26, 0x0b	; 11
    24ac:	01 90       	ld	r0, Z+
    24ae:	0d 92       	st	X+, r0
    24b0:	8a 95       	dec	r24
    24b2:	e1 f7       	brne	.-8      	; 0x24ac <_Z7soak_upRjS_S_RbS0_+0x58>
	drawString( 200,0,xx, WHITE, GREEN, 2);
    24b4:	68 94       	set
    24b6:	ee 24       	eor	r14, r14
    24b8:	e1 f8       	bld	r14, 1
    24ba:	00 ee       	ldi	r16, 0xE0	; 224
    24bc:	17 e0       	ldi	r17, 0x07	; 7
    24be:	2f ef       	ldi	r18, 0xFF	; 255
    24c0:	3f ef       	ldi	r19, 0xFF	; 255
    24c2:	ae 01       	movw	r20, r28
    24c4:	45 5f       	subi	r20, 0xF5	; 245
    24c6:	5f 4f       	sbci	r21, 0xFF	; 255
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	88 ec       	ldi	r24, 0xC8	; 200
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
	
	//OCR1A=0;
	//delay_ms(131);
	tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    24d4:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    24d8:	4b 01       	movw	r8, r22
    24da:	5c 01       	movw	r10, r24
	if (tmp > 1000 || tmp < 0){
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	4a e7       	ldi	r20, 0x7A	; 122
    24e2:	54 e4       	ldi	r21, 0x44	; 68
    24e4:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	4c f0       	brlt	.+18     	; 0x24fe <_Z7soak_upRjS_S_RbS0_+0xaa>
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	a9 01       	movw	r20, r18
    24f2:	c5 01       	movw	r24, r10
    24f4:	b4 01       	movw	r22, r8
    24f6:	0e 94 57 24 	call	0x48ae	; 0x48ae <__cmpsf2>
    24fa:	88 23       	and	r24, r24
    24fc:	14 f4       	brge	.+4      	; 0x2502 <_Z7soak_upRjS_S_RbS0_+0xae>
		tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    24fe:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
	//delay_ms(5);
	//OCR1A=duty;

	//tmp+=round(duty/12);
	//uint16_t last_temps[4]={(uint16_t)round(tmp),(uint16_t)round(tmp),(uint16_t)round(tmp),(uint16_t)round(tmp)}; //fill with current temp
	slope_yx =(double) (temp-prof.PreHeatTemp)/time; //this is the degrees / second we want to achieve
    2502:	d6 01       	movw	r26, r12
    2504:	6d 91       	ld	r22, X+
    2506:	7c 91       	ld	r23, X
    2508:	80 91 76 01 	lds	r24, 0x0176
    250c:	90 91 77 01 	lds	r25, 0x0177
    2510:	68 1b       	sub	r22, r24
    2512:	79 0b       	sbc	r23, r25
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    251c:	6b 01       	movw	r12, r22
    251e:	7c 01       	movw	r14, r24
    2520:	eb 89       	ldd	r30, Y+19	; 0x13
    2522:	fc 89       	ldd	r31, Y+20	; 0x14
    2524:	60 81       	ld	r22, Z
    2526:	71 81       	ldd	r23, Z+1	; 0x01
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    2530:	9b 01       	movw	r18, r22
    2532:	ac 01       	movw	r20, r24
    2534:	c7 01       	movw	r24, r14
    2536:	b6 01       	movw	r22, r12
    2538:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
    253c:	6d a3       	std	Y+37, r22	; 0x25
    253e:	7e a3       	std	Y+38, r23	; 0x26
    2540:	8f a3       	std	Y+39, r24	; 0x27
    2542:	98 a7       	std	Y+40, r25	; 0x28
	//cancel =0;
	
	//profile times and added 30seconds for cooling whole 320 pixels for time
	double req_time=(double)320/(prof.PreHeatTime+prof.SoakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+30); 
    2544:	80 91 80 01 	lds	r24, 0x0180
    2548:	90 91 81 01 	lds	r25, 0x0181
    254c:	60 91 78 01 	lds	r22, 0x0178
    2550:	70 91 79 01 	lds	r23, 0x0179
    2554:	20 91 7c 01 	lds	r18, 0x017C
    2558:	30 91 7d 01 	lds	r19, 0x017D
    255c:	62 0f       	add	r22, r18
    255e:	73 1f       	adc	r23, r19
    2560:	62 5e       	subi	r22, 0xE2	; 226
    2562:	7f 4f       	sbci	r23, 0xFF	; 255
    2564:	68 0f       	add	r22, r24
    2566:	79 1f       	adc	r23, r25
    2568:	68 0f       	add	r22, r24
    256a:	79 1f       	adc	r23, r25
    256c:	68 0f       	add	r22, r24
    256e:	79 1f       	adc	r23, r25
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    2578:	9b 01       	movw	r18, r22
    257a:	ac 01       	movw	r20, r24
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	80 ea       	ldi	r24, 0xA0	; 160
    2582:	93 e4       	ldi	r25, 0x43	; 67
    2584:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
    2588:	69 a3       	std	Y+33, r22	; 0x21
    258a:	7a a3       	std	Y+34, r23	; 0x22
    258c:	8b a3       	std	Y+35, r24	; 0x23
    258e:	9c a3       	std	Y+36, r25	; 0x24
	double req_temp=(double)220/(prof.PeakHeatTemp+35); //that's what we should need from display 220 pixels for temp
    2590:	60 91 7e 01 	lds	r22, 0x017E
    2594:	70 91 7f 01 	lds	r23, 0x017F
    2598:	6d 5d       	subi	r22, 0xDD	; 221
    259a:	7f 4f       	sbci	r23, 0xFF	; 255
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    25a4:	9b 01       	movw	r18, r22
    25a6:	ac 01       	movw	r20, r24
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	70 e0       	ldi	r23, 0x00	; 0
    25ac:	8c e5       	ldi	r24, 0x5C	; 92
    25ae:	93 e4       	ldi	r25, 0x43	; 67
    25b0:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
    25b4:	69 8f       	std	Y+25, r22	; 0x19
    25b6:	7a 8f       	std	Y+26, r23	; 0x1a
    25b8:	8b 8f       	std	Y+27, r24	; 0x1b
    25ba:	9c 8f       	std	Y+28, r25	; 0x1c
    25bc:	53 01       	movw	r10, r6
	
	while(timers_help < time){
    25be:	b8 c1       	rjmp	.+880    	; 0x2930 <_Z7soak_upRjS_S_RbS0_+0x4dc>
    25c0:	f1 01       	movw	r30, r2
    25c2:	d8 01       	movw	r26, r16
	
		if( cancel == 1){
    25c4:	80 81       	ld	r24, Z
    25c6:	88 23       	and	r24, r24
    25c8:	29 f0       	breq	.+10     	; 0x25d4 <_Z7soak_upRjS_S_RbS0_+0x180>
		OCR1A=0;			
    25ca:	10 92 89 00 	sts	0x0089, r1
    25ce:	10 92 88 00 	sts	0x0088, r1
		//drawString( 100, 30, "yes", BLACK, BLUE, 2); //x and y are inverted
		return;
    25d2:	d6 c1       	rjmp	.+940    	; 0x2980 <_Z7soak_upRjS_S_RbS0_+0x52c>
		}
		
		//PWM is in 16-bit counter, max value is 100, OCR1A houses the uint16_t duty cycle value
		if (res){
    25d4:	8c 91       	ld	r24, X
    25d6:	88 23       	and	r24, r24
    25d8:	a9 f3       	breq	.-22     	; 0x25c4 <_Z7soak_upRjS_S_RbS0_+0x170>
    25da:	1f 01       	movw	r2, r30
    25dc:	8d 01       	movw	r16, r26
			res =0;
    25de:	1c 92       	st	X, r1
			tmp_time++;
			//OCR1A=0;
			//delay_ms(131);
			tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    25e0:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    25e4:	6b 01       	movw	r12, r22
    25e6:	7c 01       	movw	r14, r24
			if (tmp > 1000 || tmp < 0){
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a e7       	ldi	r20, 0x7A	; 122
    25ee:	54 e4       	ldi	r21, 0x44	; 68
    25f0:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    25f4:	18 16       	cp	r1, r24
    25f6:	4c f0       	brlt	.+18     	; 0x260a <_Z7soak_upRjS_S_RbS0_+0x1b6>
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	a9 01       	movw	r20, r18
    25fe:	c7 01       	movw	r24, r14
    2600:	b6 01       	movw	r22, r12
    2602:	0e 94 57 24 	call	0x48ae	; 0x48ae <__cmpsf2>
    2606:	88 23       	and	r24, r24
    2608:	24 f4       	brge	.+8      	; 0x2612 <_Z7soak_upRjS_S_RbS0_+0x1be>
				tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    260a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    260e:	6b 01       	movw	r12, r22
    2610:	7c 01       	movw	r14, r24
			}
			tmp+=duty/20; //add 5% of duty cycle to value to get it about right
    2612:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2614:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2616:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2618:	98 a1       	ldd	r25, Y+32	; 0x20
    261a:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    261e:	a7 01       	movw	r20, r14
    2620:	96 01       	movw	r18, r12
    2622:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    2626:	69 a7       	std	Y+41, r22	; 0x29
    2628:	7a a7       	std	Y+42, r23	; 0x2a
    262a:	8b a7       	std	Y+43, r24	; 0x2b
    262c:	9c a7       	std	Y+44, r25	; 0x2c
			//delay_ms(5);
			//OCR1A=duty;
			//tmp+=duty/20; //add 10% of duty cycle to value to get it about right
			draw_temp=round(tmp*req_temp);	
    262e:	a3 01       	movw	r20, r6
    2630:	92 01       	movw	r18, r4
    2632:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    2636:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    263a:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    263e:	4b 01       	movw	r8, r22
    2640:	5c 01       	movw	r10, r24
			draw_time=round((timers_help+prof.PreHeatTime)*req_time);
    2642:	ad 89       	ldd	r26, Y+21	; 0x15
    2644:	be 89       	ldd	r27, Y+22	; 0x16
    2646:	6d 91       	ld	r22, X+
    2648:	7c 91       	ld	r23, X
    264a:	e8 e7       	ldi	r30, 0x78	; 120
    264c:	f1 e0       	ldi	r31, 0x01	; 1
    264e:	80 81       	ld	r24, Z
    2650:	91 81       	ldd	r25, Z+1	; 0x01
    2652:	68 0f       	add	r22, r24
    2654:	79 1f       	adc	r23, r25
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    265e:	29 a1       	ldd	r18, Y+33	; 0x21
    2660:	3a a1       	ldd	r19, Y+34	; 0x22
    2662:	4b a1       	ldd	r20, Y+35	; 0x23
    2664:	5c a1       	ldd	r21, Y+36	; 0x24
    2666:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    266a:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    266e:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    2672:	6b 01       	movw	r12, r22
    2674:	7c 01       	movw	r14, r24
			drawPixel(draw_time, 240-draw_temp,color_real); //x,y
    2676:	60 ef       	ldi	r22, 0xF0	; 240
    2678:	70 e0       	ldi	r23, 0x00	; 0
    267a:	68 19       	sub	r22, r8
    267c:	79 09       	sbc	r23, r9
    267e:	40 e0       	ldi	r20, 0x00	; 0
    2680:	58 ef       	ldi	r21, 0xF8	; 248
    2682:	c6 01       	movw	r24, r12
    2684:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
			drawPixel(draw_time, 240-draw_temp+1,color_real); //x,y
    2688:	61 ef       	ldi	r22, 0xF1	; 241
    268a:	70 e0       	ldi	r23, 0x00	; 0
    268c:	68 19       	sub	r22, r8
    268e:	79 09       	sbc	r23, r9
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	58 ef       	ldi	r21, 0xF8	; 248
    2694:	c6 01       	movw	r24, r12
    2696:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
					
			if (timers_help >= 1 ) {
    269a:	ad 89       	ldd	r26, Y+21	; 0x15
    269c:	be 89       	ldd	r27, Y+22	; 0x16
    269e:	8d 91       	ld	r24, X+
    26a0:	9c 91       	ld	r25, X
    26a2:	11 97       	sbiw	r26, 0x01	; 1
    26a4:	89 2b       	or	r24, r25
    26a6:	09 f4       	brne	.+2      	; 0x26aa <_Z7soak_upRjS_S_RbS0_+0x256>
    26a8:	57 c1       	rjmp	.+686    	; 0x2958 <_Z7soak_upRjS_S_RbS0_+0x504>
    26aa:	58 01       	movw	r10, r16
				
				err_old=err;
    26ac:	40 90 04 02 	lds	r4, 0x0204
    26b0:	50 90 05 02 	lds	r5, 0x0205
    26b4:	60 90 06 02 	lds	r6, 0x0206
    26b8:	70 90 07 02 	lds	r7, 0x0207
    26bc:	40 92 00 02 	sts	0x0200, r4
    26c0:	50 92 01 02 	sts	0x0201, r5
    26c4:	60 92 02 02 	sts	0x0202, r6
    26c8:	70 92 03 02 	sts	0x0203, r7
				err=slope_yx*timers_help+prof.PreHeatTemp-tmp;
    26cc:	6d 91       	ld	r22, X+
    26ce:	7c 91       	ld	r23, X
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    26d8:	2d a1       	ldd	r18, Y+37	; 0x25
    26da:	3e a1       	ldd	r19, Y+38	; 0x26
    26dc:	4f a1       	ldd	r20, Y+39	; 0x27
    26de:	58 a5       	ldd	r21, Y+40	; 0x28
    26e0:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    26e4:	6b 01       	movw	r12, r22
    26e6:	7c 01       	movw	r14, r24
    26e8:	e6 e7       	ldi	r30, 0x76	; 118
    26ea:	f1 e0       	ldi	r31, 0x01	; 1
    26ec:	60 81       	ld	r22, Z
    26ee:	71 81       	ldd	r23, Z+1	; 0x01
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    26f8:	9b 01       	movw	r18, r22
    26fa:	ac 01       	movw	r20, r24
    26fc:	c7 01       	movw	r24, r14
    26fe:	b6 01       	movw	r22, r12
    2700:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    2704:	29 a5       	ldd	r18, Y+41	; 0x29
    2706:	3a a5       	ldd	r19, Y+42	; 0x2a
    2708:	4b a5       	ldd	r20, Y+43	; 0x2b
    270a:	5c a5       	ldd	r21, Y+44	; 0x2c
    270c:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    2710:	6b 01       	movw	r12, r22
    2712:	7c 01       	movw	r14, r24
    2714:	60 93 04 02 	sts	0x0204, r22
    2718:	70 93 05 02 	sts	0x0205, r23
    271c:	80 93 06 02 	sts	0x0206, r24
    2720:	90 93 07 02 	sts	0x0207, r25
				P_err=err;
    2724:	60 93 f8 01 	sts	0x01F8, r22
    2728:	70 93 f9 01 	sts	0x01F9, r23
    272c:	80 93 fa 01 	sts	0x01FA, r24
    2730:	90 93 fb 01 	sts	0x01FB, r25
				
				mean_I_err[memory-1]=err_old;
    2734:	ae ee       	ldi	r26, 0xEE	; 238
    2736:	b1 e0       	ldi	r27, 0x01	; 1
    2738:	4d 92       	st	X+, r4
    273a:	5d 92       	st	X+, r5
    273c:	6d 92       	st	X+, r6
    273e:	7c 92       	st	X, r7
    2740:	13 97       	sbiw	r26, 0x03	; 3
    2742:	ea ec       	ldi	r30, 0xCA	; 202
    2744:	f1 e0       	ldi	r31, 0x01	; 1
				for (int i=0;i< memory-1;i++){
					mean_I_err[i]=(double)mean_I_err[i+1];
    2746:	84 81       	ldd	r24, Z+4	; 0x04
    2748:	95 81       	ldd	r25, Z+5	; 0x05
    274a:	a6 81       	ldd	r26, Z+6	; 0x06
    274c:	b7 81       	ldd	r27, Z+7	; 0x07
    274e:	81 93       	st	Z+, r24
    2750:	91 93       	st	Z+, r25
    2752:	a1 93       	st	Z+, r26
    2754:	b1 93       	st	Z+, r27
				err_old=err;
				err=slope_yx*timers_help+prof.PreHeatTemp-tmp;
				P_err=err;
				
				mean_I_err[memory-1]=err_old;
				for (int i=0;i< memory-1;i++){
    2756:	b1 e0       	ldi	r27, 0x01	; 1
    2758:	ee 3e       	cpi	r30, 0xEE	; 238
    275a:	fb 07       	cpc	r31, r27
    275c:	a1 f7       	brne	.-24     	; 0x2746 <_Z7soak_upRjS_S_RbS0_+0x2f2>
    275e:	0a ec       	ldi	r16, 0xCA	; 202
    2760:	11 e0       	ldi	r17, 0x01	; 1
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	a0 e0       	ldi	r26, 0x00	; 0
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	e0 e0       	ldi	r30, 0x00	; 0
    276a:	9f 2e       	mov	r9, r31
    276c:	8e 2e       	mov	r8, r30
					mean_I_err[i]=(double)mean_I_err[i+1];
				}
				mean_I_error=0;
				for (int i=0;i< memory;i++){
					mean_I_error+=(double)mean_I_err[i];
    276e:	f8 01       	movw	r30, r16
    2770:	61 91       	ld	r22, Z+
    2772:	71 91       	ld	r23, Z+
    2774:	81 91       	ld	r24, Z+
    2776:	91 91       	ld	r25, Z+
    2778:	8f 01       	movw	r16, r30
    277a:	2b 2f       	mov	r18, r27
    277c:	3a 2f       	mov	r19, r26
    277e:	49 2d       	mov	r20, r9
    2780:	58 2d       	mov	r21, r8
    2782:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
				mean_I_err[memory-1]=err_old;
				for (int i=0;i< memory-1;i++){
					mean_I_err[i]=(double)mean_I_err[i+1];
				}
				mean_I_error=0;
				for (int i=0;i< memory;i++){
    2786:	f1 e0       	ldi	r31, 0x01	; 1
    2788:	02 3f       	cpi	r16, 0xF2	; 242
    278a:	1f 07       	cpc	r17, r31
    278c:	29 f0       	breq	.+10     	; 0x2798 <_Z7soak_upRjS_S_RbS0_+0x344>
					mean_I_error+=(double)mean_I_err[i];
    278e:	b6 2f       	mov	r27, r22
    2790:	a7 2f       	mov	r26, r23
    2792:	98 2e       	mov	r9, r24
    2794:	89 2e       	mov	r8, r25
    2796:	eb cf       	rjmp	.-42     	; 0x276e <_Z7soak_upRjS_S_RbS0_+0x31a>
    2798:	16 2f       	mov	r17, r22
    279a:	07 2f       	mov	r16, r23
    279c:	88 2e       	mov	r8, r24
    279e:	99 2e       	mov	r9, r25
    27a0:	86 2f       	mov	r24, r22
    27a2:	90 2f       	mov	r25, r16
    27a4:	a8 2d       	mov	r26, r8
    27a6:	b9 2d       	mov	r27, r9
    27a8:	80 93 f2 01 	sts	0x01F2, r24
    27ac:	90 93 f3 01 	sts	0x01F3, r25
    27b0:	a0 93 f4 01 	sts	0x01F4, r26
    27b4:	b0 93 f5 01 	sts	0x01F5, r27
				}				
				I_err=mean_I_error;
    27b8:	80 93 fc 01 	sts	0x01FC, r24
    27bc:	90 93 fd 01 	sts	0x01FD, r25
    27c0:	a0 93 fe 01 	sts	0x01FE, r26
    27c4:	b0 93 ff 01 	sts	0x01FF, r27
				//I_err+=err_old
				D_err=err-err_old;				
    27c8:	a3 01       	movw	r20, r6
    27ca:	92 01       	movw	r18, r4
    27cc:	c7 01       	movw	r24, r14
    27ce:	b6 01       	movw	r22, r12
    27d0:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    27d4:	2b 01       	movw	r4, r22
    27d6:	3c 01       	movw	r6, r24
    27d8:	60 93 08 02 	sts	0x0208, r22
    27dc:	70 93 09 02 	sts	0x0209, r23
    27e0:	80 93 0a 02 	sts	0x020A, r24
    27e4:	90 93 0b 02 	sts	0x020B, r25
				
				if(err > error_rate || err < -error_rate){
    27e8:	80 91 09 01 	lds	r24, 0x0109
    27ec:	90 91 0a 01 	lds	r25, 0x010A
    27f0:	a0 91 0b 01 	lds	r26, 0x010B
    27f4:	b0 91 0c 01 	lds	r27, 0x010C
    27f8:	8d 8f       	std	Y+29, r24	; 0x1d
    27fa:	9e 8f       	std	Y+30, r25	; 0x1e
    27fc:	af 8f       	std	Y+31, r26	; 0x1f
    27fe:	b8 a3       	std	Y+32, r27	; 0x20
    2800:	9c 01       	movw	r18, r24
    2802:	ad 01       	movw	r20, r26
    2804:	c7 01       	movw	r24, r14
    2806:	b6 01       	movw	r22, r12
    2808:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    280c:	18 16       	cp	r1, r24
    280e:	5c f0       	brlt	.+22     	; 0x2826 <_Z7soak_upRjS_S_RbS0_+0x3d2>
    2810:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2812:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2814:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2816:	58 a1       	ldd	r21, Y+32	; 0x20
    2818:	50 58       	subi	r21, 0x80	; 128
    281a:	c7 01       	movw	r24, r14
    281c:	b6 01       	movw	r22, r12
    281e:	0e 94 57 24 	call	0x48ae	; 0x48ae <__cmpsf2>
    2822:	88 23       	and	r24, r24
    2824:	c4 f5       	brge	.+112    	; 0x2896 <_Z7soak_upRjS_S_RbS0_+0x442>
					PID=P_val*P_err + I_val*I_err + D_val*D_err;
    2826:	a7 01       	movw	r20, r14
    2828:	96 01       	movw	r18, r12
    282a:	c7 01       	movw	r24, r14
    282c:	b6 01       	movw	r22, r12
    282e:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    2832:	6b 01       	movw	r12, r22
    2834:	7c 01       	movw	r14, r24
    2836:	2d ec       	ldi	r18, 0xCD	; 205
    2838:	3c ec       	ldi	r19, 0xCC	; 204
    283a:	4c e4       	ldi	r20, 0x4C	; 76
    283c:	5f e3       	ldi	r21, 0x3F	; 63
    283e:	61 2f       	mov	r22, r17
    2840:	70 2f       	mov	r23, r16
    2842:	88 2d       	mov	r24, r8
    2844:	99 2d       	mov	r25, r9
    2846:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    284a:	9b 01       	movw	r18, r22
    284c:	ac 01       	movw	r20, r24
    284e:	c7 01       	movw	r24, r14
    2850:	b6 01       	movw	r22, r12
    2852:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    2856:	6b 01       	movw	r12, r22
    2858:	7c 01       	movw	r14, r24
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e0       	ldi	r20, 0x00	; 0
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	c3 01       	movw	r24, r6
    2864:	b2 01       	movw	r22, r4
    2866:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    286a:	9b 01       	movw	r18, r22
    286c:	ac 01       	movw	r20, r24
    286e:	c7 01       	movw	r24, r14
    2870:	b6 01       	movw	r22, r12
    2872:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    2876:	60 93 0c 02 	sts	0x020C, r22
    287a:	70 93 0d 02 	sts	0x020D, r23
    287e:	80 93 0e 02 	sts	0x020E, r24
    2882:	90 93 0f 02 	sts	0x020F, r25
					duty11=round(PID);	
    2886:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    288a:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    288e:	70 93 f7 01 	sts	0x01F7, r23
    2892:	60 93 f6 01 	sts	0x01F6, r22
				//ftoa(I_err,xxyx3,5);
				//drawString( 100,40,xxyx3, BLACK, WHITE, 2);
				//ftoa(D_err,xxyx4,5);
				//drawString( 100,60,xxyx4, BLACK, WHITE, 2);
				
				if (duty11 > 0){
    2896:	80 91 f6 01 	lds	r24, 0x01F6
    289a:	90 91 f7 01 	lds	r25, 0x01F7
    289e:	18 16       	cp	r1, r24
    28a0:	19 06       	cpc	r1, r25
    28a2:	2c f0       	brlt	.+10     	; 0x28ae <_Z7soak_upRjS_S_RbS0_+0x45a>
					duty=duty11;
				} 
				else if (duty11 < 0){
    28a4:	99 23       	and	r25, r25
    28a6:	0c f4       	brge	.+2      	; 0x28aa <_Z7soak_upRjS_S_RbS0_+0x456>
    28a8:	64 c0       	rjmp	.+200    	; 0x2972 <_Z7soak_upRjS_S_RbS0_+0x51e>
    28aa:	8f 89       	ldd	r24, Y+23	; 0x17
    28ac:	98 8d       	ldd	r25, Y+24	; 0x18
					duty=0;
				} 				
				if ( duty > ICR1 ){
    28ae:	a6 e8       	ldi	r26, 0x86	; 134
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	2d 91       	ld	r18, X+
    28b4:	3c 91       	ld	r19, X
    28b6:	11 97       	sbiw	r26, 0x01	; 1
    28b8:	28 17       	cp	r18, r24
    28ba:	39 07       	cpc	r19, r25
    28bc:	28 f4       	brcc	.+10     	; 0x28c8 <_Z7soak_upRjS_S_RbS0_+0x474>
					duty = ICR1;
    28be:	ed 91       	ld	r30, X+
    28c0:	fc 91       	ld	r31, X
    28c2:	f8 8f       	std	Y+24, r31	; 0x18
    28c4:	ef 8b       	std	Y+23, r30	; 0x17
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <_Z7soak_upRjS_S_RbS0_+0x478>
    28c8:	98 8f       	std	Y+24, r25	; 0x18
    28ca:	8f 8b       	std	Y+23, r24	; 0x17
				}		
				OCR1A=duty;
    28cc:	8f 89       	ldd	r24, Y+23	; 0x17
    28ce:	98 8d       	ldd	r25, Y+24	; 0x18
    28d0:	90 93 89 00 	sts	0x0089, r25
    28d4:	80 93 88 00 	sts	0x0088, r24
				//if(timers_help+5 >= time && mean_tmp < right_temp_at_this_second + 10 ){
				//	duty=ICR1;
				//}
				
				
				intToStr(duty, duty1 ,3);
    28d8:	43 e0       	ldi	r20, 0x03	; 3
    28da:	50 e0       	ldi	r21, 0x00	; 0
    28dc:	be 01       	movw	r22, r28
    28de:	6f 5f       	subi	r22, 0xFF	; 255
    28e0:	7f 4f       	sbci	r23, 0xFF	; 255
    28e2:	8f 89       	ldd	r24, Y+23	; 0x17
    28e4:	98 8d       	ldd	r25, Y+24	; 0x18
    28e6:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
				drawString( 70, 232, cycle112, BLACK, YELLOW, 1); //x and y are inverted
    28ea:	ee 24       	eor	r14, r14
    28ec:	e3 94       	inc	r14
    28ee:	00 ee       	ldi	r16, 0xE0	; 224
    28f0:	1f ef       	ldi	r17, 0xFF	; 255
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	42 e0       	ldi	r20, 0x02	; 2
    28f8:	51 e0       	ldi	r21, 0x01	; 1
    28fa:	68 ee       	ldi	r22, 0xE8	; 232
    28fc:	70 e0       	ldi	r23, 0x00	; 0
    28fe:	86 e4       	ldi	r24, 0x46	; 70
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
				drawString( 100, 232, duty1, BLACK, YELLOW, 1); //x and y are inverted
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	ae 01       	movw	r20, r28
    290c:	4f 5f       	subi	r20, 0xFF	; 255
    290e:	5f 4f       	sbci	r21, 0xFF	; 255
    2910:	68 ee       	ldi	r22, 0xE8	; 232
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	84 e6       	ldi	r24, 0x64	; 100
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
				drawString( 118, 232, percentmark, BLACK, YELLOW, 1); //x and y are inverted
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	51 e0       	ldi	r21, 0x01	; 1
    2924:	68 ee       	ldi	r22, 0xE8	; 232
    2926:	70 e0       	ldi	r23, 0x00	; 0
    2928:	86 e7       	ldi	r24, 0x76	; 118
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
			//delay_ms(131);
			tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
			if (tmp > 1000 || tmp < 0){
				tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
			}
			tmp+=duty/20; //add 5% of duty cycle to value to get it about right
    2930:	8f 89       	ldd	r24, Y+23	; 0x17
    2932:	98 8d       	ldd	r25, Y+24	; 0x18
    2934:	64 e1       	ldi	r22, 0x14	; 20
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__divmodhi4>
    293c:	cb 01       	movw	r24, r22
    293e:	aa 27       	eor	r26, r26
    2940:	97 fd       	sbrc	r25, 7
    2942:	a0 95       	com	r26
    2944:	ba 2f       	mov	r27, r26
    2946:	8d 8f       	std	Y+29, r24	; 0x1d
    2948:	9e 8f       	std	Y+30, r25	; 0x1e
    294a:	af 8f       	std	Y+31, r26	; 0x1f
    294c:	b8 a3       	std	Y+32, r27	; 0x20
    294e:	49 8c       	ldd	r4, Y+25	; 0x19
    2950:	5a 8c       	ldd	r5, Y+26	; 0x1a
    2952:	6b 8c       	ldd	r6, Y+27	; 0x1b
    2954:	7c 8c       	ldd	r7, Y+28	; 0x1c
    2956:	85 01       	movw	r16, r10
	
	//profile times and added 30seconds for cooling whole 320 pixels for time
	double req_time=(double)320/(prof.PreHeatTime+prof.SoakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+30); 
	double req_temp=(double)220/(prof.PeakHeatTemp+35); //that's what we should need from display 220 pixels for temp
	
	while(timers_help < time){
    2958:	ad 89       	ldd	r26, Y+21	; 0x15
    295a:	be 89       	ldd	r27, Y+22	; 0x16
    295c:	2d 91       	ld	r18, X+
    295e:	3c 91       	ld	r19, X
    2960:	eb 89       	ldd	r30, Y+19	; 0x13
    2962:	fc 89       	ldd	r31, Y+20	; 0x14
    2964:	80 81       	ld	r24, Z
    2966:	91 81       	ldd	r25, Z+1	; 0x01
    2968:	28 17       	cp	r18, r24
    296a:	39 07       	cpc	r19, r25
    296c:	08 f4       	brcc	.+2      	; 0x2970 <_Z7soak_upRjS_S_RbS0_+0x51c>
    296e:	28 ce       	rjmp	.-944    	; 0x25c0 <_Z7soak_upRjS_S_RbS0_+0x16c>
    2970:	07 c0       	rjmp	.+14     	; 0x2980 <_Z7soak_upRjS_S_RbS0_+0x52c>
					duty=duty11;
				} 
				else if (duty11 < 0){
					duty=0;
				} 				
				if ( duty > ICR1 ){
    2972:	a6 e8       	ldi	r26, 0x86	; 134
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	8d 91       	ld	r24, X+
    2978:	9c 91       	ld	r25, X
				
				if (duty11 > 0){
					duty=duty11;
				} 
				else if (duty11 < 0){
					duty=0;
    297a:	18 8e       	std	Y+24, r1	; 0x18
    297c:	1f 8a       	std	Y+23, r1	; 0x17
    297e:	a6 cf       	rjmp	.-180    	; 0x28cc <_Z7soak_upRjS_S_RbS0_+0x478>
				drawString( 118, 232, percentmark, BLACK, YELLOW, 1); //x and y are inverted
			}
		}
	}
return;
}
    2980:	ac 96       	adiw	r28, 0x2c	; 44
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	1f 91       	pop	r17
    2992:	0f 91       	pop	r16
    2994:	ff 90       	pop	r15
    2996:	ef 90       	pop	r14
    2998:	df 90       	pop	r13
    299a:	cf 90       	pop	r12
    299c:	bf 90       	pop	r11
    299e:	af 90       	pop	r10
    29a0:	9f 90       	pop	r9
    29a2:	8f 90       	pop	r8
    29a4:	7f 90       	pop	r7
    29a6:	6f 90       	pop	r6
    29a8:	5f 90       	pop	r5
    29aa:	4f 90       	pop	r4
    29ac:	3f 90       	pop	r3
    29ae:	2f 90       	pop	r2
    29b0:	08 95       	ret

000029b2 <_Z7ramp_upRjS_S_RbS0_>:


void ramp_up(uint16_t& temp,uint16_t& time, uint16_t& timers_help,bool& cancel,bool& res ){
    29b2:	2f 92       	push	r2
    29b4:	3f 92       	push	r3
    29b6:	4f 92       	push	r4
    29b8:	5f 92       	push	r5
    29ba:	6f 92       	push	r6
    29bc:	7f 92       	push	r7
    29be:	8f 92       	push	r8
    29c0:	9f 92       	push	r9
    29c2:	af 92       	push	r10
    29c4:	bf 92       	push	r11
    29c6:	cf 92       	push	r12
    29c8:	df 92       	push	r13
    29ca:	ef 92       	push	r14
    29cc:	ff 92       	push	r15
    29ce:	0f 93       	push	r16
    29d0:	1f 93       	push	r17
    29d2:	cf 93       	push	r28
    29d4:	df 93       	push	r29
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	ac 97       	sbiw	r28, 0x2c	; 44
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	6c 01       	movw	r12, r24
    29e8:	7a 8f       	std	Y+26, r23	; 0x1a
    29ea:	69 8f       	std	Y+25, r22	; 0x19
    29ec:	58 8f       	std	Y+24, r21	; 0x18
    29ee:	4f 8b       	std	Y+23, r20	; 0x17
    29f0:	29 01       	movw	r4, r18
    29f2:	38 01       	movw	r6, r16
	OCR1A=ICR1; //max cycle
    29f4:	e6 e8       	ldi	r30, 0x86	; 134
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	91 81       	ldd	r25, Z+1	; 0x01
    29fc:	90 93 89 00 	sts	0x0089, r25
    2a00:	80 93 88 00 	sts	0x0088, r24
	
	//uint16_t temp_target= temp;//+5; //target is 5 Celsius above peak
	double tmp=0;
	int16_t duty=ICR1;	
    2a04:	80 81       	ld	r24, Z
    2a06:	91 81       	ldd	r25, Z+1	; 0x01
    2a08:	9c 8f       	std	Y+28, r25	; 0x1c
    2a0a:	8b 8f       	std	Y+27, r24	; 0x1b
	int16_t draw_time=0;
	
	//uint16_t right_temp_at_this_second =0;
	
	char duty1[10];
	char xx[8]="Ramping";
    2a0c:	88 e0       	ldi	r24, 0x08	; 8
    2a0e:	e3 e2       	ldi	r30, 0x23	; 35
    2a10:	f1 e0       	ldi	r31, 0x01	; 1
    2a12:	de 01       	movw	r26, r28
    2a14:	1b 96       	adiw	r26, 0x0b	; 11
    2a16:	01 90       	ld	r0, Z+
    2a18:	0d 92       	st	X+, r0
    2a1a:	8a 95       	dec	r24
    2a1c:	e1 f7       	brne	.-8      	; 0x2a16 <_Z7ramp_upRjS_S_RbS0_+0x64>
	drawString( 200,0,xx, WHITE, GREEN, 2);
    2a1e:	68 94       	set
    2a20:	ee 24       	eor	r14, r14
    2a22:	e1 f8       	bld	r14, 1
    2a24:	00 ee       	ldi	r16, 0xE0	; 224
    2a26:	17 e0       	ldi	r17, 0x07	; 7
    2a28:	2f ef       	ldi	r18, 0xFF	; 255
    2a2a:	3f ef       	ldi	r19, 0xFF	; 255
    2a2c:	ae 01       	movw	r20, r28
    2a2e:	45 5f       	subi	r20, 0xF5	; 245
    2a30:	5f 4f       	sbci	r21, 0xFF	; 255
    2a32:	60 e0       	ldi	r22, 0x00	; 0
    2a34:	70 e0       	ldi	r23, 0x00	; 0
    2a36:	88 ec       	ldi	r24, 0xC8	; 200
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
	
	//OCR1A=0;
	//delay_ms(131);
	tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    2a3e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    2a42:	4b 01       	movw	r8, r22
    2a44:	5c 01       	movw	r10, r24
	if (tmp > 1000 || tmp < 0){
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	4a e7       	ldi	r20, 0x7A	; 122
    2a4c:	54 e4       	ldi	r21, 0x44	; 68
    2a4e:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    2a52:	18 16       	cp	r1, r24
    2a54:	4c f0       	brlt	.+18     	; 0x2a68 <_Z7ramp_upRjS_S_RbS0_+0xb6>
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	a9 01       	movw	r20, r18
    2a5c:	c5 01       	movw	r24, r10
    2a5e:	b4 01       	movw	r22, r8
    2a60:	0e 94 57 24 	call	0x48ae	; 0x48ae <__cmpsf2>
    2a64:	88 23       	and	r24, r24
    2a66:	14 f4       	brge	.+4      	; 0x2a6c <_Z7ramp_upRjS_S_RbS0_+0xba>
		tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    2a68:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
	//delay_ms(5);
	//OCR1A=duty;

	//tmp+=round(duty/12);
	//uint16_t last_temps[4]={(uint16_t)round(tmp),(uint16_t)round(tmp),(uint16_t)round(tmp),(uint16_t)round(tmp)}; //fill with current temp
	slope_yx =(double) (temp-prof.SoakHeatTemp)/time; //this is the degrees / second we want to achieve
    2a6c:	d6 01       	movw	r26, r12
    2a6e:	6d 91       	ld	r22, X+
    2a70:	7c 91       	ld	r23, X
    2a72:	80 91 7a 01 	lds	r24, 0x017A
    2a76:	90 91 7b 01 	lds	r25, 0x017B
    2a7a:	68 1b       	sub	r22, r24
    2a7c:	79 0b       	sbc	r23, r25
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    2a86:	6b 01       	movw	r12, r22
    2a88:	7c 01       	movw	r14, r24
    2a8a:	e9 8d       	ldd	r30, Y+25	; 0x19
    2a8c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2a8e:	60 81       	ld	r22, Z
    2a90:	71 81       	ldd	r23, Z+1	; 0x01
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    2a9a:	9b 01       	movw	r18, r22
    2a9c:	ac 01       	movw	r20, r24
    2a9e:	c7 01       	movw	r24, r14
    2aa0:	b6 01       	movw	r22, r12
    2aa2:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
    2aa6:	6d 8f       	std	Y+29, r22	; 0x1d
    2aa8:	7e 8f       	std	Y+30, r23	; 0x1e
    2aaa:	8f 8f       	std	Y+31, r24	; 0x1f
    2aac:	98 a3       	std	Y+32, r25	; 0x20

	//profile times and added 30seconds for cooling whole 320 pixels for time
	double req_time=(double)320/(prof.PreHeatTime+prof.SoakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+30); 
    2aae:	80 91 80 01 	lds	r24, 0x0180
    2ab2:	90 91 81 01 	lds	r25, 0x0181
    2ab6:	60 91 78 01 	lds	r22, 0x0178
    2aba:	70 91 79 01 	lds	r23, 0x0179
    2abe:	20 91 7c 01 	lds	r18, 0x017C
    2ac2:	30 91 7d 01 	lds	r19, 0x017D
    2ac6:	62 0f       	add	r22, r18
    2ac8:	73 1f       	adc	r23, r19
    2aca:	62 5e       	subi	r22, 0xE2	; 226
    2acc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ace:	68 0f       	add	r22, r24
    2ad0:	79 1f       	adc	r23, r25
    2ad2:	68 0f       	add	r22, r24
    2ad4:	79 1f       	adc	r23, r25
    2ad6:	68 0f       	add	r22, r24
    2ad8:	79 1f       	adc	r23, r25
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    2ae2:	9b 01       	movw	r18, r22
    2ae4:	ac 01       	movw	r20, r24
    2ae6:	60 e0       	ldi	r22, 0x00	; 0
    2ae8:	70 e0       	ldi	r23, 0x00	; 0
    2aea:	80 ea       	ldi	r24, 0xA0	; 160
    2aec:	93 e4       	ldi	r25, 0x43	; 67
    2aee:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
    2af2:	6d a3       	std	Y+37, r22	; 0x25
    2af4:	7e a3       	std	Y+38, r23	; 0x26
    2af6:	8f a3       	std	Y+39, r24	; 0x27
    2af8:	98 a7       	std	Y+40, r25	; 0x28
	double req_temp=(double)220/(prof.PeakHeatTemp+35); //that's what we should need from display 220 pixels for temp
    2afa:	60 91 7e 01 	lds	r22, 0x017E
    2afe:	70 91 7f 01 	lds	r23, 0x017F
    2b02:	6d 5d       	subi	r22, 0xDD	; 221
    2b04:	7f 4f       	sbci	r23, 0xFF	; 255
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    2b0e:	9b 01       	movw	r18, r22
    2b10:	ac 01       	movw	r20, r24
    2b12:	60 e0       	ldi	r22, 0x00	; 0
    2b14:	70 e0       	ldi	r23, 0x00	; 0
    2b16:	8c e5       	ldi	r24, 0x5C	; 92
    2b18:	93 e4       	ldi	r25, 0x43	; 67
    2b1a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
    2b1e:	69 a7       	std	Y+41, r22	; 0x29
    2b20:	7a a7       	std	Y+42, r23	; 0x2a
    2b22:	8b a7       	std	Y+43, r24	; 0x2b
    2b24:	9c a7       	std	Y+44, r25	; 0x2c
    2b26:	42 01       	movw	r8, r4
	
	while(timers_help < time){
    2b28:	d2 c1       	rjmp	.+932    	; 0x2ece <_Z7ramp_upRjS_S_RbS0_+0x51c>
    2b2a:	f4 01       	movw	r30, r8
    2b2c:	d3 01       	movw	r26, r6
	
		if( cancel == 1){
    2b2e:	80 81       	ld	r24, Z
    2b30:	88 23       	and	r24, r24
    2b32:	29 f0       	breq	.+10     	; 0x2b3e <_Z7ramp_upRjS_S_RbS0_+0x18c>
			OCR1A=0;
    2b34:	10 92 89 00 	sts	0x0089, r1
    2b38:	10 92 88 00 	sts	0x0088, r1
			return;
    2b3c:	b9 c3       	rjmp	.+1906   	; 0x32b0 <_Z7ramp_upRjS_S_RbS0_+0x8fe>
		}
		if (res){
    2b3e:	8c 91       	ld	r24, X
    2b40:	88 23       	and	r24, r24
    2b42:	a9 f3       	breq	.-22     	; 0x2b2e <_Z7ramp_upRjS_S_RbS0_+0x17c>
    2b44:	4f 01       	movw	r8, r30
    2b46:	3d 01       	movw	r6, r26
			res =0;
    2b48:	1c 92       	st	X, r1
			//OCR1A=0;
			//delay_ms(131);
			tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    2b4a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    2b4e:	6b 01       	movw	r12, r22
    2b50:	7c 01       	movw	r14, r24
			if (tmp > 1000 || tmp < 0){
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	4a e7       	ldi	r20, 0x7A	; 122
    2b58:	54 e4       	ldi	r21, 0x44	; 68
    2b5a:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    2b5e:	18 16       	cp	r1, r24
    2b60:	4c f0       	brlt	.+18     	; 0x2b74 <_Z7ramp_upRjS_S_RbS0_+0x1c2>
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	a9 01       	movw	r20, r18
    2b68:	c7 01       	movw	r24, r14
    2b6a:	b6 01       	movw	r22, r12
    2b6c:	0e 94 57 24 	call	0x48ae	; 0x48ae <__cmpsf2>
    2b70:	88 23       	and	r24, r24
    2b72:	24 f4       	brge	.+8      	; 0x2b7c <_Z7ramp_upRjS_S_RbS0_+0x1ca>
				tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    2b74:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    2b78:	6b 01       	movw	r12, r22
    2b7a:	7c 01       	movw	r14, r24
			}
			tmp+=duty/20; //add 5% of duty cycle to value to get it about right
    2b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b80:	64 e1       	ldi	r22, 0x14	; 20
    2b82:	70 e0       	ldi	r23, 0x00	; 0
    2b84:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__divmodhi4>
    2b88:	88 27       	eor	r24, r24
    2b8a:	77 fd       	sbrc	r23, 7
    2b8c:	80 95       	com	r24
    2b8e:	98 2f       	mov	r25, r24
    2b90:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    2b94:	a7 01       	movw	r20, r14
    2b96:	96 01       	movw	r18, r12
    2b98:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    2b9c:	1b 01       	movw	r2, r22
    2b9e:	2c 01       	movw	r4, r24
			//delay_ms(5);
			//OCR1A=duty;
			//tmp+=duty/12; //add x% of duty cycle to value to get it about right
			
						
			draw_temp=round(tmp*req_temp);	
    2ba0:	29 a5       	ldd	r18, Y+41	; 0x29
    2ba2:	3a a5       	ldd	r19, Y+42	; 0x2a
    2ba4:	4b a5       	ldd	r20, Y+43	; 0x2b
    2ba6:	5c a5       	ldd	r21, Y+44	; 0x2c
    2ba8:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    2bac:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    2bb0:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    2bb4:	6b 8b       	std	Y+19, r22	; 0x13
    2bb6:	7c 8b       	std	Y+20, r23	; 0x14
    2bb8:	8d 8b       	std	Y+21, r24	; 0x15
    2bba:	9e 8b       	std	Y+22, r25	; 0x16
			draw_time=round((timers_help+prof.PreHeatTime+prof.SoakHeatTime)*req_time);
    2bbc:	ac e7       	ldi	r26, 0x7C	; 124
    2bbe:	b1 e0       	ldi	r27, 0x01	; 1
    2bc0:	6d 91       	ld	r22, X+
    2bc2:	7c 91       	ld	r23, X
    2bc4:	e8 e7       	ldi	r30, 0x78	; 120
    2bc6:	f1 e0       	ldi	r31, 0x01	; 1
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	68 0f       	add	r22, r24
    2bce:	79 1f       	adc	r23, r25
    2bd0:	af 89       	ldd	r26, Y+23	; 0x17
    2bd2:	b8 8d       	ldd	r27, Y+24	; 0x18
    2bd4:	8d 91       	ld	r24, X+
    2bd6:	9c 91       	ld	r25, X
    2bd8:	68 0f       	add	r22, r24
    2bda:	79 1f       	adc	r23, r25
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    2be4:	2d a1       	ldd	r18, Y+37	; 0x25
    2be6:	3e a1       	ldd	r19, Y+38	; 0x26
    2be8:	4f a1       	ldd	r20, Y+39	; 0x27
    2bea:	58 a5       	ldd	r21, Y+40	; 0x28
    2bec:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    2bf0:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    2bf4:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    2bf8:	6b 01       	movw	r12, r22
    2bfa:	7c 01       	movw	r14, r24
			drawPixel(draw_time, 240-draw_temp,color_real); //x,y
    2bfc:	60 ef       	ldi	r22, 0xF0	; 240
    2bfe:	70 e0       	ldi	r23, 0x00	; 0
    2c00:	eb 89       	ldd	r30, Y+19	; 0x13
    2c02:	fc 89       	ldd	r31, Y+20	; 0x14
    2c04:	6e 1b       	sub	r22, r30
    2c06:	7f 0b       	sbc	r23, r31
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	58 ef       	ldi	r21, 0xF8	; 248
    2c0c:	c6 01       	movw	r24, r12
    2c0e:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
			drawPixel(draw_time, 240-draw_temp+1,color_real); //x,y			
    2c12:	61 ef       	ldi	r22, 0xF1	; 241
    2c14:	70 e0       	ldi	r23, 0x00	; 0
    2c16:	8b 89       	ldd	r24, Y+19	; 0x13
    2c18:	9c 89       	ldd	r25, Y+20	; 0x14
    2c1a:	68 1b       	sub	r22, r24
    2c1c:	79 0b       	sbc	r23, r25
    2c1e:	40 e0       	ldi	r20, 0x00	; 0
    2c20:	58 ef       	ldi	r21, 0xF8	; 248
    2c22:	c6 01       	movw	r24, r12
    2c24:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
			
				err_old=err;
    2c28:	80 91 04 02 	lds	r24, 0x0204
    2c2c:	90 91 05 02 	lds	r25, 0x0205
    2c30:	a0 91 06 02 	lds	r26, 0x0206
    2c34:	b0 91 07 02 	lds	r27, 0x0207
    2c38:	8b 8b       	std	Y+19, r24	; 0x13
    2c3a:	9c 8b       	std	Y+20, r25	; 0x14
    2c3c:	ad 8b       	std	Y+21, r26	; 0x15
    2c3e:	be 8b       	std	Y+22, r27	; 0x16
    2c40:	80 93 00 02 	sts	0x0200, r24
    2c44:	90 93 01 02 	sts	0x0201, r25
    2c48:	a0 93 02 02 	sts	0x0202, r26
    2c4c:	b0 93 03 02 	sts	0x0203, r27
				err=slope_yx*timers_help+prof.SoakHeatTemp-tmp;
    2c50:	af 89       	ldd	r26, Y+23	; 0x17
    2c52:	b8 8d       	ldd	r27, Y+24	; 0x18
    2c54:	6d 91       	ld	r22, X+
    2c56:	7c 91       	ld	r23, X
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    2c60:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2c62:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2c64:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2c66:	58 a1       	ldd	r21, Y+32	; 0x20
    2c68:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    2c6c:	6b 01       	movw	r12, r22
    2c6e:	7c 01       	movw	r14, r24
    2c70:	ea e7       	ldi	r30, 0x7A	; 122
    2c72:	f1 e0       	ldi	r31, 0x01	; 1
    2c74:	60 81       	ld	r22, Z
    2c76:	71 81       	ldd	r23, Z+1	; 0x01
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    2c80:	9b 01       	movw	r18, r22
    2c82:	ac 01       	movw	r20, r24
    2c84:	c7 01       	movw	r24, r14
    2c86:	b6 01       	movw	r22, r12
    2c88:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    2c8c:	a2 01       	movw	r20, r4
    2c8e:	91 01       	movw	r18, r2
    2c90:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    2c94:	6b 01       	movw	r12, r22
    2c96:	7c 01       	movw	r14, r24
    2c98:	60 93 04 02 	sts	0x0204, r22
    2c9c:	70 93 05 02 	sts	0x0205, r23
    2ca0:	80 93 06 02 	sts	0x0206, r24
    2ca4:	90 93 07 02 	sts	0x0207, r25
				P_err=err;
    2ca8:	60 93 f8 01 	sts	0x01F8, r22
    2cac:	70 93 f9 01 	sts	0x01F9, r23
    2cb0:	80 93 fa 01 	sts	0x01FA, r24
    2cb4:	90 93 fb 01 	sts	0x01FB, r25
				
				mean_I_err[memory-1]=err_old;
    2cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cba:	9c 89       	ldd	r25, Y+20	; 0x14
    2cbc:	ad 89       	ldd	r26, Y+21	; 0x15
    2cbe:	be 89       	ldd	r27, Y+22	; 0x16
    2cc0:	ee ee       	ldi	r30, 0xEE	; 238
    2cc2:	f1 e0       	ldi	r31, 0x01	; 1
    2cc4:	80 83       	st	Z, r24
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	a2 83       	std	Z+2, r26	; 0x02
    2cca:	b3 83       	std	Z+3, r27	; 0x03
    2ccc:	ea ec       	ldi	r30, 0xCA	; 202
    2cce:	f1 e0       	ldi	r31, 0x01	; 1
				for (int i=0;i< memory-1;i++){
					mean_I_err[i]=(double)mean_I_err[i+1];
    2cd0:	84 81       	ldd	r24, Z+4	; 0x04
    2cd2:	95 81       	ldd	r25, Z+5	; 0x05
    2cd4:	a6 81       	ldd	r26, Z+6	; 0x06
    2cd6:	b7 81       	ldd	r27, Z+7	; 0x07
    2cd8:	81 93       	st	Z+, r24
    2cda:	91 93       	st	Z+, r25
    2cdc:	a1 93       	st	Z+, r26
    2cde:	b1 93       	st	Z+, r27
				err_old=err;
				err=slope_yx*timers_help+prof.SoakHeatTemp-tmp;
				P_err=err;
				
				mean_I_err[memory-1]=err_old;
				for (int i=0;i< memory-1;i++){
    2ce0:	21 e0       	ldi	r18, 0x01	; 1
    2ce2:	ee 3e       	cpi	r30, 0xEE	; 238
    2ce4:	f2 07       	cpc	r31, r18
    2ce6:	a1 f7       	brne	.-24     	; 0x2cd0 <_Z7ramp_upRjS_S_RbS0_+0x31e>
    2ce8:	0f 2e       	mov	r0, r31
    2cea:	fa ec       	ldi	r31, 0xCA	; 202
    2cec:	af 2e       	mov	r10, r31
    2cee:	f1 e0       	ldi	r31, 0x01	; 1
    2cf0:	bf 2e       	mov	r11, r31
    2cf2:	f0 2d       	mov	r31, r0
    2cf4:	21 2c       	mov	r2, r1
    2cf6:	31 2c       	mov	r3, r1
    2cf8:	00 e0       	ldi	r16, 0x00	; 0
    2cfa:	10 e0       	ldi	r17, 0x00	; 0
					mean_I_err[i]=(double)mean_I_err[i+1];
				}
				mean_I_error=0;
				for (int i=0;i< memory;i++){
					mean_I_error+=(double)mean_I_err[i];
    2cfc:	d5 01       	movw	r26, r10
    2cfe:	6d 91       	ld	r22, X+
    2d00:	7d 91       	ld	r23, X+
    2d02:	8d 91       	ld	r24, X+
    2d04:	9d 91       	ld	r25, X+
    2d06:	5d 01       	movw	r10, r26
    2d08:	22 2d       	mov	r18, r2
    2d0a:	33 2d       	mov	r19, r3
    2d0c:	40 2f       	mov	r20, r16
    2d0e:	51 2f       	mov	r21, r17
    2d10:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
				mean_I_err[memory-1]=err_old;
				for (int i=0;i< memory-1;i++){
					mean_I_err[i]=(double)mean_I_err[i+1];
				}
				mean_I_error=0;
				for (int i=0;i< memory;i++){
    2d14:	b2 ef       	ldi	r27, 0xF2	; 242
    2d16:	ab 16       	cp	r10, r27
    2d18:	b1 e0       	ldi	r27, 0x01	; 1
    2d1a:	bb 06       	cpc	r11, r27
    2d1c:	29 f0       	breq	.+10     	; 0x2d28 <_Z7ramp_upRjS_S_RbS0_+0x376>
					mean_I_error+=(double)mean_I_err[i];
    2d1e:	26 2e       	mov	r2, r22
    2d20:	37 2e       	mov	r3, r23
    2d22:	08 2f       	mov	r16, r24
    2d24:	19 2f       	mov	r17, r25
    2d26:	ea cf       	rjmp	.-44     	; 0x2cfc <_Z7ramp_upRjS_S_RbS0_+0x34a>
    2d28:	26 2e       	mov	r2, r22
    2d2a:	37 2e       	mov	r3, r23
    2d2c:	08 2f       	mov	r16, r24
    2d2e:	19 2f       	mov	r17, r25
    2d30:	86 2f       	mov	r24, r22
    2d32:	93 2d       	mov	r25, r3
    2d34:	a0 2f       	mov	r26, r16
    2d36:	b1 2f       	mov	r27, r17
    2d38:	80 93 f2 01 	sts	0x01F2, r24
    2d3c:	90 93 f3 01 	sts	0x01F3, r25
    2d40:	a0 93 f4 01 	sts	0x01F4, r26
    2d44:	b0 93 f5 01 	sts	0x01F5, r27
				}				
				I_err=mean_I_error;
    2d48:	80 93 fc 01 	sts	0x01FC, r24
    2d4c:	90 93 fd 01 	sts	0x01FD, r25
    2d50:	a0 93 fe 01 	sts	0x01FE, r26
    2d54:	b0 93 ff 01 	sts	0x01FF, r27
				//I_err+=err_old
				D_err=err-err_old;				
    2d58:	2b 89       	ldd	r18, Y+19	; 0x13
    2d5a:	3c 89       	ldd	r19, Y+20	; 0x14
    2d5c:	4d 89       	ldd	r20, Y+21	; 0x15
    2d5e:	5e 89       	ldd	r21, Y+22	; 0x16
    2d60:	c7 01       	movw	r24, r14
    2d62:	b6 01       	movw	r22, r12
    2d64:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    2d68:	6b 8b       	std	Y+19, r22	; 0x13
    2d6a:	7c 8b       	std	Y+20, r23	; 0x14
    2d6c:	8d 8b       	std	Y+21, r24	; 0x15
    2d6e:	9e 8b       	std	Y+22, r25	; 0x16
    2d70:	60 93 08 02 	sts	0x0208, r22
    2d74:	70 93 09 02 	sts	0x0209, r23
    2d78:	80 93 0a 02 	sts	0x020A, r24
    2d7c:	90 93 0b 02 	sts	0x020B, r25
				
				if(err > error_rate || err < -error_rate){
    2d80:	80 91 09 01 	lds	r24, 0x0109
    2d84:	90 91 0a 01 	lds	r25, 0x010A
    2d88:	a0 91 0b 01 	lds	r26, 0x010B
    2d8c:	b0 91 0c 01 	lds	r27, 0x010C
    2d90:	89 a3       	std	Y+33, r24	; 0x21
    2d92:	9a a3       	std	Y+34, r25	; 0x22
    2d94:	ab a3       	std	Y+35, r26	; 0x23
    2d96:	bc a3       	std	Y+36, r27	; 0x24
    2d98:	9c 01       	movw	r18, r24
    2d9a:	ad 01       	movw	r20, r26
    2d9c:	c7 01       	movw	r24, r14
    2d9e:	b6 01       	movw	r22, r12
    2da0:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    2da4:	18 16       	cp	r1, r24
    2da6:	5c f0       	brlt	.+22     	; 0x2dbe <_Z7ramp_upRjS_S_RbS0_+0x40c>
    2da8:	29 a1       	ldd	r18, Y+33	; 0x21
    2daa:	3a a1       	ldd	r19, Y+34	; 0x22
    2dac:	4b a1       	ldd	r20, Y+35	; 0x23
    2dae:	5c a1       	ldd	r21, Y+36	; 0x24
    2db0:	50 58       	subi	r21, 0x80	; 128
    2db2:	c7 01       	movw	r24, r14
    2db4:	b6 01       	movw	r22, r12
    2db6:	0e 94 57 24 	call	0x48ae	; 0x48ae <__cmpsf2>
    2dba:	88 23       	and	r24, r24
    2dbc:	d4 f5       	brge	.+116    	; 0x2e32 <_Z7ramp_upRjS_S_RbS0_+0x480>
					PID=P_val*P_err + I_val*I_err + D_val*D_err;
    2dbe:	a7 01       	movw	r20, r14
    2dc0:	96 01       	movw	r18, r12
    2dc2:	c7 01       	movw	r24, r14
    2dc4:	b6 01       	movw	r22, r12
    2dc6:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    2dca:	6b 01       	movw	r12, r22
    2dcc:	7c 01       	movw	r14, r24
    2dce:	2d ec       	ldi	r18, 0xCD	; 205
    2dd0:	3c ec       	ldi	r19, 0xCC	; 204
    2dd2:	4c e4       	ldi	r20, 0x4C	; 76
    2dd4:	5f e3       	ldi	r21, 0x3F	; 63
    2dd6:	62 2d       	mov	r22, r2
    2dd8:	73 2d       	mov	r23, r3
    2dda:	80 2f       	mov	r24, r16
    2ddc:	91 2f       	mov	r25, r17
    2dde:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    2de2:	9b 01       	movw	r18, r22
    2de4:	ac 01       	movw	r20, r24
    2de6:	c7 01       	movw	r24, r14
    2de8:	b6 01       	movw	r22, r12
    2dea:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    2dee:	6b 01       	movw	r12, r22
    2df0:	7c 01       	movw	r14, r24
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e0       	ldi	r20, 0x00	; 0
    2df8:	5f e3       	ldi	r21, 0x3F	; 63
    2dfa:	6b 89       	ldd	r22, Y+19	; 0x13
    2dfc:	7c 89       	ldd	r23, Y+20	; 0x14
    2dfe:	8d 89       	ldd	r24, Y+21	; 0x15
    2e00:	9e 89       	ldd	r25, Y+22	; 0x16
    2e02:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    2e06:	9b 01       	movw	r18, r22
    2e08:	ac 01       	movw	r20, r24
    2e0a:	c7 01       	movw	r24, r14
    2e0c:	b6 01       	movw	r22, r12
    2e0e:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    2e12:	60 93 0c 02 	sts	0x020C, r22
    2e16:	70 93 0d 02 	sts	0x020D, r23
    2e1a:	80 93 0e 02 	sts	0x020E, r24
    2e1e:	90 93 0f 02 	sts	0x020F, r25
					duty11=round(PID);	
    2e22:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    2e26:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    2e2a:	70 93 f7 01 	sts	0x01F7, r23
    2e2e:	60 93 f6 01 	sts	0x01F6, r22
				//ftoa(I_err,xxyx3,5);
				//drawString( 100,40,xxyx3, BLACK, WHITE, 2);
				//ftoa(D_err,xxyx4,5);
				//drawString( 100,60,xxyx4, BLACK, WHITE, 2);
				
				if (duty11 > 0){
    2e32:	80 91 f6 01 	lds	r24, 0x01F6
    2e36:	90 91 f7 01 	lds	r25, 0x01F7
    2e3a:	18 16       	cp	r1, r24
    2e3c:	19 06       	cpc	r1, r25
    2e3e:	2c f0       	brlt	.+10     	; 0x2e4a <_Z7ramp_upRjS_S_RbS0_+0x498>
				duty=duty11;
				} 
				else if (duty11 < 0){
    2e40:	99 23       	and	r25, r25
    2e42:	0c f4       	brge	.+2      	; 0x2e46 <_Z7ramp_upRjS_S_RbS0_+0x494>
    2e44:	27 c2       	rjmp	.+1102   	; 0x3294 <_Z7ramp_upRjS_S_RbS0_+0x8e2>
    2e46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e48:	9c 8d       	ldd	r25, Y+28	; 0x1c
					duty=0;
				} 				
				if ( duty > ICR1 ){
    2e4a:	a6 e8       	ldi	r26, 0x86	; 134
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	2d 91       	ld	r18, X+
    2e50:	3c 91       	ld	r19, X
    2e52:	11 97       	sbiw	r26, 0x01	; 1
    2e54:	28 17       	cp	r18, r24
    2e56:	39 07       	cpc	r19, r25
    2e58:	28 f4       	brcc	.+10     	; 0x2e64 <_Z7ramp_upRjS_S_RbS0_+0x4b2>
					duty = ICR1;
    2e5a:	ed 91       	ld	r30, X+
    2e5c:	fc 91       	ld	r31, X
    2e5e:	fc 8f       	std	Y+28, r31	; 0x1c
    2e60:	eb 8f       	std	Y+27, r30	; 0x1b
    2e62:	02 c0       	rjmp	.+4      	; 0x2e68 <_Z7ramp_upRjS_S_RbS0_+0x4b6>
    2e64:	9c 8f       	std	Y+28, r25	; 0x1c
    2e66:	8b 8f       	std	Y+27, r24	; 0x1b
				}		
				OCR1A=duty;
    2e68:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2e6a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2e6c:	a8 e8       	ldi	r26, 0x88	; 136
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	11 96       	adiw	r26, 0x01	; 1
    2e72:	fc 93       	st	X, r31
    2e74:	ee 93       	st	-X, r30
			
			
				intToStr(duty, duty1 ,3);
    2e76:	43 e0       	ldi	r20, 0x03	; 3
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	be 01       	movw	r22, r28
    2e7c:	6f 5f       	subi	r22, 0xFF	; 255
    2e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e84:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
				drawString( 70, 232, cycle112, BLACK, YELLOW, 1); //x and y are inverted
    2e88:	ee 24       	eor	r14, r14
    2e8a:	e3 94       	inc	r14
    2e8c:	00 ee       	ldi	r16, 0xE0	; 224
    2e8e:	1f ef       	ldi	r17, 0xFF	; 255
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	42 e0       	ldi	r20, 0x02	; 2
    2e96:	51 e0       	ldi	r21, 0x01	; 1
    2e98:	68 ee       	ldi	r22, 0xE8	; 232
    2e9a:	70 e0       	ldi	r23, 0x00	; 0
    2e9c:	86 e4       	ldi	r24, 0x46	; 70
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
				drawString( 100, 232, duty1, BLACK, YELLOW, 1); //x and y are inverted
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	ae 01       	movw	r20, r28
    2eaa:	4f 5f       	subi	r20, 0xFF	; 255
    2eac:	5f 4f       	sbci	r21, 0xFF	; 255
    2eae:	68 ee       	ldi	r22, 0xE8	; 232
    2eb0:	70 e0       	ldi	r23, 0x00	; 0
    2eb2:	84 e6       	ldi	r24, 0x64	; 100
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
				drawString( 118, 232, percentmark, BLACK, YELLOW, 1); //x and y are inverted
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e0       	ldi	r20, 0x00	; 0
    2ec0:	51 e0       	ldi	r21, 0x01	; 1
    2ec2:	68 ee       	ldi	r22, 0xE8	; 232
    2ec4:	70 e0       	ldi	r23, 0x00	; 0
    2ec6:	86 e7       	ldi	r24, 0x76	; 118
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>

	//profile times and added 30seconds for cooling whole 320 pixels for time
	double req_time=(double)320/(prof.PreHeatTime+prof.SoakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+30); 
	double req_temp=(double)220/(prof.PeakHeatTemp+35); //that's what we should need from display 220 pixels for temp
	
	while(timers_help < time){
    2ece:	af 89       	ldd	r26, Y+23	; 0x17
    2ed0:	b8 8d       	ldd	r27, Y+24	; 0x18
    2ed2:	8d 91       	ld	r24, X+
    2ed4:	9c 91       	ld	r25, X
    2ed6:	11 97       	sbiw	r26, 0x01	; 1
    2ed8:	e9 8d       	ldd	r30, Y+25	; 0x19
    2eda:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2edc:	20 81       	ld	r18, Z
    2ede:	31 81       	ldd	r19, Z+1	; 0x01
    2ee0:	82 17       	cp	r24, r18
    2ee2:	93 07       	cpc	r25, r19
    2ee4:	08 f4       	brcc	.+2      	; 0x2ee8 <_Z7ramp_upRjS_S_RbS0_+0x536>
    2ee6:	21 ce       	rjmp	.-958    	; 0x2b2a <_Z7ramp_upRjS_S_RbS0_+0x178>
    2ee8:	9e 8f       	std	Y+30, r25	; 0x1e
    2eea:	8d 8f       	std	Y+29, r24	; 0x1d


				
	}
	uint16_t dooh=timers_help;
	timers_help=0;
    2eec:	1d 92       	st	X+, r1
    2eee:	1c 92       	st	X, r1
	slope_yx =0; //keep temp same
	while(timers_help < time){
    2ef0:	c0 c1       	rjmp	.+896    	; 0x3272 <_Z7ramp_upRjS_S_RbS0_+0x8c0>
    2ef2:	f4 01       	movw	r30, r8
    2ef4:	d3 01       	movw	r26, r6
	
		if( cancel == 1){
    2ef6:	80 81       	ld	r24, Z
    2ef8:	88 23       	and	r24, r24
    2efa:	29 f0       	breq	.+10     	; 0x2f06 <_Z7ramp_upRjS_S_RbS0_+0x554>
			OCR1A=0;
    2efc:	10 92 89 00 	sts	0x0089, r1
    2f00:	10 92 88 00 	sts	0x0088, r1
			return;
    2f04:	d5 c1       	rjmp	.+938    	; 0x32b0 <_Z7ramp_upRjS_S_RbS0_+0x8fe>
		}
		if (res){
    2f06:	8c 91       	ld	r24, X
    2f08:	88 23       	and	r24, r24
    2f0a:	a9 f3       	breq	.-22     	; 0x2ef6 <_Z7ramp_upRjS_S_RbS0_+0x544>
    2f0c:	4f 01       	movw	r8, r30
    2f0e:	3d 01       	movw	r6, r26
			res =0;
    2f10:	1c 92       	st	X, r1
			//OCR1A=0;
			//delay_ms(131);
			tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    2f12:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    2f16:	6b 01       	movw	r12, r22
    2f18:	7c 01       	movw	r14, r24
			if (tmp > 1000 || tmp < 0){
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	4a e7       	ldi	r20, 0x7A	; 122
    2f20:	54 e4       	ldi	r21, 0x44	; 68
    2f22:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    2f26:	18 16       	cp	r1, r24
    2f28:	4c f0       	brlt	.+18     	; 0x2f3c <_Z7ramp_upRjS_S_RbS0_+0x58a>
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	a9 01       	movw	r20, r18
    2f30:	c7 01       	movw	r24, r14
    2f32:	b6 01       	movw	r22, r12
    2f34:	0e 94 57 24 	call	0x48ae	; 0x48ae <__cmpsf2>
    2f38:	88 23       	and	r24, r24
    2f3a:	24 f4       	brge	.+8      	; 0x2f44 <_Z7ramp_upRjS_S_RbS0_+0x592>
				tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    2f3c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    2f40:	6b 01       	movw	r12, r22
    2f42:	7c 01       	movw	r14, r24
			}
			tmp+=duty/20; //add 5% of duty cycle to value to get it about right
    2f44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f48:	64 e1       	ldi	r22, 0x14	; 20
    2f4a:	70 e0       	ldi	r23, 0x00	; 0
    2f4c:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__divmodhi4>
    2f50:	88 27       	eor	r24, r24
    2f52:	77 fd       	sbrc	r23, 7
    2f54:	80 95       	com	r24
    2f56:	98 2f       	mov	r25, r24
    2f58:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    2f5c:	a7 01       	movw	r20, r14
    2f5e:	96 01       	movw	r18, r12
    2f60:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    2f64:	1b 01       	movw	r2, r22
    2f66:	2c 01       	movw	r4, r24
			//delay_ms(5);
			//OCR1A=duty;
			
			draw_temp=round(tmp*req_temp);	
    2f68:	29 a5       	ldd	r18, Y+41	; 0x29
    2f6a:	3a a5       	ldd	r19, Y+42	; 0x2a
    2f6c:	4b a5       	ldd	r20, Y+43	; 0x2b
    2f6e:	5c a5       	ldd	r21, Y+44	; 0x2c
    2f70:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    2f74:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    2f78:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    2f7c:	6b 8b       	std	Y+19, r22	; 0x13
    2f7e:	7c 8b       	std	Y+20, r23	; 0x14
    2f80:	8d 8b       	std	Y+21, r24	; 0x15
    2f82:	9e 8b       	std	Y+22, r25	; 0x16
			draw_time=round((dooh+timers_help+prof.PreHeatTime+prof.SoakHeatTime)*req_time);
    2f84:	ac e7       	ldi	r26, 0x7C	; 124
    2f86:	b1 e0       	ldi	r27, 0x01	; 1
    2f88:	6d 91       	ld	r22, X+
    2f8a:	7c 91       	ld	r23, X
    2f8c:	e8 e7       	ldi	r30, 0x78	; 120
    2f8e:	f1 e0       	ldi	r31, 0x01	; 1
    2f90:	80 81       	ld	r24, Z
    2f92:	91 81       	ldd	r25, Z+1	; 0x01
    2f94:	68 0f       	add	r22, r24
    2f96:	79 1f       	adc	r23, r25
    2f98:	af 89       	ldd	r26, Y+23	; 0x17
    2f9a:	b8 8d       	ldd	r27, Y+24	; 0x18
    2f9c:	8d 91       	ld	r24, X+
    2f9e:	9c 91       	ld	r25, X
    2fa0:	68 0f       	add	r22, r24
    2fa2:	79 1f       	adc	r23, r25
    2fa4:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2fa6:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2fa8:	6e 0f       	add	r22, r30
    2faa:	7f 1f       	adc	r23, r31
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    2fb4:	2d a1       	ldd	r18, Y+37	; 0x25
    2fb6:	3e a1       	ldd	r19, Y+38	; 0x26
    2fb8:	4f a1       	ldd	r20, Y+39	; 0x27
    2fba:	58 a5       	ldd	r21, Y+40	; 0x28
    2fbc:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    2fc0:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    2fc4:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    2fc8:	6b 01       	movw	r12, r22
    2fca:	7c 01       	movw	r14, r24
			drawPixel(draw_time, 240-draw_temp,color_real); //x,y
    2fcc:	60 ef       	ldi	r22, 0xF0	; 240
    2fce:	70 e0       	ldi	r23, 0x00	; 0
    2fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fd4:	68 1b       	sub	r22, r24
    2fd6:	79 0b       	sbc	r23, r25
    2fd8:	40 e0       	ldi	r20, 0x00	; 0
    2fda:	58 ef       	ldi	r21, 0xF8	; 248
    2fdc:	c6 01       	movw	r24, r12
    2fde:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
			drawPixel(draw_time, 240-draw_temp+1,color_real); //x,y
    2fe2:	61 ef       	ldi	r22, 0xF1	; 241
    2fe4:	70 e0       	ldi	r23, 0x00	; 0
    2fe6:	ab 89       	ldd	r26, Y+19	; 0x13
    2fe8:	bc 89       	ldd	r27, Y+20	; 0x14
    2fea:	6a 1b       	sub	r22, r26
    2fec:	7b 0b       	sbc	r23, r27
    2fee:	40 e0       	ldi	r20, 0x00	; 0
    2ff0:	58 ef       	ldi	r21, 0xF8	; 248
    2ff2:	c6 01       	movw	r24, r12
    2ff4:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
		
			
				err_old=err;
    2ff8:	80 91 04 02 	lds	r24, 0x0204
    2ffc:	90 91 05 02 	lds	r25, 0x0205
    3000:	a0 91 06 02 	lds	r26, 0x0206
    3004:	b0 91 07 02 	lds	r27, 0x0207
    3008:	8b 8b       	std	Y+19, r24	; 0x13
    300a:	9c 8b       	std	Y+20, r25	; 0x14
    300c:	ad 8b       	std	Y+21, r26	; 0x15
    300e:	be 8b       	std	Y+22, r27	; 0x16
    3010:	80 93 00 02 	sts	0x0200, r24
    3014:	90 93 01 02 	sts	0x0201, r25
    3018:	a0 93 02 02 	sts	0x0202, r26
    301c:	b0 93 03 02 	sts	0x0203, r27
				err=prof.PeakHeatTemp-tmp;
    3020:	ae e7       	ldi	r26, 0x7E	; 126
    3022:	b1 e0       	ldi	r27, 0x01	; 1
    3024:	6d 91       	ld	r22, X+
    3026:	7c 91       	ld	r23, X
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    3030:	a2 01       	movw	r20, r4
    3032:	91 01       	movw	r18, r2
    3034:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    3038:	6b 01       	movw	r12, r22
    303a:	7c 01       	movw	r14, r24
    303c:	60 93 04 02 	sts	0x0204, r22
    3040:	70 93 05 02 	sts	0x0205, r23
    3044:	80 93 06 02 	sts	0x0206, r24
    3048:	90 93 07 02 	sts	0x0207, r25
				P_err=err;
    304c:	60 93 f8 01 	sts	0x01F8, r22
    3050:	70 93 f9 01 	sts	0x01F9, r23
    3054:	80 93 fa 01 	sts	0x01FA, r24
    3058:	90 93 fb 01 	sts	0x01FB, r25
				
				mean_I_err[memory-1]=err_old;
    305c:	8b 89       	ldd	r24, Y+19	; 0x13
    305e:	9c 89       	ldd	r25, Y+20	; 0x14
    3060:	ad 89       	ldd	r26, Y+21	; 0x15
    3062:	be 89       	ldd	r27, Y+22	; 0x16
    3064:	ee ee       	ldi	r30, 0xEE	; 238
    3066:	f1 e0       	ldi	r31, 0x01	; 1
    3068:	80 83       	st	Z, r24
    306a:	91 83       	std	Z+1, r25	; 0x01
    306c:	a2 83       	std	Z+2, r26	; 0x02
    306e:	b3 83       	std	Z+3, r27	; 0x03
    3070:	ea ec       	ldi	r30, 0xCA	; 202
    3072:	f1 e0       	ldi	r31, 0x01	; 1
				for (int i=0;i< memory-1;i++){
					mean_I_err[i]=(double)mean_I_err[i+1];
    3074:	84 81       	ldd	r24, Z+4	; 0x04
    3076:	95 81       	ldd	r25, Z+5	; 0x05
    3078:	a6 81       	ldd	r26, Z+6	; 0x06
    307a:	b7 81       	ldd	r27, Z+7	; 0x07
    307c:	81 93       	st	Z+, r24
    307e:	91 93       	st	Z+, r25
    3080:	a1 93       	st	Z+, r26
    3082:	b1 93       	st	Z+, r27
				err_old=err;
				err=prof.PeakHeatTemp-tmp;
				P_err=err;
				
				mean_I_err[memory-1]=err_old;
				for (int i=0;i< memory-1;i++){
    3084:	21 e0       	ldi	r18, 0x01	; 1
    3086:	ee 3e       	cpi	r30, 0xEE	; 238
    3088:	f2 07       	cpc	r31, r18
    308a:	a1 f7       	brne	.-24     	; 0x3074 <_Z7ramp_upRjS_S_RbS0_+0x6c2>
    308c:	0f 2e       	mov	r0, r31
    308e:	fa ec       	ldi	r31, 0xCA	; 202
    3090:	af 2e       	mov	r10, r31
    3092:	f1 e0       	ldi	r31, 0x01	; 1
    3094:	bf 2e       	mov	r11, r31
    3096:	f0 2d       	mov	r31, r0
    3098:	21 2c       	mov	r2, r1
    309a:	31 2c       	mov	r3, r1
    309c:	00 e0       	ldi	r16, 0x00	; 0
    309e:	10 e0       	ldi	r17, 0x00	; 0
					mean_I_err[i]=(double)mean_I_err[i+1];
				}
				mean_I_error=0;
				for (int i=0;i< memory;i++){
					mean_I_error+=(double)mean_I_err[i];
    30a0:	d5 01       	movw	r26, r10
    30a2:	2d 91       	ld	r18, X+
    30a4:	3d 91       	ld	r19, X+
    30a6:	4d 91       	ld	r20, X+
    30a8:	5d 91       	ld	r21, X+
    30aa:	5d 01       	movw	r10, r26
    30ac:	62 2d       	mov	r22, r2
    30ae:	73 2d       	mov	r23, r3
    30b0:	80 2f       	mov	r24, r16
    30b2:	91 2f       	mov	r25, r17
    30b4:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
				mean_I_err[memory-1]=err_old;
				for (int i=0;i< memory-1;i++){
					mean_I_err[i]=(double)mean_I_err[i+1];
				}
				mean_I_error=0;
				for (int i=0;i< memory;i++){
    30b8:	b2 ef       	ldi	r27, 0xF2	; 242
    30ba:	ab 16       	cp	r10, r27
    30bc:	b1 e0       	ldi	r27, 0x01	; 1
    30be:	bb 06       	cpc	r11, r27
    30c0:	29 f0       	breq	.+10     	; 0x30cc <_Z7ramp_upRjS_S_RbS0_+0x71a>
					mean_I_error+=(double)mean_I_err[i];
    30c2:	26 2e       	mov	r2, r22
    30c4:	37 2e       	mov	r3, r23
    30c6:	08 2f       	mov	r16, r24
    30c8:	19 2f       	mov	r17, r25
    30ca:	ea cf       	rjmp	.-44     	; 0x30a0 <_Z7ramp_upRjS_S_RbS0_+0x6ee>
    30cc:	26 2e       	mov	r2, r22
    30ce:	37 2e       	mov	r3, r23
    30d0:	08 2f       	mov	r16, r24
    30d2:	19 2f       	mov	r17, r25
    30d4:	86 2f       	mov	r24, r22
    30d6:	93 2d       	mov	r25, r3
    30d8:	a0 2f       	mov	r26, r16
    30da:	b1 2f       	mov	r27, r17
    30dc:	80 93 f2 01 	sts	0x01F2, r24
    30e0:	90 93 f3 01 	sts	0x01F3, r25
    30e4:	a0 93 f4 01 	sts	0x01F4, r26
    30e8:	b0 93 f5 01 	sts	0x01F5, r27
				}				
				I_err=mean_I_error;
    30ec:	80 93 fc 01 	sts	0x01FC, r24
    30f0:	90 93 fd 01 	sts	0x01FD, r25
    30f4:	a0 93 fe 01 	sts	0x01FE, r26
    30f8:	b0 93 ff 01 	sts	0x01FF, r27
				//I_err+=err_old
				D_err=err-err_old;				
    30fc:	2b 89       	ldd	r18, Y+19	; 0x13
    30fe:	3c 89       	ldd	r19, Y+20	; 0x14
    3100:	4d 89       	ldd	r20, Y+21	; 0x15
    3102:	5e 89       	ldd	r21, Y+22	; 0x16
    3104:	c7 01       	movw	r24, r14
    3106:	b6 01       	movw	r22, r12
    3108:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    310c:	6b 8b       	std	Y+19, r22	; 0x13
    310e:	7c 8b       	std	Y+20, r23	; 0x14
    3110:	8d 8b       	std	Y+21, r24	; 0x15
    3112:	9e 8b       	std	Y+22, r25	; 0x16
    3114:	60 93 08 02 	sts	0x0208, r22
    3118:	70 93 09 02 	sts	0x0209, r23
    311c:	80 93 0a 02 	sts	0x020A, r24
    3120:	90 93 0b 02 	sts	0x020B, r25
				
				if(err > error_rate || err < -error_rate){
    3124:	80 91 09 01 	lds	r24, 0x0109
    3128:	90 91 0a 01 	lds	r25, 0x010A
    312c:	a0 91 0b 01 	lds	r26, 0x010B
    3130:	b0 91 0c 01 	lds	r27, 0x010C
    3134:	89 a3       	std	Y+33, r24	; 0x21
    3136:	9a a3       	std	Y+34, r25	; 0x22
    3138:	ab a3       	std	Y+35, r26	; 0x23
    313a:	bc a3       	std	Y+36, r27	; 0x24
    313c:	9c 01       	movw	r18, r24
    313e:	ad 01       	movw	r20, r26
    3140:	c7 01       	movw	r24, r14
    3142:	b6 01       	movw	r22, r12
    3144:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    3148:	18 16       	cp	r1, r24
    314a:	5c f0       	brlt	.+22     	; 0x3162 <_Z7ramp_upRjS_S_RbS0_+0x7b0>
    314c:	29 a1       	ldd	r18, Y+33	; 0x21
    314e:	3a a1       	ldd	r19, Y+34	; 0x22
    3150:	4b a1       	ldd	r20, Y+35	; 0x23
    3152:	5c a1       	ldd	r21, Y+36	; 0x24
    3154:	50 58       	subi	r21, 0x80	; 128
    3156:	c7 01       	movw	r24, r14
    3158:	b6 01       	movw	r22, r12
    315a:	0e 94 57 24 	call	0x48ae	; 0x48ae <__cmpsf2>
    315e:	88 23       	and	r24, r24
    3160:	d4 f5       	brge	.+116    	; 0x31d6 <_Z7ramp_upRjS_S_RbS0_+0x824>
					PID=P_val*P_err + I_val*I_err + D_val*D_err;
    3162:	a7 01       	movw	r20, r14
    3164:	96 01       	movw	r18, r12
    3166:	c7 01       	movw	r24, r14
    3168:	b6 01       	movw	r22, r12
    316a:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    316e:	6b 01       	movw	r12, r22
    3170:	7c 01       	movw	r14, r24
    3172:	2d ec       	ldi	r18, 0xCD	; 205
    3174:	3c ec       	ldi	r19, 0xCC	; 204
    3176:	4c e4       	ldi	r20, 0x4C	; 76
    3178:	5f e3       	ldi	r21, 0x3F	; 63
    317a:	62 2d       	mov	r22, r2
    317c:	73 2d       	mov	r23, r3
    317e:	80 2f       	mov	r24, r16
    3180:	91 2f       	mov	r25, r17
    3182:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    3186:	9b 01       	movw	r18, r22
    3188:	ac 01       	movw	r20, r24
    318a:	c7 01       	movw	r24, r14
    318c:	b6 01       	movw	r22, r12
    318e:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    3192:	6b 01       	movw	r12, r22
    3194:	7c 01       	movw	r14, r24
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	5f e3       	ldi	r21, 0x3F	; 63
    319e:	6b 89       	ldd	r22, Y+19	; 0x13
    31a0:	7c 89       	ldd	r23, Y+20	; 0x14
    31a2:	8d 89       	ldd	r24, Y+21	; 0x15
    31a4:	9e 89       	ldd	r25, Y+22	; 0x16
    31a6:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    31aa:	9b 01       	movw	r18, r22
    31ac:	ac 01       	movw	r20, r24
    31ae:	c7 01       	movw	r24, r14
    31b0:	b6 01       	movw	r22, r12
    31b2:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    31b6:	60 93 0c 02 	sts	0x020C, r22
    31ba:	70 93 0d 02 	sts	0x020D, r23
    31be:	80 93 0e 02 	sts	0x020E, r24
    31c2:	90 93 0f 02 	sts	0x020F, r25
					duty11=round(PID);	
    31c6:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    31ca:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    31ce:	70 93 f7 01 	sts	0x01F7, r23
    31d2:	60 93 f6 01 	sts	0x01F6, r22
				//ftoa(I_err,xxyx3,5);
				//drawString( 100,40,xxyx3, BLACK, WHITE, 2);
				//ftoa(D_err,xxyx4,5);
				//drawString( 100,60,xxyx4, BLACK, WHITE, 2);
				
				if (duty11 > 0){
    31d6:	80 91 f6 01 	lds	r24, 0x01F6
    31da:	90 91 f7 01 	lds	r25, 0x01F7
    31de:	18 16       	cp	r1, r24
    31e0:	19 06       	cpc	r1, r25
    31e2:	2c f0       	brlt	.+10     	; 0x31ee <_Z7ramp_upRjS_S_RbS0_+0x83c>
				duty=duty11;
				} 
				else if (duty11 < 0){
    31e4:	99 23       	and	r25, r25
    31e6:	0c f4       	brge	.+2      	; 0x31ea <_Z7ramp_upRjS_S_RbS0_+0x838>
    31e8:	5c c0       	rjmp	.+184    	; 0x32a2 <_Z7ramp_upRjS_S_RbS0_+0x8f0>
    31ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
					duty=0;
				} 				
				if ( duty > ICR1 ){
    31ee:	a6 e8       	ldi	r26, 0x86	; 134
    31f0:	b0 e0       	ldi	r27, 0x00	; 0
    31f2:	2d 91       	ld	r18, X+
    31f4:	3c 91       	ld	r19, X
    31f6:	11 97       	sbiw	r26, 0x01	; 1
    31f8:	28 17       	cp	r18, r24
    31fa:	39 07       	cpc	r19, r25
    31fc:	28 f4       	brcc	.+10     	; 0x3208 <_Z7ramp_upRjS_S_RbS0_+0x856>
					duty = ICR1;
    31fe:	ed 91       	ld	r30, X+
    3200:	fc 91       	ld	r31, X
    3202:	fc 8f       	std	Y+28, r31	; 0x1c
    3204:	eb 8f       	std	Y+27, r30	; 0x1b
    3206:	02 c0       	rjmp	.+4      	; 0x320c <_Z7ramp_upRjS_S_RbS0_+0x85a>
    3208:	9c 8f       	std	Y+28, r25	; 0x1c
    320a:	8b 8f       	std	Y+27, r24	; 0x1b
				}		
				OCR1A=duty;
    320c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    320e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3210:	a8 e8       	ldi	r26, 0x88	; 136
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	11 96       	adiw	r26, 0x01	; 1
    3216:	fc 93       	st	X, r31
    3218:	ee 93       	st	-X, r30
			
				intToStr(duty, duty1 ,3);
    321a:	43 e0       	ldi	r20, 0x03	; 3
    321c:	50 e0       	ldi	r21, 0x00	; 0
    321e:	be 01       	movw	r22, r28
    3220:	6f 5f       	subi	r22, 0xFF	; 255
    3222:	7f 4f       	sbci	r23, 0xFF	; 255
    3224:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3226:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3228:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
				drawString( 70, 232, cycle112, BLACK, YELLOW, 1); //x and y are inverted
    322c:	ee 24       	eor	r14, r14
    322e:	e3 94       	inc	r14
    3230:	00 ee       	ldi	r16, 0xE0	; 224
    3232:	1f ef       	ldi	r17, 0xFF	; 255
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	42 e0       	ldi	r20, 0x02	; 2
    323a:	51 e0       	ldi	r21, 0x01	; 1
    323c:	68 ee       	ldi	r22, 0xE8	; 232
    323e:	70 e0       	ldi	r23, 0x00	; 0
    3240:	86 e4       	ldi	r24, 0x46	; 70
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
				drawString( 100, 232, duty1, BLACK, YELLOW, 1); //x and y are inverted
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	ae 01       	movw	r20, r28
    324e:	4f 5f       	subi	r20, 0xFF	; 255
    3250:	5f 4f       	sbci	r21, 0xFF	; 255
    3252:	68 ee       	ldi	r22, 0xE8	; 232
    3254:	70 e0       	ldi	r23, 0x00	; 0
    3256:	84 e6       	ldi	r24, 0x64	; 100
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
				drawString( 118, 232, percentmark, BLACK, YELLOW, 1); //x and y are inverted
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	40 e0       	ldi	r20, 0x00	; 0
    3264:	51 e0       	ldi	r21, 0x01	; 1
    3266:	68 ee       	ldi	r22, 0xE8	; 232
    3268:	70 e0       	ldi	r23, 0x00	; 0
    326a:	86 e7       	ldi	r24, 0x76	; 118
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
				
	}
	uint16_t dooh=timers_help;
	timers_help=0;
	slope_yx =0; //keep temp same
	while(timers_help < time){
    3272:	af 89       	ldd	r26, Y+23	; 0x17
    3274:	b8 8d       	ldd	r27, Y+24	; 0x18
    3276:	2d 91       	ld	r18, X+
    3278:	3c 91       	ld	r19, X
    327a:	e9 8d       	ldd	r30, Y+25	; 0x19
    327c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    327e:	80 81       	ld	r24, Z
    3280:	91 81       	ldd	r25, Z+1	; 0x01
    3282:	28 17       	cp	r18, r24
    3284:	39 07       	cpc	r19, r25
    3286:	08 f4       	brcc	.+2      	; 0x328a <_Z7ramp_upRjS_S_RbS0_+0x8d8>
    3288:	34 ce       	rjmp	.-920    	; 0x2ef2 <_Z7ramp_upRjS_S_RbS0_+0x540>
				drawString( 100, 232, duty1, BLACK, YELLOW, 1); //x and y are inverted
				drawString( 118, 232, percentmark, BLACK, YELLOW, 1); //x and y are inverted
		}
			
	}
	OCR1A=0; //cooldown
    328a:	10 92 89 00 	sts	0x0089, r1
    328e:	10 92 88 00 	sts	0x0088, r1
return;
    3292:	0e c0       	rjmp	.+28     	; 0x32b0 <_Z7ramp_upRjS_S_RbS0_+0x8fe>
				duty=duty11;
				} 
				else if (duty11 < 0){
					duty=0;
				} 				
				if ( duty > ICR1 ){
    3294:	a6 e8       	ldi	r26, 0x86	; 134
    3296:	b0 e0       	ldi	r27, 0x00	; 0
    3298:	8d 91       	ld	r24, X+
    329a:	9c 91       	ld	r25, X
				
				if (duty11 > 0){
				duty=duty11;
				} 
				else if (duty11 < 0){
					duty=0;
    329c:	1b 8e       	std	Y+27, r1	; 0x1b
    329e:	1c 8e       	std	Y+28, r1	; 0x1c
    32a0:	e3 cd       	rjmp	.-1082   	; 0x2e68 <_Z7ramp_upRjS_S_RbS0_+0x4b6>
				duty=duty11;
				} 
				else if (duty11 < 0){
					duty=0;
				} 				
				if ( duty > ICR1 ){
    32a2:	e6 e8       	ldi	r30, 0x86	; 134
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 81       	ld	r24, Z
    32a8:	91 81       	ldd	r25, Z+1	; 0x01
				
				if (duty11 > 0){
				duty=duty11;
				} 
				else if (duty11 < 0){
					duty=0;
    32aa:	1b 8e       	std	Y+27, r1	; 0x1b
    32ac:	1c 8e       	std	Y+28, r1	; 0x1c
    32ae:	ae cf       	rjmp	.-164    	; 0x320c <_Z7ramp_upRjS_S_RbS0_+0x85a>
		}
			
	}
	OCR1A=0; //cooldown
return;
}
    32b0:	ac 96       	adiw	r28, 0x2c	; 44
    32b2:	0f b6       	in	r0, 0x3f	; 63
    32b4:	f8 94       	cli
    32b6:	de bf       	out	0x3e, r29	; 62
    32b8:	0f be       	out	0x3f, r0	; 63
    32ba:	cd bf       	out	0x3d, r28	; 61
    32bc:	df 91       	pop	r29
    32be:	cf 91       	pop	r28
    32c0:	1f 91       	pop	r17
    32c2:	0f 91       	pop	r16
    32c4:	ff 90       	pop	r15
    32c6:	ef 90       	pop	r14
    32c8:	df 90       	pop	r13
    32ca:	cf 90       	pop	r12
    32cc:	bf 90       	pop	r11
    32ce:	af 90       	pop	r10
    32d0:	9f 90       	pop	r9
    32d2:	8f 90       	pop	r8
    32d4:	7f 90       	pop	r7
    32d6:	6f 90       	pop	r6
    32d8:	5f 90       	pop	r5
    32da:	4f 90       	pop	r4
    32dc:	3f 90       	pop	r3
    32de:	2f 90       	pop	r2
    32e0:	08 95       	ret

000032e2 <_Z18DrawTempDisplayRefv>:


//reference profile pic
void DrawTempDisplayRef(){
    32e2:	2f 92       	push	r2
    32e4:	3f 92       	push	r3
    32e6:	4f 92       	push	r4
    32e8:	5f 92       	push	r5
    32ea:	6f 92       	push	r6
    32ec:	7f 92       	push	r7
    32ee:	8f 92       	push	r8
    32f0:	9f 92       	push	r9
    32f2:	af 92       	push	r10
    32f4:	bf 92       	push	r11
    32f6:	cf 92       	push	r12
    32f8:	df 92       	push	r13
    32fa:	ef 92       	push	r14
    32fc:	ff 92       	push	r15
    32fe:	0f 93       	push	r16
    3300:	1f 93       	push	r17
    3302:	cf 93       	push	r28
    3304:	df 93       	push	r29
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	6a 97       	sbiw	r28, 0x1a	; 26
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	cd bf       	out	0x3d, r28	; 61
	
	//profile times and added 30seconds for cooling whole 320 pixels for time
	double req_time=(double)320/(prof.PreHeatTime+prof.SoakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+30); 
    3316:	e0 e8       	ldi	r30, 0x80	; 128
    3318:	f1 e0       	ldi	r31, 0x01	; 1
    331a:	80 81       	ld	r24, Z
    331c:	91 81       	ldd	r25, Z+1	; 0x01
    331e:	0f 2e       	mov	r0, r31
    3320:	f8 e7       	ldi	r31, 0x78	; 120
    3322:	cf 2e       	mov	r12, r31
    3324:	f1 e0       	ldi	r31, 0x01	; 1
    3326:	df 2e       	mov	r13, r31
    3328:	f0 2d       	mov	r31, r0
    332a:	0f 2e       	mov	r0, r31
    332c:	fc e7       	ldi	r31, 0x7C	; 124
    332e:	2f 2e       	mov	r2, r31
    3330:	f1 e0       	ldi	r31, 0x01	; 1
    3332:	3f 2e       	mov	r3, r31
    3334:	f0 2d       	mov	r31, r0
    3336:	f6 01       	movw	r30, r12
    3338:	60 81       	ld	r22, Z
    333a:	71 81       	ldd	r23, Z+1	; 0x01
    333c:	f1 01       	movw	r30, r2
    333e:	20 81       	ld	r18, Z
    3340:	31 81       	ldd	r19, Z+1	; 0x01
    3342:	62 0f       	add	r22, r18
    3344:	73 1f       	adc	r23, r19
    3346:	62 5e       	subi	r22, 0xE2	; 226
    3348:	7f 4f       	sbci	r23, 0xFF	; 255
    334a:	68 0f       	add	r22, r24
    334c:	79 1f       	adc	r23, r25
    334e:	68 0f       	add	r22, r24
    3350:	79 1f       	adc	r23, r25
    3352:	68 0f       	add	r22, r24
    3354:	79 1f       	adc	r23, r25
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    335e:	9b 01       	movw	r18, r22
    3360:	ac 01       	movw	r20, r24
    3362:	60 e0       	ldi	r22, 0x00	; 0
    3364:	70 e0       	ldi	r23, 0x00	; 0
    3366:	80 ea       	ldi	r24, 0xA0	; 160
    3368:	93 e4       	ldi	r25, 0x43	; 67
    336a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
    336e:	6b 87       	std	Y+11, r22	; 0x0b
    3370:	7c 87       	std	Y+12, r23	; 0x0c
    3372:	8d 87       	std	Y+13, r24	; 0x0d
    3374:	9e 87       	std	Y+14, r25	; 0x0e
	double req_temp=(double)220/(prof.PeakHeatTemp+35); //that's what we should need from display 220 pixels for temp
    3376:	ee e7       	ldi	r30, 0x7E	; 126
    3378:	f1 e0       	ldi	r31, 0x01	; 1
    337a:	60 81       	ld	r22, Z
    337c:	71 81       	ldd	r23, Z+1	; 0x01
    337e:	6d 5d       	subi	r22, 0xDD	; 221
    3380:	7f 4f       	sbci	r23, 0xFF	; 255
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    338a:	9b 01       	movw	r18, r22
    338c:	ac 01       	movw	r20, r24
    338e:	60 e0       	ldi	r22, 0x00	; 0
    3390:	70 e0       	ldi	r23, 0x00	; 0
    3392:	8c e5       	ldi	r24, 0x5C	; 92
    3394:	93 e4       	ldi	r25, 0x43	; 67
    3396:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
    339a:	4b 01       	movw	r8, r22
    339c:	5c 01       	movw	r10, r24

//temperature scale here
	char temps[10];
	intToStr(50, temps ,3);
    339e:	43 e0       	ldi	r20, 0x03	; 3
    33a0:	50 e0       	ldi	r21, 0x00	; 0
    33a2:	be 01       	movw	r22, r28
    33a4:	6f 5f       	subi	r22, 0xFF	; 255
    33a6:	7f 4f       	sbci	r23, 0xFF	; 255
    33a8:	82 e3       	ldi	r24, 0x32	; 50
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
	
	drawString( 2,240-(50*req_temp)+2, temps, TEMP_SCALE, WHITE, 1);
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	48 e4       	ldi	r20, 0x48	; 72
    33b6:	52 e4       	ldi	r21, 0x42	; 66
    33b8:	c5 01       	movw	r24, r10
    33ba:	b4 01       	movw	r22, r8
    33bc:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    33c0:	9b 01       	movw	r18, r22
    33c2:	ac 01       	movw	r20, r24
    33c4:	60 e0       	ldi	r22, 0x00	; 0
    33c6:	70 e0       	ldi	r23, 0x00	; 0
    33c8:	80 e7       	ldi	r24, 0x70	; 112
    33ca:	93 e4       	ldi	r25, 0x43	; 67
    33cc:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    33d0:	2b 01       	movw	r4, r22
    33d2:	3c 01       	movw	r6, r24
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e0       	ldi	r20, 0x00	; 0
    33da:	50 e4       	ldi	r21, 0x40	; 64
    33dc:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    33e0:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    33e4:	ee 24       	eor	r14, r14
    33e6:	e3 94       	inc	r14
    33e8:	0f ef       	ldi	r16, 0xFF	; 255
    33ea:	1f ef       	ldi	r17, 0xFF	; 255
    33ec:	2f ef       	ldi	r18, 0xFF	; 255
    33ee:	37 e0       	ldi	r19, 0x07	; 7
    33f0:	ae 01       	movw	r20, r28
    33f2:	4f 5f       	subi	r20, 0xFF	; 255
    33f4:	5f 4f       	sbci	r21, 0xFF	; 255
    33f6:	82 e0       	ldi	r24, 0x02	; 2
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
	drawFastHLine(0, 240-(50*req_temp), 319, TEMP_SCALE);
    33fe:	c3 01       	movw	r24, r6
    3400:	b2 01       	movw	r22, r4
    3402:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    3406:	6f 87       	std	Y+15, r22	; 0x0f
    3408:	78 8b       	std	Y+16, r23	; 0x10
    340a:	89 8b       	std	Y+17, r24	; 0x11
    340c:	9a 8b       	std	Y+18, r25	; 0x12
    340e:	2f ef       	ldi	r18, 0xFF	; 255
    3410:	37 e0       	ldi	r19, 0x07	; 7
    3412:	4f e3       	ldi	r20, 0x3F	; 63
    3414:	51 e0       	ldi	r21, 0x01	; 1
    3416:	6f 85       	ldd	r22, Y+15	; 0x0f
    3418:	78 89       	ldd	r23, Y+16	; 0x10
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	0e 94 3c 05 	call	0xa78	; 0xa78 <_Z13drawFastHLineiiij>
		
	intToStr(100, temps ,3);
    3422:	43 e0       	ldi	r20, 0x03	; 3
    3424:	50 e0       	ldi	r21, 0x00	; 0
    3426:	be 01       	movw	r22, r28
    3428:	6f 5f       	subi	r22, 0xFF	; 255
    342a:	7f 4f       	sbci	r23, 0xFF	; 255
    342c:	84 e6       	ldi	r24, 0x64	; 100
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
	drawString( 2,240-(100*req_temp)+2, temps, TEMP_SCALE,WHITE, 1);
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	48 ec       	ldi	r20, 0xC8	; 200
    343a:	52 e4       	ldi	r21, 0x42	; 66
    343c:	c5 01       	movw	r24, r10
    343e:	b4 01       	movw	r22, r8
    3440:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    3444:	9b 01       	movw	r18, r22
    3446:	ac 01       	movw	r20, r24
    3448:	60 e0       	ldi	r22, 0x00	; 0
    344a:	70 e0       	ldi	r23, 0x00	; 0
    344c:	80 e7       	ldi	r24, 0x70	; 112
    344e:	93 e4       	ldi	r25, 0x43	; 67
    3450:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    3454:	2b 01       	movw	r4, r22
    3456:	3c 01       	movw	r6, r24
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	40 e0       	ldi	r20, 0x00	; 0
    345e:	50 e4       	ldi	r21, 0x40	; 64
    3460:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    3464:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    3468:	2f ef       	ldi	r18, 0xFF	; 255
    346a:	37 e0       	ldi	r19, 0x07	; 7
    346c:	ae 01       	movw	r20, r28
    346e:	4f 5f       	subi	r20, 0xFF	; 255
    3470:	5f 4f       	sbci	r21, 0xFF	; 255
    3472:	82 e0       	ldi	r24, 0x02	; 2
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
	drawFastHLine(0, 240-(100*req_temp), 319, TEMP_SCALE);
    347a:	c3 01       	movw	r24, r6
    347c:	b2 01       	movw	r22, r4
    347e:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    3482:	2f ef       	ldi	r18, 0xFF	; 255
    3484:	37 e0       	ldi	r19, 0x07	; 7
    3486:	4f e3       	ldi	r20, 0x3F	; 63
    3488:	51 e0       	ldi	r21, 0x01	; 1
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	0e 94 3c 05 	call	0xa78	; 0xa78 <_Z13drawFastHLineiiij>
	
	intToStr(150, temps ,3);
    3492:	43 e0       	ldi	r20, 0x03	; 3
    3494:	50 e0       	ldi	r21, 0x00	; 0
    3496:	be 01       	movw	r22, r28
    3498:	6f 5f       	subi	r22, 0xFF	; 255
    349a:	7f 4f       	sbci	r23, 0xFF	; 255
    349c:	86 e9       	ldi	r24, 0x96	; 150
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
	drawString( 2,240-(150*req_temp)+2, temps, TEMP_SCALE, WHITE, 1);
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	46 e1       	ldi	r20, 0x16	; 22
    34aa:	53 e4       	ldi	r21, 0x43	; 67
    34ac:	c5 01       	movw	r24, r10
    34ae:	b4 01       	movw	r22, r8
    34b0:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    34b4:	9b 01       	movw	r18, r22
    34b6:	ac 01       	movw	r20, r24
    34b8:	60 e0       	ldi	r22, 0x00	; 0
    34ba:	70 e0       	ldi	r23, 0x00	; 0
    34bc:	80 e7       	ldi	r24, 0x70	; 112
    34be:	93 e4       	ldi	r25, 0x43	; 67
    34c0:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    34c4:	2b 01       	movw	r4, r22
    34c6:	3c 01       	movw	r6, r24
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	40 e0       	ldi	r20, 0x00	; 0
    34ce:	50 e4       	ldi	r21, 0x40	; 64
    34d0:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    34d4:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    34d8:	2f ef       	ldi	r18, 0xFF	; 255
    34da:	37 e0       	ldi	r19, 0x07	; 7
    34dc:	ae 01       	movw	r20, r28
    34de:	4f 5f       	subi	r20, 0xFF	; 255
    34e0:	5f 4f       	sbci	r21, 0xFF	; 255
    34e2:	82 e0       	ldi	r24, 0x02	; 2
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
	drawFastHLine(0, 240-(150*req_temp), 319, TEMP_SCALE);
    34ea:	c3 01       	movw	r24, r6
    34ec:	b2 01       	movw	r22, r4
    34ee:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    34f2:	2f ef       	ldi	r18, 0xFF	; 255
    34f4:	37 e0       	ldi	r19, 0x07	; 7
    34f6:	4f e3       	ldi	r20, 0x3F	; 63
    34f8:	51 e0       	ldi	r21, 0x01	; 1
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	0e 94 3c 05 	call	0xa78	; 0xa78 <_Z13drawFastHLineiiij>
	
	intToStr(200, temps ,3);
    3502:	43 e0       	ldi	r20, 0x03	; 3
    3504:	50 e0       	ldi	r21, 0x00	; 0
    3506:	be 01       	movw	r22, r28
    3508:	6f 5f       	subi	r22, 0xFF	; 255
    350a:	7f 4f       	sbci	r23, 0xFF	; 255
    350c:	88 ec       	ldi	r24, 0xC8	; 200
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
	drawString( 2,240-(200*req_temp)+2, temps, TEMP_SCALE, WHITE, 1);
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	48 e4       	ldi	r20, 0x48	; 72
    351a:	53 e4       	ldi	r21, 0x43	; 67
    351c:	c5 01       	movw	r24, r10
    351e:	b4 01       	movw	r22, r8
    3520:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    3524:	9b 01       	movw	r18, r22
    3526:	ac 01       	movw	r20, r24
    3528:	60 e0       	ldi	r22, 0x00	; 0
    352a:	70 e0       	ldi	r23, 0x00	; 0
    352c:	80 e7       	ldi	r24, 0x70	; 112
    352e:	93 e4       	ldi	r25, 0x43	; 67
    3530:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    3534:	2b 01       	movw	r4, r22
    3536:	3c 01       	movw	r6, r24
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	40 e0       	ldi	r20, 0x00	; 0
    353e:	50 e4       	ldi	r21, 0x40	; 64
    3540:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    3544:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    3548:	2f ef       	ldi	r18, 0xFF	; 255
    354a:	37 e0       	ldi	r19, 0x07	; 7
    354c:	ae 01       	movw	r20, r28
    354e:	4f 5f       	subi	r20, 0xFF	; 255
    3550:	5f 4f       	sbci	r21, 0xFF	; 255
    3552:	82 e0       	ldi	r24, 0x02	; 2
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
	drawFastHLine(0, 240-(200*req_temp), 319, TEMP_SCALE);
    355a:	c3 01       	movw	r24, r6
    355c:	b2 01       	movw	r22, r4
    355e:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    3562:	2f ef       	ldi	r18, 0xFF	; 255
    3564:	37 e0       	ldi	r19, 0x07	; 7
    3566:	4f e3       	ldi	r20, 0x3F	; 63
    3568:	51 e0       	ldi	r21, 0x01	; 1
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	0e 94 3c 05 	call	0xa78	; 0xa78 <_Z13drawFastHLineiiij>
	
	intToStr(250, temps ,3);
    3572:	43 e0       	ldi	r20, 0x03	; 3
    3574:	50 e0       	ldi	r21, 0x00	; 0
    3576:	be 01       	movw	r22, r28
    3578:	6f 5f       	subi	r22, 0xFF	; 255
    357a:	7f 4f       	sbci	r23, 0xFF	; 255
    357c:	8a ef       	ldi	r24, 0xFA	; 250
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
	drawString( 2,240-(250*req_temp)+2, temps, TEMP_SCALE, WHITE, 1);
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	4a e7       	ldi	r20, 0x7A	; 122
    358a:	53 e4       	ldi	r21, 0x43	; 67
    358c:	c5 01       	movw	r24, r10
    358e:	b4 01       	movw	r22, r8
    3590:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    3594:	9b 01       	movw	r18, r22
    3596:	ac 01       	movw	r20, r24
    3598:	60 e0       	ldi	r22, 0x00	; 0
    359a:	70 e0       	ldi	r23, 0x00	; 0
    359c:	80 e7       	ldi	r24, 0x70	; 112
    359e:	93 e4       	ldi	r25, 0x43	; 67
    35a0:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    35a4:	2b 01       	movw	r4, r22
    35a6:	3c 01       	movw	r6, r24
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	50 e4       	ldi	r21, 0x40	; 64
    35b0:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    35b4:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    35b8:	2f ef       	ldi	r18, 0xFF	; 255
    35ba:	37 e0       	ldi	r19, 0x07	; 7
    35bc:	ae 01       	movw	r20, r28
    35be:	4f 5f       	subi	r20, 0xFF	; 255
    35c0:	5f 4f       	sbci	r21, 0xFF	; 255
    35c2:	82 e0       	ldi	r24, 0x02	; 2
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
	drawFastHLine(0, 240-(250*req_temp), 319, TEMP_SCALE);
    35ca:	c3 01       	movw	r24, r6
    35cc:	b2 01       	movw	r22, r4
    35ce:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    35d2:	2f ef       	ldi	r18, 0xFF	; 255
    35d4:	37 e0       	ldi	r19, 0x07	; 7
    35d6:	4f e3       	ldi	r20, 0x3F	; 63
    35d8:	51 e0       	ldi	r21, 0x01	; 1
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	0e 94 3c 05 	call	0xa78	; 0xa78 <_Z13drawFastHLineiiij>
	
	//here starts profile drawing
	uint16_t start_temp = MAX31855_readCelsius();
    35e2:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    35e6:	6f 8b       	std	Y+23, r22	; 0x17
    35e8:	78 8f       	std	Y+24, r23	; 0x18
    35ea:	89 8f       	std	Y+25, r24	; 0x19
    35ec:	9a 8f       	std	Y+26, r25	; 0x1a
	
	uint16_t PreHeatTime1= round(prof.PreHeatTime*req_time);
    35ee:	f6 01       	movw	r30, r12
    35f0:	60 81       	ld	r22, Z
    35f2:	71 81       	ldd	r23, Z+1	; 0x01
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    35fc:	2b 85       	ldd	r18, Y+11	; 0x0b
    35fe:	3c 85       	ldd	r19, Y+12	; 0x0c
    3600:	4d 85       	ldd	r20, Y+13	; 0x0d
    3602:	5e 85       	ldd	r21, Y+14	; 0x0e
    3604:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    3608:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    360c:	0e 94 c8 24 	call	0x4990	; 0x4990 <__fixunssfsi>
    3610:	2b 01       	movw	r4, r22
    3612:	3c 01       	movw	r6, r24
	uint16_t SoakHeatTime1= round(prof.SoakHeatTime*req_time);
    3614:	f1 01       	movw	r30, r2
    3616:	60 81       	ld	r22, Z
    3618:	71 81       	ldd	r23, Z+1	; 0x01
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    3622:	2b 85       	ldd	r18, Y+11	; 0x0b
    3624:	3c 85       	ldd	r19, Y+12	; 0x0c
    3626:	4d 85       	ldd	r20, Y+13	; 0x0d
    3628:	5e 85       	ldd	r21, Y+14	; 0x0e
    362a:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    362e:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    3632:	6b 01       	movw	r12, r22
    3634:	7c 01       	movw	r14, r24
	uint16_t PeakHeatTime1= round(prof.PeakHeatTime*req_time);
    3636:	e0 e8       	ldi	r30, 0x80	; 128
    3638:	f1 e0       	ldi	r31, 0x01	; 1
    363a:	60 81       	ld	r22, Z
    363c:	71 81       	ldd	r23, Z+1	; 0x01
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    3646:	2b 85       	ldd	r18, Y+11	; 0x0b
    3648:	3c 85       	ldd	r19, Y+12	; 0x0c
    364a:	4d 85       	ldd	r20, Y+13	; 0x0d
    364c:	5e 85       	ldd	r21, Y+14	; 0x0e
    364e:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    3652:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    3656:	0e 94 c8 24 	call	0x4990	; 0x4990 <__fixunssfsi>
    365a:	6b 87       	std	Y+11, r22	; 0x0b
    365c:	7c 87       	std	Y+12, r23	; 0x0c
    365e:	8d 87       	std	Y+13, r24	; 0x0d
    3660:	9e 87       	std	Y+14, r25	; 0x0e
	
	PreHeatTemp1= round(prof.PreHeatTemp*req_temp);
    3662:	60 91 76 01 	lds	r22, 0x0176
    3666:	70 91 77 01 	lds	r23, 0x0177
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    3672:	a5 01       	movw	r20, r10
    3674:	94 01       	movw	r18, r8
    3676:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    367a:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    367e:	0e 94 c8 24 	call	0x4990	; 0x4990 <__fixunssfsi>
    3682:	6b 8b       	std	Y+19, r22	; 0x13
    3684:	7c 8b       	std	Y+20, r23	; 0x14
    3686:	8d 8b       	std	Y+21, r24	; 0x15
    3688:	9e 8b       	std	Y+22, r25	; 0x16
    368a:	2b 89       	ldd	r18, Y+19	; 0x13
    368c:	3c 89       	ldd	r19, Y+20	; 0x14
    368e:	30 93 bf 01 	sts	0x01BF, r19
    3692:	20 93 be 01 	sts	0x01BE, r18
	SoakHeatTemp1= round(prof.SoakHeatTemp*req_temp);
    3696:	60 91 7a 01 	lds	r22, 0x017A
    369a:	70 91 7b 01 	lds	r23, 0x017B
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    36a6:	a5 01       	movw	r20, r10
    36a8:	94 01       	movw	r18, r8
    36aa:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    36ae:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    36b2:	0e 94 c8 24 	call	0x4990	; 0x4990 <__fixunssfsi>
    36b6:	70 93 bd 01 	sts	0x01BD, r23
    36ba:	60 93 bc 01 	sts	0x01BC, r22
	PeakHeatTemp1= round(prof.PeakHeatTemp*req_temp);
    36be:	ee e7       	ldi	r30, 0x7E	; 126
    36c0:	f1 e0       	ldi	r31, 0x01	; 1
    36c2:	60 81       	ld	r22, Z
    36c4:	71 81       	ldd	r23, Z+1	; 0x01
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    36ce:	a5 01       	movw	r20, r10
    36d0:	94 01       	movw	r18, r8
    36d2:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    36d6:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    36da:	0e 94 c8 24 	call	0x4990	; 0x4990 <__fixunssfsi>
    36de:	70 93 bb 01 	sts	0x01BB, r23
    36e2:	60 93 ba 01 	sts	0x01BA, r22
			
	drawLine( 0,240-(start_temp*req_temp), PreHeatTime1,240-PreHeatTemp1 ,color_ref);
    36e6:	0f 2e       	mov	r0, r31
    36e8:	f0 ef       	ldi	r31, 0xF0	; 240
    36ea:	2f 2e       	mov	r2, r31
    36ec:	31 2c       	mov	r3, r1
    36ee:	f0 2d       	mov	r31, r0
    36f0:	91 01       	movw	r18, r2
    36f2:	8b 89       	ldd	r24, Y+19	; 0x13
    36f4:	9c 89       	ldd	r25, Y+20	; 0x14
    36f6:	28 1b       	sub	r18, r24
    36f8:	39 0b       	sbc	r19, r25
    36fa:	3c 8b       	std	Y+20, r19	; 0x14
    36fc:	2b 8b       	std	Y+19, r18	; 0x13
	intToStr(250, temps ,3);
	drawString( 2,240-(250*req_temp)+2, temps, TEMP_SCALE, WHITE, 1);
	drawFastHLine(0, 240-(250*req_temp), 319, TEMP_SCALE);
	
	//here starts profile drawing
	uint16_t start_temp = MAX31855_readCelsius();
    36fe:	6f 89       	ldd	r22, Y+23	; 0x17
    3700:	78 8d       	ldd	r23, Y+24	; 0x18
    3702:	89 8d       	ldd	r24, Y+25	; 0x19
    3704:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3706:	0e 94 c8 24 	call	0x4990	; 0x4990 <__fixunssfsi>
	
	PreHeatTemp1= round(prof.PreHeatTemp*req_temp);
	SoakHeatTemp1= round(prof.SoakHeatTemp*req_temp);
	PeakHeatTemp1= round(prof.PeakHeatTemp*req_temp);
			
	drawLine( 0,240-(start_temp*req_temp), PreHeatTime1,240-PreHeatTemp1 ,color_ref);
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    3712:	a5 01       	movw	r20, r10
    3714:	94 01       	movw	r18, r8
    3716:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    371a:	9b 01       	movw	r18, r22
    371c:	ac 01       	movw	r20, r24
    371e:	60 e0       	ldi	r22, 0x00	; 0
    3720:	70 e0       	ldi	r23, 0x00	; 0
    3722:	80 e7       	ldi	r24, 0x70	; 112
    3724:	93 e4       	ldi	r25, 0x43	; 67
    3726:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    372a:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    372e:	0f e1       	ldi	r16, 0x1F	; 31
    3730:	10 e0       	ldi	r17, 0x00	; 0
    3732:	2b 89       	ldd	r18, Y+19	; 0x13
    3734:	3c 89       	ldd	r19, Y+20	; 0x14
    3736:	a2 01       	movw	r20, r4
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_Z8drawLineiiiij>
	
	//here starts profile drawing
	uint16_t start_temp = MAX31855_readCelsius();
	
	uint16_t PreHeatTime1= round(prof.PreHeatTime*req_time);
	uint16_t SoakHeatTime1= round(prof.SoakHeatTime*req_time);
    3740:	c7 01       	movw	r24, r14
    3742:	b6 01       	movw	r22, r12
    3744:	0e 94 c8 24 	call	0x4990	; 0x4990 <__fixunssfsi>
	PreHeatTemp1= round(prof.PreHeatTemp*req_temp);
	SoakHeatTemp1= round(prof.SoakHeatTemp*req_temp);
	PeakHeatTemp1= round(prof.PeakHeatTemp*req_temp);
			
	drawLine( 0,240-(start_temp*req_temp), PreHeatTime1,240-PreHeatTemp1 ,color_ref);
	drawLine( PreHeatTime1,240-PreHeatTemp1 ,SoakHeatTime1+PreHeatTime1,240-SoakHeatTemp1,color_ref);
    3748:	7b 01       	movw	r14, r22
    374a:	e4 0c       	add	r14, r4
    374c:	f5 1c       	adc	r15, r5
    374e:	80 91 bc 01 	lds	r24, 0x01BC
    3752:	90 91 bd 01 	lds	r25, 0x01BD
    3756:	91 01       	movw	r18, r2
    3758:	28 1b       	sub	r18, r24
    375a:	39 0b       	sbc	r19, r25
    375c:	80 91 be 01 	lds	r24, 0x01BE
    3760:	90 91 bf 01 	lds	r25, 0x01BF
    3764:	b1 01       	movw	r22, r2
    3766:	68 1b       	sub	r22, r24
    3768:	79 0b       	sbc	r23, r25
    376a:	a7 01       	movw	r20, r14
    376c:	c2 01       	movw	r24, r4
    376e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_Z8drawLineiiiij>
	drawLine( SoakHeatTime1+PreHeatTime1,240- SoakHeatTemp1,PeakHeatTime1+SoakHeatTime1+PreHeatTime1, 240-PeakHeatTemp1+5,color_ref);
    3772:	cb 84       	ldd	r12, Y+11	; 0x0b
    3774:	dc 84       	ldd	r13, Y+12	; 0x0c
    3776:	ce 0c       	add	r12, r14
    3778:	df 1c       	adc	r13, r15
    377a:	0f 2e       	mov	r0, r31
    377c:	f5 ef       	ldi	r31, 0xF5	; 245
    377e:	af 2e       	mov	r10, r31
    3780:	b1 2c       	mov	r11, r1
    3782:	f0 2d       	mov	r31, r0
    3784:	80 91 ba 01 	lds	r24, 0x01BA
    3788:	90 91 bb 01 	lds	r25, 0x01BB
    378c:	95 01       	movw	r18, r10
    378e:	28 1b       	sub	r18, r24
    3790:	39 0b       	sbc	r19, r25
    3792:	80 91 bc 01 	lds	r24, 0x01BC
    3796:	90 91 bd 01 	lds	r25, 0x01BD
    379a:	b1 01       	movw	r22, r2
    379c:	68 1b       	sub	r22, r24
    379e:	79 0b       	sbc	r23, r25
    37a0:	a6 01       	movw	r20, r12
    37a2:	c7 01       	movw	r24, r14
    37a4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_Z8drawLineiiiij>
	
	drawLine( PeakHeatTime1+SoakHeatTime1+PreHeatTime1,240-PeakHeatTemp1+5,PeakHeatTime1+PeakHeatTime1+SoakHeatTime1+PreHeatTime1, 240-PeakHeatTemp1+5,color_ref);	
    37a8:	eb 84       	ldd	r14, Y+11	; 0x0b
    37aa:	fc 84       	ldd	r15, Y+12	; 0x0c
    37ac:	ec 0c       	add	r14, r12
    37ae:	fd 1c       	adc	r15, r13
    37b0:	80 91 ba 01 	lds	r24, 0x01BA
    37b4:	90 91 bb 01 	lds	r25, 0x01BB
    37b8:	b5 01       	movw	r22, r10
    37ba:	68 1b       	sub	r22, r24
    37bc:	79 0b       	sbc	r23, r25
    37be:	9b 01       	movw	r18, r22
    37c0:	a7 01       	movw	r20, r14
    37c2:	c6 01       	movw	r24, r12
    37c4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_Z8drawLineiiiij>
	drawLine( PeakHeatTime1+PeakHeatTime1+SoakHeatTime1+PreHeatTime1,240-PeakHeatTemp1+5,PeakHeatTime1+PeakHeatTime1+SoakHeatTime1+PreHeatTime1+20, 240-(50*req_temp),color_ref); //to temp 50
    37c8:	67 01       	movw	r12, r14
    37ca:	94 e1       	ldi	r25, 0x14	; 20
    37cc:	c9 0e       	add	r12, r25
    37ce:	d1 1c       	adc	r13, r1
    37d0:	80 91 ba 01 	lds	r24, 0x01BA
    37d4:	90 91 bb 01 	lds	r25, 0x01BB
    37d8:	b5 01       	movw	r22, r10
    37da:	68 1b       	sub	r22, r24
    37dc:	79 0b       	sbc	r23, r25
    37de:	2f 85       	ldd	r18, Y+15	; 0x0f
    37e0:	38 89       	ldd	r19, Y+16	; 0x10
    37e2:	a6 01       	movw	r20, r12
    37e4:	c7 01       	movw	r24, r14
    37e6:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_Z8drawLineiiiij>
	
	drawLine(PeakHeatTime1+PeakHeatTime1+SoakHeatTime1+PreHeatTime1+20, 240-(50*req_temp), 319,240-(50*req_temp), color_ref);
    37ea:	2f 85       	ldd	r18, Y+15	; 0x0f
    37ec:	38 89       	ldd	r19, Y+16	; 0x10
    37ee:	4f e3       	ldi	r20, 0x3F	; 63
    37f0:	51 e0       	ldi	r21, 0x01	; 1
    37f2:	b9 01       	movw	r22, r18
    37f4:	c6 01       	movw	r24, r12
    37f6:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_Z8drawLineiiiij>
	//drawLine( PeakHeatTime1+SoakHeatTime1+PreHeatTime1,240-PeakHeatTemp1,PeakHeatTime1+SoakHeatTime1+PreHeatTime1+20, 240-(50*req_temp),color_ref); //to temp 50
	//drawLine(PeakHeatTime1+SoakHeatTime1+PreHeatTime1+20, 240-(50*req_temp), 319,240-(50*req_temp), color_ref);
	return;	
}
    37fa:	6a 96       	adiw	r28, 0x1a	; 26
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	f8 94       	cli
    3800:	de bf       	out	0x3e, r29	; 62
    3802:	0f be       	out	0x3f, r0	; 63
    3804:	cd bf       	out	0x3d, r28	; 61
    3806:	df 91       	pop	r29
    3808:	cf 91       	pop	r28
    380a:	1f 91       	pop	r17
    380c:	0f 91       	pop	r16
    380e:	ff 90       	pop	r15
    3810:	ef 90       	pop	r14
    3812:	df 90       	pop	r13
    3814:	cf 90       	pop	r12
    3816:	bf 90       	pop	r11
    3818:	af 90       	pop	r10
    381a:	9f 90       	pop	r9
    381c:	8f 90       	pop	r8
    381e:	7f 90       	pop	r7
    3820:	6f 90       	pop	r6
    3822:	5f 90       	pop	r5
    3824:	4f 90       	pop	r4
    3826:	3f 90       	pop	r3
    3828:	2f 90       	pop	r2
    382a:	08 95       	ret

0000382c <_Z13DrawCancelButv>:

void DrawCancelBut(){
    382c:	ef 92       	push	r14
    382e:	ff 92       	push	r15
    3830:	0f 93       	push	r16
    3832:	1f 93       	push	r17
    3834:	cf 93       	push	r28
    3836:	df 93       	push	r29
    3838:	cd b7       	in	r28, 0x3d	; 61
    383a:	de b7       	in	r29, 0x3e	; 62
    383c:	27 97       	sbiw	r28, 0x07	; 7
    383e:	0f b6       	in	r0, 0x3f	; 63
    3840:	f8 94       	cli
    3842:	de bf       	out	0x3e, r29	; 62
    3844:	0f be       	out	0x3f, r0	; 63
    3846:	cd bf       	out	0x3d, r28	; 61
char cca[7]="Cancel";
    3848:	87 e0       	ldi	r24, 0x07	; 7
    384a:	eb e2       	ldi	r30, 0x2B	; 43
    384c:	f1 e0       	ldi	r31, 0x01	; 1
    384e:	de 01       	movw	r26, r28
    3850:	11 96       	adiw	r26, 0x01	; 1
    3852:	01 90       	ld	r0, Z+
    3854:	0d 92       	st	X+, r0
    3856:	8a 95       	dec	r24
    3858:	e1 f7       	brne	.-8      	; 0x3852 <_Z13DrawCancelButv+0x26>
drawRoundRect(170, 170, 60,60, 5, BLACK);
    385a:	e1 2c       	mov	r14, r1
    385c:	f1 2c       	mov	r15, r1
    385e:	05 e0       	ldi	r16, 0x05	; 5
    3860:	10 e0       	ldi	r17, 0x00	; 0
    3862:	2c e3       	ldi	r18, 0x3C	; 60
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	4c e3       	ldi	r20, 0x3C	; 60
    3868:	50 e0       	ldi	r21, 0x00	; 0
    386a:	6a ea       	ldi	r22, 0xAA	; 170
    386c:	70 e0       	ldi	r23, 0x00	; 0
    386e:	8a ea       	ldi	r24, 0xAA	; 170
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	0e 94 98 0b 	call	0x1730	; 0x1730 <_Z13drawRoundRectiiiiij>
drawString( 182, 196, cca, BLACK, WHITE, 1);
    3876:	ee 24       	eor	r14, r14
    3878:	e3 94       	inc	r14
    387a:	0f ef       	ldi	r16, 0xFF	; 255
    387c:	1f ef       	ldi	r17, 0xFF	; 255
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	ae 01       	movw	r20, r28
    3884:	4f 5f       	subi	r20, 0xFF	; 255
    3886:	5f 4f       	sbci	r21, 0xFF	; 255
    3888:	64 ec       	ldi	r22, 0xC4	; 196
    388a:	70 e0       	ldi	r23, 0x00	; 0
    388c:	86 eb       	ldi	r24, 0xB6	; 182
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
return;	
}
    3894:	27 96       	adiw	r28, 0x07	; 7
    3896:	0f b6       	in	r0, 0x3f	; 63
    3898:	f8 94       	cli
    389a:	de bf       	out	0x3e, r29	; 62
    389c:	0f be       	out	0x3f, r0	; 63
    389e:	cd bf       	out	0x3d, r28	; 61
    38a0:	df 91       	pop	r29
    38a2:	cf 91       	pop	r28
    38a4:	1f 91       	pop	r17
    38a6:	0f 91       	pop	r16
    38a8:	ff 90       	pop	r15
    38aa:	ef 90       	pop	r14
    38ac:	08 95       	ret

000038ae <_Z16DrawProfilestartv>:

void DrawProfilestart(){
    38ae:	ef 92       	push	r14
    38b0:	ff 92       	push	r15
    38b2:	0f 93       	push	r16
    38b4:	1f 93       	push	r17
    38b6:	cf 93       	push	r28
    38b8:	df 93       	push	r29
    38ba:	cd b7       	in	r28, 0x3d	; 61
    38bc:	de b7       	in	r29, 0x3e	; 62
    38be:	ea 97       	sbiw	r28, 0x3a	; 58
    38c0:	0f b6       	in	r0, 0x3f	; 63
    38c2:	f8 94       	cli
    38c4:	de bf       	out	0x3e, r29	; 62
    38c6:	0f be       	out	0x3f, r0	; 63
    38c8:	cd bf       	out	0x3d, r28	; 61
char active1[16]="Active profile:"; 
    38ca:	80 e1       	ldi	r24, 0x10	; 16
    38cc:	e2 e3       	ldi	r30, 0x32	; 50
    38ce:	f1 e0       	ldi	r31, 0x01	; 1
    38d0:	de 01       	movw	r26, r28
    38d2:	11 96       	adiw	r26, 0x01	; 1
    38d4:	01 90       	ld	r0, Z+
    38d6:	0d 92       	st	X+, r0
    38d8:	8a 95       	dec	r24
    38da:	e1 f7       	brne	.-8      	; 0x38d4 <_Z16DrawProfilestartv+0x26>
char prof[2];
intToStr(activated_profile, prof ,1);
    38dc:	80 91 82 01 	lds	r24, 0x0182
    38e0:	90 91 83 01 	lds	r25, 0x0183
    38e4:	41 e0       	ldi	r20, 0x01	; 1
    38e6:	50 e0       	ldi	r21, 0x00	; 0
    38e8:	be 01       	movw	r22, r28
    38ea:	67 5c       	subi	r22, 0xC7	; 199
    38ec:	7f 4f       	sbci	r23, 0xFF	; 255
    38ee:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
//draw active profile num xx
drawString( 30, 55, active1, BLACK, WHITE, 2);
    38f2:	68 94       	set
    38f4:	ee 24       	eor	r14, r14
    38f6:	e1 f8       	bld	r14, 1
    38f8:	0f ef       	ldi	r16, 0xFF	; 255
    38fa:	1f ef       	ldi	r17, 0xFF	; 255
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	ae 01       	movw	r20, r28
    3902:	4f 5f       	subi	r20, 0xFF	; 255
    3904:	5f 4f       	sbci	r21, 0xFF	; 255
    3906:	67 e3       	ldi	r22, 0x37	; 55
    3908:	70 e0       	ldi	r23, 0x00	; 0
    390a:	8e e1       	ldi	r24, 0x1E	; 30
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
drawString( 206,55, prof, RED,WHITE, 2);
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	38 ef       	ldi	r19, 0xF8	; 248
    3916:	ae 01       	movw	r20, r28
    3918:	47 5c       	subi	r20, 0xC7	; 199
    391a:	5f 4f       	sbci	r21, 0xFF	; 255
    391c:	67 e3       	ldi	r22, 0x37	; 55
    391e:	70 e0       	ldi	r23, 0x00	; 0
    3920:	8e ec       	ldi	r24, 0xCE	; 206
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>

//draw what to select, start profile, edit profile or set temp to some value
char activate[6]="Start"; 
    3928:	86 e0       	ldi	r24, 0x06	; 6
    392a:	e2 e4       	ldi	r30, 0x42	; 66
    392c:	f1 e0       	ldi	r31, 0x01	; 1
    392e:	de 01       	movw	r26, r28
    3930:	d3 96       	adiw	r26, 0x33	; 51
    3932:	01 90       	ld	r0, Z+
    3934:	0d 92       	st	X+, r0
    3936:	8a 95       	dec	r24
    3938:	e1 f7       	brne	.-8      	; 0x3932 <_Z16DrawProfilestartv+0x84>
drawRoundRect(70, 90, 60,60, 5, BLACK);
    393a:	e1 2c       	mov	r14, r1
    393c:	f1 2c       	mov	r15, r1
    393e:	05 e0       	ldi	r16, 0x05	; 5
    3940:	10 e0       	ldi	r17, 0x00	; 0
    3942:	2c e3       	ldi	r18, 0x3C	; 60
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	4c e3       	ldi	r20, 0x3C	; 60
    3948:	50 e0       	ldi	r21, 0x00	; 0
    394a:	6a e5       	ldi	r22, 0x5A	; 90
    394c:	70 e0       	ldi	r23, 0x00	; 0
    394e:	86 e4       	ldi	r24, 0x46	; 70
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	0e 94 98 0b 	call	0x1730	; 0x1730 <_Z13drawRoundRectiiiiij>
drawString( 80, 115, activate, BLACK, WHITE, 1);
    3956:	ee 24       	eor	r14, r14
    3958:	e3 94       	inc	r14
    395a:	0f ef       	ldi	r16, 0xFF	; 255
    395c:	1f ef       	ldi	r17, 0xFF	; 255
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	ae 01       	movw	r20, r28
    3964:	4d 5c       	subi	r20, 0xCD	; 205
    3966:	5f 4f       	sbci	r21, 0xFF	; 255
    3968:	63 e7       	ldi	r22, 0x73	; 115
    396a:	70 e0       	ldi	r23, 0x00	; 0
    396c:	80 e5       	ldi	r24, 0x50	; 80
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>

char edit1[6]="Edit"; 
    3974:	85 e0       	ldi	r24, 0x05	; 5
    3976:	ed e0       	ldi	r30, 0x0D	; 13
    3978:	f1 e0       	ldi	r31, 0x01	; 1
    397a:	de 01       	movw	r26, r28
    397c:	9d 96       	adiw	r26, 0x2d	; 45
    397e:	01 90       	ld	r0, Z+
    3980:	0d 92       	st	X+, r0
    3982:	8a 95       	dec	r24
    3984:	e1 f7       	brne	.-8      	; 0x397e <_Z16DrawProfilestartv+0xd0>
    3986:	1a aa       	std	Y+50, r1	; 0x32
char edit2[8]="Profile"; 
    3988:	88 e0       	ldi	r24, 0x08	; 8
    398a:	e8 e4       	ldi	r30, 0x48	; 72
    398c:	f1 e0       	ldi	r31, 0x01	; 1
    398e:	de 01       	movw	r26, r28
    3990:	95 96       	adiw	r26, 0x25	; 37
    3992:	01 90       	ld	r0, Z+
    3994:	0d 92       	st	X+, r0
    3996:	8a 95       	dec	r24
    3998:	e1 f7       	brne	.-8      	; 0x3992 <_Z16DrawProfilestartv+0xe4>
drawRoundRect(200, 90, 60,60, 5, BLACK);
    399a:	e1 2c       	mov	r14, r1
    399c:	f1 2c       	mov	r15, r1
    399e:	05 e0       	ldi	r16, 0x05	; 5
    39a0:	10 e0       	ldi	r17, 0x00	; 0
    39a2:	2c e3       	ldi	r18, 0x3C	; 60
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	4c e3       	ldi	r20, 0x3C	; 60
    39a8:	50 e0       	ldi	r21, 0x00	; 0
    39aa:	6a e5       	ldi	r22, 0x5A	; 90
    39ac:	70 e0       	ldi	r23, 0x00	; 0
    39ae:	88 ec       	ldi	r24, 0xC8	; 200
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	0e 94 98 0b 	call	0x1730	; 0x1730 <_Z13drawRoundRectiiiiij>
drawString( 210, 110, edit1, BLACK, WHITE, 1);
    39b6:	ee 24       	eor	r14, r14
    39b8:	e3 94       	inc	r14
    39ba:	0f ef       	ldi	r16, 0xFF	; 255
    39bc:	1f ef       	ldi	r17, 0xFF	; 255
    39be:	20 e0       	ldi	r18, 0x00	; 0
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	ae 01       	movw	r20, r28
    39c4:	43 5d       	subi	r20, 0xD3	; 211
    39c6:	5f 4f       	sbci	r21, 0xFF	; 255
    39c8:	6e e6       	ldi	r22, 0x6E	; 110
    39ca:	70 e0       	ldi	r23, 0x00	; 0
    39cc:	82 ed       	ldi	r24, 0xD2	; 210
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
drawString( 210, 120, edit2, BLACK, WHITE, 1);
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	ae 01       	movw	r20, r28
    39da:	4b 5d       	subi	r20, 0xDB	; 219
    39dc:	5f 4f       	sbci	r21, 0xFF	; 255
    39de:	68 e7       	ldi	r22, 0x78	; 120
    39e0:	70 e0       	ldi	r23, 0x00	; 0
    39e2:	82 ed       	ldi	r24, 0xD2	; 210
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>

char sometemp[8]="Heat to";
    39ea:	88 e0       	ldi	r24, 0x08	; 8
    39ec:	e0 e5       	ldi	r30, 0x50	; 80
    39ee:	f1 e0       	ldi	r31, 0x01	; 1
    39f0:	de 01       	movw	r26, r28
    39f2:	5d 96       	adiw	r26, 0x1d	; 29
    39f4:	01 90       	ld	r0, Z+
    39f6:	0d 92       	st	X+, r0
    39f8:	8a 95       	dec	r24
    39fa:	e1 f7       	brne	.-8      	; 0x39f4 <_Z16DrawProfilestartv+0x146>
char sometemp2[12]="temperature"; 
    39fc:	8c e0       	ldi	r24, 0x0C	; 12
    39fe:	e8 e5       	ldi	r30, 0x58	; 88
    3a00:	f1 e0       	ldi	r31, 0x01	; 1
    3a02:	de 01       	movw	r26, r28
    3a04:	51 96       	adiw	r26, 0x11	; 17
    3a06:	01 90       	ld	r0, Z+
    3a08:	0d 92       	st	X+, r0
    3a0a:	8a 95       	dec	r24
    3a0c:	e1 f7       	brne	.-8      	; 0x3a06 <_Z16DrawProfilestartv+0x158>
drawRoundRect(50, 170, 100,60, 5, BLACK);
    3a0e:	e1 2c       	mov	r14, r1
    3a10:	f1 2c       	mov	r15, r1
    3a12:	05 e0       	ldi	r16, 0x05	; 5
    3a14:	10 e0       	ldi	r17, 0x00	; 0
    3a16:	2c e3       	ldi	r18, 0x3C	; 60
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	44 e6       	ldi	r20, 0x64	; 100
    3a1c:	50 e0       	ldi	r21, 0x00	; 0
    3a1e:	6a ea       	ldi	r22, 0xAA	; 170
    3a20:	70 e0       	ldi	r23, 0x00	; 0
    3a22:	82 e3       	ldi	r24, 0x32	; 50
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	0e 94 98 0b 	call	0x1730	; 0x1730 <_Z13drawRoundRectiiiiij>
drawString( 60, 185,sometemp, BLACK, WHITE, 1);
    3a2a:	ee 24       	eor	r14, r14
    3a2c:	e3 94       	inc	r14
    3a2e:	0f ef       	ldi	r16, 0xFF	; 255
    3a30:	1f ef       	ldi	r17, 0xFF	; 255
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	ae 01       	movw	r20, r28
    3a38:	43 5e       	subi	r20, 0xE3	; 227
    3a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a3c:	69 eb       	ldi	r22, 0xB9	; 185
    3a3e:	70 e0       	ldi	r23, 0x00	; 0
    3a40:	8c e3       	ldi	r24, 0x3C	; 60
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
drawString( 60, 195, sometemp2, BLACK, WHITE, 1);
    3a48:	20 e0       	ldi	r18, 0x00	; 0
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	ae 01       	movw	r20, r28
    3a4e:	4f 5e       	subi	r20, 0xEF	; 239
    3a50:	5f 4f       	sbci	r21, 0xFF	; 255
    3a52:	63 ec       	ldi	r22, 0xC3	; 195
    3a54:	70 e0       	ldi	r23, 0x00	; 0
    3a56:	8c e3       	ldi	r24, 0x3C	; 60
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
return;	
}
    3a5e:	ea 96       	adiw	r28, 0x3a	; 58
    3a60:	0f b6       	in	r0, 0x3f	; 63
    3a62:	f8 94       	cli
    3a64:	de bf       	out	0x3e, r29	; 62
    3a66:	0f be       	out	0x3f, r0	; 63
    3a68:	cd bf       	out	0x3d, r28	; 61
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	1f 91       	pop	r17
    3a70:	0f 91       	pop	r16
    3a72:	ff 90       	pop	r15
    3a74:	ef 90       	pop	r14
    3a76:	08 95       	ret

00003a78 <_Z12screen_setupv>:
#define YMHIGH 			_ymport =1

volatile uint16_t _rxplate = 0;

void TouchScreen(uint16_t rxplate) {
  _rxplate = rxplate;
    3a78:	8f e3       	ldi	r24, 0x3F	; 63
    3a7a:	91 e0       	ldi	r25, 0x01	; 1
    3a7c:	90 93 85 01 	sts	0x0185, r25
    3a80:	80 93 84 01 	sts	0x0184, r24
// between X+ and X- Use any multimeter to read it
// For the one we're using, its 318.7 ohms across the X plate

TouchScreen(319);

init_S6D0154();
    3a84:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z12init_S6D0154v>
    3a88:	08 95       	ret

00003a8a <_Z12system_setupv>:
	
	//clock_prescale_set(clock_div_1); //disable clk prescaler, or fuse to 1
	

	// select minimal prescaler (max system speed)
	CLKPR = 0x80;
    3a8a:	e1 e6       	ldi	r30, 0x61	; 97
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	80 e8       	ldi	r24, 0x80	; 128
    3a90:	80 83       	st	Z, r24
	CLKPR = 0x00;
    3a92:	10 82       	st	Z, r1
	
	//pc0= LCD_RD(out), pc1 =  LCD_WR (out),
	//pc2 = LCD_RS (out), pc3=LCD_CS(out), pc4=LCD_RST(out), pc5=speaker(out)
	//PC1 =YP touchscreen(i/o) ADC1, PC2 = XM touchscreen(i/o) ADC2 
	DDRC = 0b00111111; 
    3a94:	8f e3       	ldi	r24, 0x3F	; 63
    3a96:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000; //output 0 and input tri-state
    3a98:	18 b8       	out	0x08, r1	; 8

	//pd0=rtemp select(out), pd1-7=display digital outputs(out)[B2][B3][B4][B5][B6][B7][B0]
	//PD5=XP(i/o), PD6=YM(i/o)
	DDRD = 0b11111111;
    3a9a:	8f ef       	ldi	r24, 0xFF	; 255
    3a9c:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000; //output 0 and input tri-state
    3a9e:	1b b8       	out	0x0b, r1	; 11

	//pb0=display digital output(out)[B1], pb1 = PWM(out),pb2=SS(out), pb3=MOSI(out), pb4=MISO(in), pb5=sck(out) 
	DDRB = 0b00101111; //DDRB = 0b00101111; 
    3aa0:	8f e2       	ldi	r24, 0x2F	; 47
    3aa2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000; //output 0 and input tri-state
    3aa4:	15 b8       	out	0x05, r1	; 5
	
	//spi enabled, clk/16 mode, master
	SPCR=0b01010010; //0b01010001; //now fixed with rising edge sampling
    3aa6:	82 e5       	ldi	r24, 0x52	; 82
    3aa8:	8c bd       	out	0x2c, r24	; 44

	//PWM phase corrected, 16-bit counter
	//output is 12MHz/(256*101*2)=4.3ms pwm, since phase corrected(goes up and then down)
	TCCR1A = 0b10000010; // ICR1 selected as top value mode 1010
    3aaa:	82 e8       	ldi	r24, 0x82	; 130
    3aac:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 0b00010100; //clk/256 prescaling selected 
    3ab0:	84 e1       	ldi	r24, 0x14	; 20
    3ab2:	80 93 81 00 	sts	0x0081, r24
	ICR1=100; //max
    3ab6:	84 e6       	ldi	r24, 0x64	; 100
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	90 93 87 00 	sts	0x0087, r25
    3abe:	80 93 86 00 	sts	0x0086, r24
	OCR1A=0; //start value
    3ac2:	10 92 89 00 	sts	0x0089, r1
    3ac6:	10 92 88 00 	sts	0x0088, r1
	TIMSK1= 0b00000000;
    3aca:	10 92 6f 00 	sts	0x006F, r1
	TIFR1=0b00000000;
    3ace:	16 ba       	out	0x16, r1	; 22

	//timer control 8 bit
	//output is 12MHz/(256*125)=2.6667ms tick 1s with 375 rounds
	TCNT0 = 0x00; //set timer to 0
    3ad0:	16 bc       	out	0x26, r1	; 38
	OCR0A = 124; //runs to value 0:124
    3ad2:	8c e7       	ldi	r24, 0x7C	; 124
    3ad4:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0b00000010; //CTC operation mode
    3ad6:	82 e0       	ldi	r24, 0x02	; 2
    3ad8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b10000100; //force compare match A, prescaler to 256
    3ada:	94 e8       	ldi	r25, 0x84	; 132
    3adc:	95 bd       	out	0x25, r25	; 37
	TIMSK0= 0b00000010; //masked compare match A
    3ade:	80 93 6e 00 	sts	0x006E, r24
	
	//ADMUX ADC1=YP=PC1=0001 , ADC2=XM=PC2=0010 
	ADMUX=0b00000110; //now in unused ADC6 so it won't affect running the code in anyway at beginning!
    3ae2:	86 e0       	ldi	r24, 0x06	; 6
    3ae4:	80 93 7c 00 	sts	0x007C, r24
	//autotriggering disabled starts conversion right away, since 1st ADC-value is usually bad
	//ADCSRA=0b11000000;
	ADCSRA=0b11000110; //with 64 clk division from 12MHz now 187.5khz, should be between 50-200khz!!
    3ae8:	86 ec       	ldi	r24, 0xC6	; 198
    3aea:	80 93 7a 00 	sts	0x007A, r24
	
	//disable watchdog
	wdt_disable();
    3aee:	88 e1       	ldi	r24, 0x18	; 24
    3af0:	0f b6       	in	r0, 0x3f	; 63
    3af2:	f8 94       	cli
    3af4:	80 93 60 00 	sts	0x0060, r24
    3af8:	10 92 60 00 	sts	0x0060, r1
    3afc:	0f be       	out	0x3f, r0	; 63
    3afe:	08 95       	ret

00003b00 <__vector_14>:

uint16_t	x_point=0, y_point=0;
double    	z_point=0;

ISR (TIMER0_COMPA_vect)  //2.6667ms tick 1s with 375 rounds for 1sec
{
    3b00:	1f 92       	push	r1
    3b02:	0f 92       	push	r0
    3b04:	0f b6       	in	r0, 0x3f	; 63
    3b06:	0f 92       	push	r0
    3b08:	11 24       	eor	r1, r1
    3b0a:	cf 92       	push	r12
    3b0c:	df 92       	push	r13
    3b0e:	ef 92       	push	r14
    3b10:	ff 92       	push	r15
    3b12:	0f 93       	push	r16
    3b14:	1f 93       	push	r17
    3b16:	2f 93       	push	r18
    3b18:	3f 93       	push	r19
    3b1a:	4f 93       	push	r20
    3b1c:	5f 93       	push	r21
    3b1e:	6f 93       	push	r22
    3b20:	7f 93       	push	r23
    3b22:	8f 93       	push	r24
    3b24:	9f 93       	push	r25
    3b26:	af 93       	push	r26
    3b28:	bf 93       	push	r27
    3b2a:	cf 93       	push	r28
    3b2c:	ef 93       	push	r30
    3b2e:	ff 93       	push	r31
		timer_1s++;		
    3b30:	80 91 c4 01 	lds	r24, 0x01C4
    3b34:	90 91 c5 01 	lds	r25, 0x01C5
    3b38:	a0 91 c6 01 	lds	r26, 0x01C6
    3b3c:	b0 91 c7 01 	lds	r27, 0x01C7
    3b40:	01 96       	adiw	r24, 0x01	; 1
    3b42:	a1 1d       	adc	r26, r1
    3b44:	b1 1d       	adc	r27, r1
    3b46:	80 93 c4 01 	sts	0x01C4, r24
    3b4a:	90 93 c5 01 	sts	0x01C5, r25
    3b4e:	a0 93 c6 01 	sts	0x01C6, r26
    3b52:	b0 93 c7 01 	sts	0x01C7, r27
		if(timer_1s >= 375)		//1s
    3b56:	80 91 c4 01 	lds	r24, 0x01C4
    3b5a:	90 91 c5 01 	lds	r25, 0x01C5
    3b5e:	a0 91 c6 01 	lds	r26, 0x01C6
    3b62:	b0 91 c7 01 	lds	r27, 0x01C7
    3b66:	87 37       	cpi	r24, 0x77	; 119
    3b68:	91 40       	sbci	r25, 0x01	; 1
    3b6a:	a1 05       	cpc	r26, r1
    3b6c:	b1 05       	cpc	r27, r1
    3b6e:	08 f4       	brcc	.+2      	; 0x3b72 <__vector_14+0x72>
    3b70:	93 c0       	rjmp	.+294    	; 0x3c98 <__vector_14+0x198>
		{
			delay_ms(10);  //if some delay not added here it will try to read touchscreen while still writing to display
    3b72:	8a e0       	ldi	r24, 0x0A	; 10
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
			timer_help_seconds++;
    3b7a:	80 91 ac 01 	lds	r24, 0x01AC
    3b7e:	90 91 ad 01 	lds	r25, 0x01AD
    3b82:	01 96       	adiw	r24, 0x01	; 1
    3b84:	90 93 ad 01 	sts	0x01AD, r25
    3b88:	80 93 ac 01 	sts	0x01AC, r24
			timer_seconds++;
    3b8c:	80 91 ae 01 	lds	r24, 0x01AE
    3b90:	90 91 af 01 	lds	r25, 0x01AF
    3b94:	01 96       	adiw	r24, 0x01	; 1
    3b96:	90 93 af 01 	sts	0x01AF, r25
    3b9a:	80 93 ae 01 	sts	0x01AE, r24
			timer_1s=0;
    3b9e:	10 92 c4 01 	sts	0x01C4, r1
    3ba2:	10 92 c5 01 	sts	0x01C5, r1
    3ba6:	10 92 c6 01 	sts	0x01C6, r1
    3baa:	10 92 c7 01 	sts	0x01C7, r1
			cmd_pulse=1; //1 second has passed time to refresh display
    3bae:	c1 e0       	ldi	r28, 0x01	; 1
    3bb0:	c0 93 a5 01 	sts	0x01A5, r28
			
			intToStr(timer_seconds,seconds,5);
    3bb4:	80 91 ae 01 	lds	r24, 0x01AE
    3bb8:	90 91 af 01 	lds	r25, 0x01AF
    3bbc:	45 e0       	ldi	r20, 0x05	; 5
    3bbe:	50 e0       	ldi	r21, 0x00	; 0
    3bc0:	6a e9       	ldi	r22, 0x9A	; 154
    3bc2:	71 e0       	ldi	r23, 0x01	; 1
    3bc4:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
			drawString( 0,0,seconds, WHITE, BLUE, 2);
    3bc8:	68 94       	set
    3bca:	ee 24       	eor	r14, r14
    3bcc:	e1 f8       	bld	r14, 1
    3bce:	0f e1       	ldi	r16, 0x1F	; 31
    3bd0:	10 e0       	ldi	r17, 0x00	; 0
    3bd2:	2f ef       	ldi	r18, 0xFF	; 255
    3bd4:	3f ef       	ldi	r19, 0xFF	; 255
    3bd6:	4a e9       	ldi	r20, 0x9A	; 154
    3bd8:	51 e0       	ldi	r21, 0x01	; 1
    3bda:	60 e0       	ldi	r22, 0x00	; 0
    3bdc:	70 e0       	ldi	r23, 0x00	; 0
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
			
			duty21=OCR1A;
    3be6:	80 91 88 00 	lds	r24, 0x0088
    3bea:	90 91 89 00 	lds	r25, 0x0089
    3bee:	90 93 c9 01 	sts	0x01C9, r25
    3bf2:	80 93 c8 01 	sts	0x01C8, r24
			//OCR1A=0;
			//delay_ms(131);
			temper=MAX31855_readCelsius();
    3bf6:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    3bfa:	60 93 8c 01 	sts	0x018C, r22
    3bfe:	70 93 8d 01 	sts	0x018D, r23
    3c02:	80 93 8e 01 	sts	0x018E, r24
    3c06:	90 93 8f 01 	sts	0x018F, r25
			//delay_ms(5);
			//OCR1A=duty21;
			temper+=duty21/20; //add 5% of duty cycle to value to get it about right
    3c0a:	80 91 c8 01 	lds	r24, 0x01C8
    3c0e:	90 91 c9 01 	lds	r25, 0x01C9
    3c12:	c0 90 8c 01 	lds	r12, 0x018C
    3c16:	d0 90 8d 01 	lds	r13, 0x018D
    3c1a:	e0 90 8e 01 	lds	r14, 0x018E
    3c1e:	f0 90 8f 01 	lds	r15, 0x018F
    3c22:	64 e1       	ldi	r22, 0x14	; 20
    3c24:	70 e0       	ldi	r23, 0x00	; 0
    3c26:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__divmodhi4>
    3c2a:	88 27       	eor	r24, r24
    3c2c:	77 fd       	sbrc	r23, 7
    3c2e:	80 95       	com	r24
    3c30:	98 2f       	mov	r25, r24
    3c32:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    3c36:	a7 01       	movw	r20, r14
    3c38:	96 01       	movw	r18, r12
    3c3a:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    3c3e:	60 93 8c 01 	sts	0x018C, r22
    3c42:	70 93 8d 01 	sts	0x018D, r23
    3c46:	80 93 8e 01 	sts	0x018E, r24
    3c4a:	90 93 8f 01 	sts	0x018F, r25
			ftoa( temper,temp_current, 1);
    3c4e:	60 91 8c 01 	lds	r22, 0x018C
    3c52:	70 91 8d 01 	lds	r23, 0x018D
    3c56:	80 91 8e 01 	lds	r24, 0x018E
    3c5a:	90 91 8f 01 	lds	r25, 0x018F
    3c5e:	21 e0       	ldi	r18, 0x01	; 1
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 e9       	ldi	r20, 0x90	; 144
    3c64:	51 e0       	ldi	r21, 0x01	; 1
    3c66:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_Z4ftoafPci>
			drawString(10,20,temp_current, BLACK, WHITE, 2);
    3c6a:	68 94       	set
    3c6c:	ee 24       	eor	r14, r14
    3c6e:	e1 f8       	bld	r14, 1
    3c70:	0f ef       	ldi	r16, 0xFF	; 255
    3c72:	1f ef       	ldi	r17, 0xFF	; 255
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	40 e9       	ldi	r20, 0x90	; 144
    3c7a:	51 e0       	ldi	r21, 0x01	; 1
    3c7c:	64 e1       	ldi	r22, 0x14	; 20
    3c7e:	70 e0       	ldi	r23, 0x00	; 0
    3c80:	8a e0       	ldi	r24, 0x0A	; 10
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
			resample=1; //time to draw pixel to display
    3c88:	c0 93 a4 01 	sts	0x01A4, r28
			resample2=1;
    3c8c:	c0 93 b4 01 	sts	0x01B4, r28
			delay_ms(10);  //some delay to get conversion before going back to function to read it
    3c90:	8a e0       	ldi	r24, 0x0A	; 10
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
		resample=1;
		timer_refresh=0;
	}
	*/
	
timer_press++;
    3c98:	80 91 c0 01 	lds	r24, 0x01C0
    3c9c:	90 91 c1 01 	lds	r25, 0x01C1
    3ca0:	a0 91 c2 01 	lds	r26, 0x01C2
    3ca4:	b0 91 c3 01 	lds	r27, 0x01C3
    3ca8:	01 96       	adiw	r24, 0x01	; 1
    3caa:	a1 1d       	adc	r26, r1
    3cac:	b1 1d       	adc	r27, r1
    3cae:	80 93 c0 01 	sts	0x01C0, r24
    3cb2:	90 93 c1 01 	sts	0x01C1, r25
    3cb6:	a0 93 c2 01 	sts	0x01C2, r26
    3cba:	b0 93 c3 01 	sts	0x01C3, r27
	if(timer_press >= 38) {//with every 100ms check if has been pressed for cancel
    3cbe:	80 91 c0 01 	lds	r24, 0x01C0
    3cc2:	90 91 c1 01 	lds	r25, 0x01C1
    3cc6:	a0 91 c2 01 	lds	r26, 0x01C2
    3cca:	b0 91 c3 01 	lds	r27, 0x01C3
    3cce:	86 97       	sbiw	r24, 0x26	; 38
    3cd0:	a1 05       	cpc	r26, r1
    3cd2:	b1 05       	cpc	r27, r1
    3cd4:	08 f4       	brcc	.+2      	; 0x3cd8 <__vector_14+0x1d8>
    3cd6:	c4 c0       	rjmp	.+392    	; 0x3e60 <__vector_14+0x360>
		 //delay so probably nothing to send when it is reading time
		 //if some delay not added here it will try to read touchscreen while still writing to display
		delay_ms(10);
    3cd8:	8a e0       	ldi	r24, 0x0A	; 10
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
		pressed2=0;
    3ce0:	10 92 b2 01 	sts	0x01B2, r1
		pressed2=pressure();
    3ce4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <_Z8pressurev>
    3ce8:	80 93 b2 01 	sts	0x01B2, r24
		delay_ms(10);
    3cec:	8a e0       	ldi	r24, 0x0A	; 10
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
		timer_press=0;
    3cf4:	10 92 c0 01 	sts	0x01C0, r1
    3cf8:	10 92 c1 01 	sts	0x01C1, r1
    3cfc:	10 92 c2 01 	sts	0x01C2, r1
    3d00:	10 92 c3 01 	sts	0x01C3, r1
		press_now = 0;
    3d04:	10 92 b0 01 	sts	0x01B0, r1
		
		if (pressed2 > MINPRESSURE && pressed2 < MAXPRESSURE ) {
    3d08:	80 91 b2 01 	lds	r24, 0x01B2
    3d0c:	8b 30       	cpi	r24, 0x0B	; 11
    3d0e:	08 f4       	brcc	.+2      	; 0x3d12 <__vector_14+0x212>
    3d10:	89 c0       	rjmp	.+274    	; 0x3e24 <__vector_14+0x324>
    3d12:	80 91 b2 01 	lds	r24, 0x01B2
			getPoint( &x_point, &y_point, &z_point); //now points house the values
    3d16:	4e e6       	ldi	r20, 0x6E	; 110
    3d18:	51 e0       	ldi	r21, 0x01	; 1
    3d1a:	62 e7       	ldi	r22, 0x72	; 114
    3d1c:	71 e0       	ldi	r23, 0x01	; 1
    3d1e:	84 e7       	ldi	r24, 0x74	; 116
    3d20:	91 e0       	ldi	r25, 0x01	; 1
    3d22:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_Z8getPointPjS_Pd>
		
			x_point = map(x_point, TS_MINX, TS_MAXX, 240, 0);
    3d26:	20 91 74 01 	lds	r18, 0x0174
    3d2a:	30 91 75 01 	lds	r19, 0x0175
    3d2e:	c9 01       	movw	r24, r18
    3d30:	a0 e0       	ldi	r26, 0x00	; 0
    3d32:	b0 e0       	ldi	r27, 0x00	; 0
    return (1023-(z2-z1));
  }
}

long map(long x, long in_min, long in_max, long out_min, long out_max){
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3d34:	9c 01       	movw	r18, r24
    3d36:	ad 01       	movw	r20, r26
    3d38:	26 59       	subi	r18, 0x96	; 150
    3d3a:	31 09       	sbc	r19, r1
    3d3c:	41 09       	sbc	r20, r1
    3d3e:	51 09       	sbc	r21, r1
    3d40:	a0 e1       	ldi	r26, 0x10	; 16
    3d42:	bf ef       	ldi	r27, 0xFF	; 255
    3d44:	0e 94 0c 28 	call	0x5018	; 0x5018 <__mulohisi3>
    3d48:	22 e0       	ldi	r18, 0x02	; 2
    3d4a:	33 e0       	ldi	r19, 0x03	; 3
    3d4c:	40 e0       	ldi	r20, 0x00	; 0
    3d4e:	50 e0       	ldi	r21, 0x00	; 0
    3d50:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__divmodsi4>
    3d54:	69 01       	movw	r12, r18
    3d56:	7a 01       	movw	r14, r20
    3d58:	80 ef       	ldi	r24, 0xF0	; 240
    3d5a:	c8 0e       	add	r12, r24
    3d5c:	d1 1c       	adc	r13, r1
    3d5e:	e1 1c       	adc	r14, r1
    3d60:	f1 1c       	adc	r15, r1
    3d62:	d0 92 75 01 	sts	0x0175, r13
    3d66:	c0 92 74 01 	sts	0x0174, r12
			y_point = map(y_point, TS_MINY, TS_MAXY, 320, 0);
    3d6a:	20 91 72 01 	lds	r18, 0x0172
    3d6e:	30 91 73 01 	lds	r19, 0x0173
    3d72:	c9 01       	movw	r24, r18
    3d74:	a0 e0       	ldi	r26, 0x00	; 0
    3d76:	b0 e0       	ldi	r27, 0x00	; 0
    3d78:	9c 01       	movw	r18, r24
    3d7a:	ad 01       	movw	r20, r26
    3d7c:	28 57       	subi	r18, 0x78	; 120
    3d7e:	31 09       	sbc	r19, r1
    3d80:	41 09       	sbc	r20, r1
    3d82:	51 09       	sbc	r21, r1
    3d84:	a0 ec       	ldi	r26, 0xC0	; 192
    3d86:	be ef       	ldi	r27, 0xFE	; 254
    3d88:	0e 94 0c 28 	call	0x5018	; 0x5018 <__mulohisi3>
    3d8c:	24 e3       	ldi	r18, 0x34	; 52
    3d8e:	33 e0       	ldi	r19, 0x03	; 3
    3d90:	40 e0       	ldi	r20, 0x00	; 0
    3d92:	50 e0       	ldi	r21, 0x00	; 0
    3d94:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__divmodsi4>
    3d98:	ba 01       	movw	r22, r20
    3d9a:	a9 01       	movw	r20, r18
    3d9c:	40 5c       	subi	r20, 0xC0	; 192
    3d9e:	5e 4f       	sbci	r21, 0xFE	; 254
    3da0:	6f 4f       	sbci	r22, 0xFF	; 255
    3da2:	7f 4f       	sbci	r23, 0xFF	; 255
			y_point =320-y_point;
    3da4:	80 e4       	ldi	r24, 0x40	; 64
    3da6:	91 e0       	ldi	r25, 0x01	; 1
    3da8:	84 1b       	sub	r24, r20
    3daa:	95 0b       	sbc	r25, r21
    3dac:	90 93 73 01 	sts	0x0173, r25
    3db0:	80 93 72 01 	sts	0x0172, r24
		
			//press at the cancel button position
			if (x_point < 230 && x_point > 170 && y_point > 170 && y_point < 230){
    3db4:	96 01       	movw	r18, r12
    3db6:	2b 5a       	subi	r18, 0xAB	; 171
    3db8:	31 09       	sbc	r19, r1
    3dba:	2b 33       	cpi	r18, 0x3B	; 59
    3dbc:	31 05       	cpc	r19, r1
    3dbe:	90 f5       	brcc	.+100    	; 0x3e24 <__vector_14+0x324>
    3dc0:	25 e9       	ldi	r18, 0x95	; 149
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	24 1b       	sub	r18, r20
    3dc6:	35 0b       	sbc	r19, r21
    3dc8:	2b 33       	cpi	r18, 0x3B	; 59
    3dca:	31 05       	cpc	r19, r1
    3dcc:	58 f5       	brcc	.+86     	; 0x3e24 <__vector_14+0x324>
				if (((y_point-PENRADIUS) > BOXSIZE) && ((y_point+PENRADIUS) < 320)) {
    3dce:	26 e3       	ldi	r18, 0x36	; 54
    3dd0:	31 e0       	ldi	r19, 0x01	; 1
    3dd2:	24 1b       	sub	r18, r20
    3dd4:	35 0b       	sbc	r19, r21
    3dd6:	29 32       	cpi	r18, 0x29	; 41
    3dd8:	31 05       	cpc	r19, r1
    3dda:	70 f0       	brcs	.+28     	; 0x3df8 <__vector_14+0x2f8>
    3ddc:	2a e4       	ldi	r18, 0x4A	; 74
    3dde:	31 e0       	ldi	r19, 0x01	; 1
    3de0:	24 1b       	sub	r18, r20
    3de2:	35 0b       	sbc	r19, r21
    3de4:	20 34       	cpi	r18, 0x40	; 64
    3de6:	31 40       	sbci	r19, 0x01	; 1
    3de8:	38 f4       	brcc	.+14     	; 0x3df8 <__vector_14+0x2f8>
					fillCircle( y_point,x_point, PENRADIUS, YELLOW); }	
    3dea:	20 ee       	ldi	r18, 0xE0	; 224
    3dec:	3f ef       	ldi	r19, 0xFF	; 255
    3dee:	4a e0       	ldi	r20, 0x0A	; 10
    3df0:	50 e0       	ldi	r21, 0x00	; 0
    3df2:	b6 01       	movw	r22, r12
    3df4:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z10fillCircleiiij>
				press_now = 1;
    3df8:	81 e0       	ldi	r24, 0x01	; 1
    3dfa:	80 93 b0 01 	sts	0x01B0, r24
				if (earlier_press == 0) //when pressed again
    3dfe:	80 91 08 01 	lds	r24, 0x0108
    3e02:	81 11       	cpse	r24, r1
    3e04:	0f c0       	rjmp	.+30     	; 0x3e24 <__vector_14+0x324>
				{
					fufu=1;
    3e06:	c1 e0       	ldi	r28, 0x01	; 1
    3e08:	c0 93 b5 01 	sts	0x01B5, r28
					cancel =1; //zero cancel in function before return
    3e0c:	c0 93 a6 01 	sts	0x01A6, r28
					fillScreen(WHITE);
    3e10:	8f ef       	ldi	r24, 0xFF	; 255
    3e12:	9f ef       	ldi	r25, 0xFF	; 255
    3e14:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z10fillScreenj>
					delay_ms(10);
    3e18:	8a e0       	ldi	r24, 0x0A	; 10
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
					earlier_press=1;
    3e20:	c0 93 08 01 	sts	0x0108, r28
				}
			
			} 
		}
		if (earlier_press == 1){
    3e24:	80 91 08 01 	lds	r24, 0x0108
    3e28:	81 30       	cpi	r24, 0x01	; 1
    3e2a:	d1 f4       	brne	.+52     	; 0x3e60 <__vector_14+0x360>
			cancel_timer++;
    3e2c:	80 91 b6 01 	lds	r24, 0x01B6
    3e30:	90 91 b7 01 	lds	r25, 0x01B7
    3e34:	01 96       	adiw	r24, 0x01	; 1
    3e36:	90 93 b7 01 	sts	0x01B7, r25
    3e3a:	80 93 b6 01 	sts	0x01B6, r24
			//first if it has still been pressed
			if (press_now == 1){
    3e3e:	20 91 b0 01 	lds	r18, 0x01B0
    3e42:	21 30       	cpi	r18, 0x01	; 1
    3e44:	29 f4       	brne	.+10     	; 0x3e50 <__vector_14+0x350>
				cancel_timer=0;
    3e46:	10 92 b7 01 	sts	0x01B7, r1
    3e4a:	10 92 b6 01 	sts	0x01B6, r1
    3e4e:	08 c0       	rjmp	.+16     	; 0x3e60 <__vector_14+0x360>
			}
			//if not then zero the timer after 3sec and cancel can be pressed again
			if (cancel_timer >= 3){
    3e50:	03 97       	sbiw	r24, 0x03	; 3
    3e52:	30 f0       	brcs	.+12     	; 0x3e60 <__vector_14+0x360>
				cancel_timer=0;
    3e54:	10 92 b7 01 	sts	0x01B7, r1
    3e58:	10 92 b6 01 	sts	0x01B6, r1
				earlier_press =0;
    3e5c:	10 92 08 01 	sts	0x0108, r1

		//setWriteDirInline();
	}
	
	
	timerbuzz++;
    3e60:	80 91 b8 01 	lds	r24, 0x01B8
    3e64:	90 91 b9 01 	lds	r25, 0x01B9
    3e68:	01 96       	adiw	r24, 0x01	; 1
    3e6a:	90 93 b9 01 	sts	0x01B9, r25
    3e6e:	80 93 b8 01 	sts	0x01B8, r24
	if(buzzer ==1 && timerbuzz > 5){
    3e72:	20 91 b3 01 	lds	r18, 0x01B3
    3e76:	21 30       	cpi	r18, 0x01	; 1
    3e78:	11 f4       	brne	.+4      	; 0x3e7e <__vector_14+0x37e>
    3e7a:	06 97       	sbiw	r24, 0x06	; 6
    3e7c:	a0 f4       	brcc	.+40     	; 0x3ea6 <__vector_14+0x3a6>
		buzzeron;
		delay_ms(1); //should be 0.28ms to be most effective
		buzzeroff;
		
	}
	if(timerbuzz > 1000){
    3e7e:	80 91 b8 01 	lds	r24, 0x01B8
    3e82:	90 91 b9 01 	lds	r25, 0x01B9
    3e86:	89 3e       	cpi	r24, 0xE9	; 233
    3e88:	93 40       	sbci	r25, 0x03	; 3
    3e8a:	20 f0       	brcs	.+8      	; 0x3e94 <__vector_14+0x394>
		timerbuzz=0;
    3e8c:	10 92 b9 01 	sts	0x01B9, r1
    3e90:	10 92 b8 01 	sts	0x01B8, r1
	}
	//stop buzzer after a while
	if(gahbuzz > 100){
    3e94:	80 91 b1 01 	lds	r24, 0x01B1
    3e98:	85 36       	cpi	r24, 0x65	; 101
    3e9a:	a8 f0       	brcs	.+42     	; 0x3ec6 <__vector_14+0x3c6>
		buzzer =0;
    3e9c:	10 92 b3 01 	sts	0x01B3, r1
		gahbuzz=0;
    3ea0:	10 92 b1 01 	sts	0x01B1, r1
    3ea4:	10 c0       	rjmp	.+32     	; 0x3ec6 <__vector_14+0x3c6>
	}
	
	
	timerbuzz++;
	if(buzzer ==1 && timerbuzz > 5){
		gahbuzz++;
    3ea6:	80 91 b1 01 	lds	r24, 0x01B1
    3eaa:	8f 5f       	subi	r24, 0xFF	; 255
    3eac:	80 93 b1 01 	sts	0x01B1, r24
		timerbuzz=0;
    3eb0:	10 92 b9 01 	sts	0x01B9, r1
    3eb4:	10 92 b8 01 	sts	0x01B8, r1
		buzzeron;
    3eb8:	45 9a       	sbi	0x08, 5	; 8
		delay_ms(1); //should be 0.28ms to be most effective
    3eba:	81 e0       	ldi	r24, 0x01	; 1
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
		buzzeroff;
    3ec2:	45 98       	cbi	0x08, 5	; 8
    3ec4:	dc cf       	rjmp	.-72     	; 0x3e7e <__vector_14+0x37e>
	if(gahbuzz > 100){
		buzzer =0;
		gahbuzz=0;
	}

}
    3ec6:	ff 91       	pop	r31
    3ec8:	ef 91       	pop	r30
    3eca:	cf 91       	pop	r28
    3ecc:	bf 91       	pop	r27
    3ece:	af 91       	pop	r26
    3ed0:	9f 91       	pop	r25
    3ed2:	8f 91       	pop	r24
    3ed4:	7f 91       	pop	r23
    3ed6:	6f 91       	pop	r22
    3ed8:	5f 91       	pop	r21
    3eda:	4f 91       	pop	r20
    3edc:	3f 91       	pop	r19
    3ede:	2f 91       	pop	r18
    3ee0:	1f 91       	pop	r17
    3ee2:	0f 91       	pop	r16
    3ee4:	ff 90       	pop	r15
    3ee6:	ef 90       	pop	r14
    3ee8:	df 90       	pop	r13
    3eea:	cf 90       	pop	r12
    3eec:	0f 90       	pop	r0
    3eee:	0f be       	out	0x3f, r0	; 63
    3ef0:	0f 90       	pop	r0
    3ef2:	1f 90       	pop	r1
    3ef4:	18 95       	reti

00003ef6 <main>:


int main(void)
{
    3ef6:	cf 93       	push	r28
    3ef8:	df 93       	push	r29
    3efa:	cd b7       	in	r28, 0x3d	; 61
    3efc:	de b7       	in	r29, 0x3e	; 62
    3efe:	ae 97       	sbiw	r28, 0x2e	; 46
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	cd bf       	out	0x3d, r28	; 61
writefirsttime();
    3f0a:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <_Z14writefirsttimev>
	
	delay_ms(1000);
    3f0e:	88 ee       	ldi	r24, 0xE8	; 232
    3f10:	93 e0       	ldi	r25, 0x03	; 3
    3f12:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>

	system_setup();
    3f16:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <_Z12system_setupv>
	screen_setup();	//screen and touchscreen setup
    3f1a:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <_Z12screen_setupv>



void MAX31855_init(void) {
  	
MAX31855_IDLE; 
    3f1e:	58 9a       	sbi	0x0b, 0	; 11
	MAX31855_init(); //temperature chip
cli(); //disable interrupts //was at beginning of system setup, start PWM can be glitchy if not next to each other
    3f20:	f8 94       	cli
sei(); //enable interrupts
    3f22:	78 94       	sei
//for hardware spi to work, have to redo these here
DDRB = 0b00101111;
    3f24:	8f e2       	ldi	r24, 0x2F	; 47
    3f26:	84 b9       	out	0x04, r24	; 4
PORTB = 0b00000000; //output 0 and input tri-state
    3f28:	15 b8       	out	0x05, r1	; 5
//spi enabled, clk/16 mode, master
SPCR=0b01010010; //0b01010001; //now fixed with rising edge sampling
    3f2a:	82 e5       	ldi	r24, 0x52	; 82
    3f2c:	8c bd       	out	0x2c, r24	; 44

fillScreen(WHITE);
    3f2e:	8f ef       	ldi	r24, 0xFF	; 255
    3f30:	9f ef       	ldi	r25, 0xFF	; 255
    3f32:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z10fillScreenj>
delay_ms(1000);
    3f36:	88 ee       	ldi	r24, 0xE8	; 232
    3f38:	93 e0       	ldi	r25, 0x03	; 3
    3f3a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
//int pressed=0;
char temperature_now[4]={0,0,0,0};
    3f3e:	1c 8a       	std	Y+20, r1	; 0x14
    3f40:	1d 8a       	std	Y+21, r1	; 0x15
    3f42:	1e 8a       	std	Y+22, r1	; 0x16
    3f44:	1f 8a       	std	Y+23, r1	; 0x17

//char xx[10];
//char xxx[10];
//uint16_t gah=0;
//uint16_t gah1=0;
fillScreen(WHITE);
    3f46:	8f ef       	ldi	r24, 0xFF	; 255
    3f48:	9f ef       	ldi	r25, 0xFF	; 255
    3f4a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z10fillScreenj>
delay_ms(500);
    3f4e:	84 ef       	ldi	r24, 0xF4	; 244
    3f50:	91 e0       	ldi	r25, 0x01	; 1
    3f52:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
   
	//drawLine(0, 240,100,50,BLACK);
	
	
	READ_EEPROM();
    3f56:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <_Z11READ_EEPROMv>
    3f5a:	0f 2e       	mov	r0, r31
    3f5c:	f4 e3       	ldi	r31, 0x34	; 52
    3f5e:	4f 2e       	mov	r4, r31
    3f60:	f3 e0       	ldi	r31, 0x03	; 3
    3f62:	5f 2e       	mov	r5, r31
    3f64:	61 2c       	mov	r6, r1
    3f66:	71 2c       	mov	r7, r1
    3f68:	f0 2d       	mov	r31, r0
		if (pressed > MINPRESSURE && pressed < MAXPRESSURE ) { //it has been pressed or pressure is something measurable
			getPoint( &x_point, &y_point, &z_point); //now points house the values
			
			x_point = map(x_point, TS_MINX, TS_MAXX, 240, 0);
			y_point = map(y_point, TS_MINY, TS_MAXY, 320, 0);
			y_point =320-y_point;
    3f6a:	68 94       	set
    3f6c:	aa 24       	eor	r10, r10
    3f6e:	a6 f8       	bld	r10, 6
    3f70:	bb 24       	eor	r11, r11
    3f72:	b3 94       	inc	r11
    3f74:	2a ec       	ldi	r18, 0xCA	; 202
    3f76:	31 e0       	ldi	r19, 0x01	; 1
    3f78:	28 5d       	subi	r18, 0xD8	; 216
    3f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f7c:	3e a7       	std	Y+46, r19	; 0x2e
    3f7e:	2d a7       	std	Y+45, r18	; 0x2d
		//if(cmd_pulse == 1) {			
		//cmd_pulse =0;				
		//}
		
		
		timer_help_seconds=0;
    3f80:	10 92 ad 01 	sts	0x01AD, r1
    3f84:	10 92 ac 01 	sts	0x01AC, r1
		//fillScreen(WHITE);
		//delay_ms(100);
		DrawProfilestart(); //startup screen
    3f88:	0e 94 57 1c 	call	0x38ae	; 0x38ae <_Z16DrawProfilestartv>
		
		pressed=0;
    3f8c:	10 92 a7 01 	sts	0x01A7, r1
		pressed=pressure();
    3f90:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <_Z8pressurev>
    3f94:	80 93 a7 01 	sts	0x01A7, r24
		if (pressed > MINPRESSURE && pressed < MAXPRESSURE ) { //it has been pressed or pressure is something measurable
    3f98:	8b 30       	cpi	r24, 0x0B	; 11
    3f9a:	08 f4       	brcc	.+2      	; 0x3f9e <main+0xa8>
    3f9c:	1e c4       	rjmp	.+2108   	; 0x47da <main+0x8e4>
			getPoint( &x_point, &y_point, &z_point); //now points house the values
    3f9e:	4e e6       	ldi	r20, 0x6E	; 110
    3fa0:	51 e0       	ldi	r21, 0x01	; 1
    3fa2:	62 e7       	ldi	r22, 0x72	; 114
    3fa4:	71 e0       	ldi	r23, 0x01	; 1
    3fa6:	84 e7       	ldi	r24, 0x74	; 116
    3fa8:	91 e0       	ldi	r25, 0x01	; 1
    3faa:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_Z8getPointPjS_Pd>
			
			x_point = map(x_point, TS_MINX, TS_MAXX, 240, 0);
    3fae:	20 91 74 01 	lds	r18, 0x0174
    3fb2:	30 91 75 01 	lds	r19, 0x0175
    3fb6:	c9 01       	movw	r24, r18
    3fb8:	a0 e0       	ldi	r26, 0x00	; 0
    3fba:	b0 e0       	ldi	r27, 0x00	; 0
    3fbc:	9c 01       	movw	r18, r24
    3fbe:	ad 01       	movw	r20, r26
    3fc0:	26 59       	subi	r18, 0x96	; 150
    3fc2:	31 09       	sbc	r19, r1
    3fc4:	41 09       	sbc	r20, r1
    3fc6:	51 09       	sbc	r21, r1
    3fc8:	a0 e1       	ldi	r26, 0x10	; 16
    3fca:	bf ef       	ldi	r27, 0xFF	; 255
    3fcc:	0e 94 0c 28 	call	0x5018	; 0x5018 <__mulohisi3>
    3fd0:	22 e0       	ldi	r18, 0x02	; 2
    3fd2:	33 e0       	ldi	r19, 0x03	; 3
    3fd4:	40 e0       	ldi	r20, 0x00	; 0
    3fd6:	50 e0       	ldi	r21, 0x00	; 0
    3fd8:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__divmodsi4>
    3fdc:	69 01       	movw	r12, r18
    3fde:	7a 01       	movw	r14, r20
    3fe0:	80 ef       	ldi	r24, 0xF0	; 240
    3fe2:	c8 0e       	add	r12, r24
    3fe4:	d1 1c       	adc	r13, r1
    3fe6:	e1 1c       	adc	r14, r1
    3fe8:	f1 1c       	adc	r15, r1
    3fea:	d0 92 75 01 	sts	0x0175, r13
    3fee:	c0 92 74 01 	sts	0x0174, r12
			y_point = map(y_point, TS_MINY, TS_MAXY, 320, 0);
    3ff2:	20 91 72 01 	lds	r18, 0x0172
    3ff6:	30 91 73 01 	lds	r19, 0x0173
    3ffa:	c9 01       	movw	r24, r18
    3ffc:	a0 e0       	ldi	r26, 0x00	; 0
    3ffe:	b0 e0       	ldi	r27, 0x00	; 0
    4000:	9c 01       	movw	r18, r24
    4002:	ad 01       	movw	r20, r26
    4004:	28 57       	subi	r18, 0x78	; 120
    4006:	31 09       	sbc	r19, r1
    4008:	41 09       	sbc	r20, r1
    400a:	51 09       	sbc	r21, r1
    400c:	a0 ec       	ldi	r26, 0xC0	; 192
    400e:	be ef       	ldi	r27, 0xFE	; 254
    4010:	0e 94 0c 28 	call	0x5018	; 0x5018 <__mulohisi3>
    4014:	a3 01       	movw	r20, r6
    4016:	92 01       	movw	r18, r4
    4018:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__divmodsi4>
    401c:	89 01       	movw	r16, r18
    401e:	9a 01       	movw	r18, r20
    4020:	00 5c       	subi	r16, 0xC0	; 192
    4022:	1e 4f       	sbci	r17, 0xFE	; 254
    4024:	2f 4f       	sbci	r18, 0xFF	; 255
    4026:	3f 4f       	sbci	r19, 0xFF	; 255
			y_point =320-y_point;
    4028:	c5 01       	movw	r24, r10
    402a:	80 1b       	sub	r24, r16
    402c:	91 0b       	sbc	r25, r17
    402e:	90 93 73 01 	sts	0x0173, r25
    4032:	80 93 72 01 	sts	0x0172, r24
			
			if (((y_point-PENRADIUS) > BOXSIZE) && ((y_point+PENRADIUS) < 320)) {
    4036:	46 e3       	ldi	r20, 0x36	; 54
    4038:	51 e0       	ldi	r21, 0x01	; 1
    403a:	40 1b       	sub	r20, r16
    403c:	51 0b       	sbc	r21, r17
    403e:	49 32       	cpi	r20, 0x29	; 41
    4040:	51 05       	cpc	r21, r1
    4042:	70 f0       	brcs	.+28     	; 0x4060 <main+0x16a>
    4044:	4a e4       	ldi	r20, 0x4A	; 74
    4046:	51 e0       	ldi	r21, 0x01	; 1
    4048:	40 1b       	sub	r20, r16
    404a:	51 0b       	sbc	r21, r17
    404c:	40 34       	cpi	r20, 0x40	; 64
    404e:	51 40       	sbci	r21, 0x01	; 1
    4050:	38 f4       	brcc	.+14     	; 0x4060 <main+0x16a>
				fillCircle( y_point,x_point, PENRADIUS, RED);
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	38 ef       	ldi	r19, 0xF8	; 248
    4056:	4a e0       	ldi	r20, 0x0A	; 10
    4058:	50 e0       	ldi	r21, 0x00	; 0
    405a:	b6 01       	movw	r22, r12
    405c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Z10fillCircleiiij>
			}
			//intToStr(x_point, xx,4);
			//intToStr(y_point, xxx,4);
			//drawString( 120,120,xxx, BLACK, WHITE, 3);
			//drawString( 100,100,xx, BLACK, WHITE, 3);
			delay_ms(500);
    4060:	84 ef       	ldi	r24, 0xF4	; 244
    4062:	91 e0       	ldi	r25, 0x01	; 1
    4064:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
			
			//start active profile 
			if(y_point <  150 && y_point > 90 && x_point < 130 && x_point > 70){
    4068:	80 91 72 01 	lds	r24, 0x0172
    406c:	90 91 73 01 	lds	r25, 0x0173
    4070:	8b 55       	subi	r24, 0x5B	; 91
    4072:	91 09       	sbc	r25, r1
    4074:	cb 97       	sbiw	r24, 0x3b	; 59
    4076:	08 f0       	brcs	.+2      	; 0x407a <main+0x184>
    4078:	a0 c1       	rjmp	.+832    	; 0x43ba <main+0x4c4>
    407a:	80 91 74 01 	lds	r24, 0x0174
    407e:	90 91 75 01 	lds	r25, 0x0175
    4082:	87 54       	subi	r24, 0x47	; 71
    4084:	91 09       	sbc	r25, r1
    4086:	cb 97       	sbiw	r24, 0x3b	; 59
    4088:	08 f0       	brcs	.+2      	; 0x408c <main+0x196>
    408a:	97 c1       	rjmp	.+814    	; 0x43ba <main+0x4c4>
				//cancel =0; //stop cancel
				fillScreen(WHITE);
    408c:	8f ef       	ldi	r24, 0xFF	; 255
    408e:	9f ef       	ldi	r25, 0xFF	; 255
    4090:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z10fillScreenj>
				delay_ms(100);
    4094:	84 e6       	ldi	r24, 0x64	; 100
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
				fillScreen(WHITE);
    409c:	8f ef       	ldi	r24, 0xFF	; 255
    409e:	9f ef       	ldi	r25, 0xFF	; 255
    40a0:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z10fillScreenj>
				delay_ms(100);
    40a4:	84 e6       	ldi	r24, 0x64	; 100
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
				fillScreen(WHITE);
    40ac:	8f ef       	ldi	r24, 0xFF	; 255
    40ae:	9f ef       	ldi	r25, 0xFF	; 255
    40b0:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z10fillScreenj>
				delay_ms(500);
    40b4:	84 ef       	ldi	r24, 0xF4	; 244
    40b6:	91 e0       	ldi	r25, 0x01	; 1
    40b8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
				DrawTempDisplayRef();
    40bc:	0e 94 71 19 	call	0x32e2	; 0x32e2 <_Z18DrawTempDisplayRefv>
				DrawCancelBut();
    40c0:	0e 94 16 1c 	call	0x382c	; 0x382c <_Z13DrawCancelButv>
				delay_ms(100);
    40c4:	84 e6       	ldi	r24, 0x64	; 100
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
				DrawTempDisplayRef();
    40cc:	0e 94 71 19 	call	0x32e2	; 0x32e2 <_Z18DrawTempDisplayRefv>
				DrawCancelBut();
    40d0:	0e 94 16 1c 	call	0x382c	; 0x382c <_Z13DrawCancelButv>
				delay_ms(100);
    40d4:	84 e6       	ldi	r24, 0x64	; 100
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
				timer_help_seconds=0;
    40dc:	10 92 ad 01 	sts	0x01AD, r1
    40e0:	10 92 ac 01 	sts	0x01AC, r1
				heat_up(prof.PreHeatTemp, prof.PreHeatTime, timer_help_seconds, cancel, resample);
    40e4:	04 ea       	ldi	r16, 0xA4	; 164
    40e6:	11 e0       	ldi	r17, 0x01	; 1
    40e8:	26 ea       	ldi	r18, 0xA6	; 166
    40ea:	31 e0       	ldi	r19, 0x01	; 1
    40ec:	4c ea       	ldi	r20, 0xAC	; 172
    40ee:	51 e0       	ldi	r21, 0x01	; 1
    40f0:	68 e7       	ldi	r22, 0x78	; 120
    40f2:	71 e0       	ldi	r23, 0x01	; 1
    40f4:	86 e7       	ldi	r24, 0x76	; 118
    40f6:	91 e0       	ldi	r25, 0x01	; 1
    40f8:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_Z7heat_upRjS_S_RbS0_>
				timer_help_seconds=0;
    40fc:	10 92 ad 01 	sts	0x01AD, r1
    4100:	10 92 ac 01 	sts	0x01AC, r1
				//DrawCancelBut();
				soak_up(prof.SoakHeatTemp, prof.SoakHeatTime, timer_help_seconds, cancel, resample);
    4104:	26 ea       	ldi	r18, 0xA6	; 166
    4106:	31 e0       	ldi	r19, 0x01	; 1
    4108:	4c ea       	ldi	r20, 0xAC	; 172
    410a:	51 e0       	ldi	r21, 0x01	; 1
    410c:	6c e7       	ldi	r22, 0x7C	; 124
    410e:	71 e0       	ldi	r23, 0x01	; 1
    4110:	8a e7       	ldi	r24, 0x7A	; 122
    4112:	91 e0       	ldi	r25, 0x01	; 1
    4114:	0e 94 2a 12 	call	0x2454	; 0x2454 <_Z7soak_upRjS_S_RbS0_>
				timer_help_seconds=0;
    4118:	10 92 ad 01 	sts	0x01AD, r1
    411c:	10 92 ac 01 	sts	0x01AC, r1
				//DrawCancelBut();
				ramp_up(prof.PeakHeatTemp,prof.PeakHeatTime,timer_help_seconds, cancel, resample);
    4120:	26 ea       	ldi	r18, 0xA6	; 166
    4122:	31 e0       	ldi	r19, 0x01	; 1
    4124:	4c ea       	ldi	r20, 0xAC	; 172
    4126:	51 e0       	ldi	r21, 0x01	; 1
    4128:	60 e8       	ldi	r22, 0x80	; 128
    412a:	71 e0       	ldi	r23, 0x01	; 1
    412c:	8e e7       	ldi	r24, 0x7E	; 126
    412e:	91 e0       	ldi	r25, 0x01	; 1
    4130:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_Z7ramp_upRjS_S_RbS0_>
				//cancel =0; //stop cancel at the end
				OCR1A=0;		
    4134:	10 92 89 00 	sts	0x0089, r1
    4138:	10 92 88 00 	sts	0x0088, r1
				//do a loop here where temp is checked and dot drawn every second till some time to show cooldown
				timer_help_seconds=0;
    413c:	10 92 ad 01 	sts	0x01AD, r1
    4140:	10 92 ac 01 	sts	0x01AC, r1
				int16_t draw_temp=0;
				int16_t draw_time=0;
				double tmp=0;
				double req_time=(double)320/(prof.PreHeatTime+prof.SoakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime+30);
    4144:	80 91 80 01 	lds	r24, 0x0180
    4148:	90 91 81 01 	lds	r25, 0x0181
    414c:	60 91 78 01 	lds	r22, 0x0178
    4150:	70 91 79 01 	lds	r23, 0x0179
    4154:	20 91 7c 01 	lds	r18, 0x017C
    4158:	30 91 7d 01 	lds	r19, 0x017D
    415c:	62 0f       	add	r22, r18
    415e:	73 1f       	adc	r23, r19
    4160:	62 5e       	subi	r22, 0xE2	; 226
    4162:	7f 4f       	sbci	r23, 0xFF	; 255
    4164:	68 0f       	add	r22, r24
    4166:	79 1f       	adc	r23, r25
    4168:	68 0f       	add	r22, r24
    416a:	79 1f       	adc	r23, r25
    416c:	68 0f       	add	r22, r24
    416e:	79 1f       	adc	r23, r25
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    4178:	9b 01       	movw	r18, r22
    417a:	ac 01       	movw	r20, r24
    417c:	60 e0       	ldi	r22, 0x00	; 0
    417e:	70 e0       	ldi	r23, 0x00	; 0
    4180:	80 ea       	ldi	r24, 0xA0	; 160
    4182:	93 e4       	ldi	r25, 0x43	; 67
    4184:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
    4188:	68 8f       	std	Y+24, r22	; 0x18
    418a:	79 8f       	std	Y+25, r23	; 0x19
    418c:	8a 8f       	std	Y+26, r24	; 0x1a
    418e:	9b 8f       	std	Y+27, r25	; 0x1b
				double req_temp=(double)220/(prof.PeakHeatTemp+35); //that's what we should need from display 220 pixels for temp
    4190:	60 91 7e 01 	lds	r22, 0x017E
    4194:	70 91 7f 01 	lds	r23, 0x017F
    4198:	6d 5d       	subi	r22, 0xDD	; 221
    419a:	7f 4f       	sbci	r23, 0xFF	; 255
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    41a4:	9b 01       	movw	r18, r22
    41a6:	ac 01       	movw	r20, r24
    41a8:	60 e0       	ldi	r22, 0x00	; 0
    41aa:	70 e0       	ldi	r23, 0x00	; 0
    41ac:	8c e5       	ldi	r24, 0x5C	; 92
    41ae:	93 e4       	ldi	r25, 0x43	; 67
    41b0:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__divsf3>
    41b4:	6c 8f       	std	Y+28, r22	; 0x1c
    41b6:	7d 8f       	std	Y+29, r23	; 0x1d
    41b8:	8e 8f       	std	Y+30, r24	; 0x1e
    41ba:	9f 8f       	std	Y+31, r25	; 0x1f
				//DrawCancelBut();
				
				char xx[9]="Cooldown";
    41bc:	89 e0       	ldi	r24, 0x09	; 9
    41be:	e4 e6       	ldi	r30, 0x64	; 100
    41c0:	f1 e0       	ldi	r31, 0x01	; 1
    41c2:	de 01       	movw	r26, r28
    41c4:	1b 96       	adiw	r26, 0x0b	; 11
    41c6:	01 90       	ld	r0, Z+
    41c8:	0d 92       	st	X+, r0
    41ca:	8a 95       	dec	r24
    41cc:	e1 f7       	brne	.-8      	; 0x41c6 <main+0x2d0>
				char duty1[10];
				drawString( 200,0,xx, WHITE, GREEN, 2);
    41ce:	68 94       	set
    41d0:	ee 24       	eor	r14, r14
    41d2:	e1 f8       	bld	r14, 1
    41d4:	00 ee       	ldi	r16, 0xE0	; 224
    41d6:	17 e0       	ldi	r17, 0x07	; 7
    41d8:	2f ef       	ldi	r18, 0xFF	; 255
    41da:	3f ef       	ldi	r19, 0xFF	; 255
    41dc:	ae 01       	movw	r20, r28
    41de:	45 5f       	subi	r20, 0xF5	; 245
    41e0:	5f 4f       	sbci	r21, 0xFF	; 255
    41e2:	60 e0       	ldi	r22, 0x00	; 0
    41e4:	70 e0       	ldi	r23, 0x00	; 0
    41e6:	88 ec       	ldi	r24, 0xC8	; 200
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
					buzzer=1;
    41ee:	81 e0       	ldi	r24, 0x01	; 1
    41f0:	80 93 b3 01 	sts	0x01B3, r24
							drawPixel(draw_time, 240-draw_temp,color_real); //x,y
							drawPixel(draw_time, 240-draw_temp+1,color_real); //x,y
							}
							else if( draw_time >= 320){
							
								drawPixel(draw_time-320, 240-draw_temp,color_real); //x,y
    41f4:	0f 2e       	mov	r0, r31
    41f6:	f0 ef       	ldi	r31, 0xF0	; 240
    41f8:	8f 2e       	mov	r8, r31
    41fa:	91 2c       	mov	r9, r1
    41fc:	f0 2d       	mov	r31, r0
								drawPixel(draw_time-320, 240-draw_temp+1,color_real); //x,y
    41fe:	0f 2e       	mov	r0, r31
    4200:	f1 ef       	ldi	r31, 0xF1	; 241
    4202:	2f 2e       	mov	r2, r31
    4204:	31 2c       	mov	r3, r1
    4206:	f0 2d       	mov	r31, r0
				
				char xx[9]="Cooldown";
				char duty1[10];
				drawString( 200,0,xx, WHITE, GREEN, 2);
					buzzer=1;
					while(cancel==0){
    4208:	b9 c0       	rjmp	.+370    	; 0x437c <main+0x486>
						
						if(fufu==1){
    420a:	80 91 b5 01 	lds	r24, 0x01B5
    420e:	81 30       	cpi	r24, 0x01	; 1
    4210:	29 f4       	brne	.+10     	; 0x421c <main+0x326>
							OCR1A=0;
    4212:	10 92 89 00 	sts	0x0089, r1
    4216:	10 92 88 00 	sts	0x0088, r1
							break;
    421a:	b5 c0       	rjmp	.+362    	; 0x4386 <main+0x490>
						}
						
						if(resample2 == 1) {
    421c:	80 91 b4 01 	lds	r24, 0x01B4
    4220:	81 30       	cpi	r24, 0x01	; 1
    4222:	99 f7       	brne	.-26     	; 0x420a <main+0x314>
							//delay_ms(131);
							resample2= 0;
    4224:	10 92 b4 01 	sts	0x01B4, r1
							tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    4228:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
							//delay_ms(5);
							//should be zero
							//duty3=OCR1A;
							
							draw_temp=round(tmp*req_temp);
    422c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    422e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    4230:	4e 8d       	ldd	r20, Y+30	; 0x1e
    4232:	5f 8d       	ldd	r21, Y+31	; 0x1f
    4234:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    4238:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    423c:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    4240:	6c a3       	std	Y+36, r22	; 0x24
    4242:	7d a3       	std	Y+37, r23	; 0x25
    4244:	8e a3       	std	Y+38, r24	; 0x26
    4246:	9f a3       	std	Y+39, r25	; 0x27
							draw_time=round((timer_help_seconds+prof.PreHeatTime+prof.SoakHeatTime+prof.PeakHeatTime+prof.PeakHeatTime)*req_time);
    4248:	e0 e8       	ldi	r30, 0x80	; 128
    424a:	f1 e0       	ldi	r31, 0x01	; 1
    424c:	80 81       	ld	r24, Z
    424e:	91 81       	ldd	r25, Z+1	; 0x01
    4250:	60 91 ac 01 	lds	r22, 0x01AC
    4254:	70 91 ad 01 	lds	r23, 0x01AD
    4258:	a8 e7       	ldi	r26, 0x78	; 120
    425a:	b1 e0       	ldi	r27, 0x01	; 1
    425c:	2d 91       	ld	r18, X+
    425e:	3c 91       	ld	r19, X
    4260:	62 0f       	add	r22, r18
    4262:	73 1f       	adc	r23, r19
    4264:	ec e7       	ldi	r30, 0x7C	; 124
    4266:	f1 e0       	ldi	r31, 0x01	; 1
    4268:	20 81       	ld	r18, Z
    426a:	31 81       	ldd	r19, Z+1	; 0x01
    426c:	62 0f       	add	r22, r18
    426e:	73 1f       	adc	r23, r19
    4270:	68 0f       	add	r22, r24
    4272:	79 1f       	adc	r23, r25
    4274:	68 0f       	add	r22, r24
    4276:	79 1f       	adc	r23, r25
    4278:	80 e0       	ldi	r24, 0x00	; 0
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__floatunsisf>
    4280:	28 8d       	ldd	r18, Y+24	; 0x18
    4282:	39 8d       	ldd	r19, Y+25	; 0x19
    4284:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4286:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4288:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    428c:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    4290:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    4294:	68 a3       	std	Y+32, r22	; 0x20
    4296:	79 a3       	std	Y+33, r23	; 0x21
    4298:	8a a3       	std	Y+34, r24	; 0x22
    429a:	9b a3       	std	Y+35, r25	; 0x23
    429c:	c8 a0       	ldd	r12, Y+32	; 0x20
    429e:	d9 a0       	ldd	r13, Y+33	; 0x21
							
							intToStr(duty3, duty1 ,3);
    42a0:	80 91 a8 01 	lds	r24, 0x01A8
    42a4:	90 91 a9 01 	lds	r25, 0x01A9
    42a8:	43 e0       	ldi	r20, 0x03	; 3
    42aa:	50 e0       	ldi	r21, 0x00	; 0
    42ac:	be 01       	movw	r22, r28
    42ae:	6f 5f       	subi	r22, 0xFF	; 255
    42b0:	7f 4f       	sbci	r23, 0xFF	; 255
    42b2:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
							drawString( 70, 232, cycle112, BLACK, YELLOW, 1); //x and y are inverted
    42b6:	ee 24       	eor	r14, r14
    42b8:	e3 94       	inc	r14
    42ba:	00 ee       	ldi	r16, 0xE0	; 224
    42bc:	1f ef       	ldi	r17, 0xFF	; 255
    42be:	20 e0       	ldi	r18, 0x00	; 0
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	42 e0       	ldi	r20, 0x02	; 2
    42c4:	51 e0       	ldi	r21, 0x01	; 1
    42c6:	68 ee       	ldi	r22, 0xE8	; 232
    42c8:	70 e0       	ldi	r23, 0x00	; 0
    42ca:	86 e4       	ldi	r24, 0x46	; 70
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
							drawString( 100, 232, duty1, BLACK, YELLOW, 1); //x and y are inverted
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	ae 01       	movw	r20, r28
    42d8:	4f 5f       	subi	r20, 0xFF	; 255
    42da:	5f 4f       	sbci	r21, 0xFF	; 255
    42dc:	68 ee       	ldi	r22, 0xE8	; 232
    42de:	70 e0       	ldi	r23, 0x00	; 0
    42e0:	84 e6       	ldi	r24, 0x64	; 100
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
							drawString( 118, 232, percentmark, BLACK, YELLOW, 1); //x and y are inverted
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	40 e0       	ldi	r20, 0x00	; 0
    42ee:	51 e0       	ldi	r21, 0x01	; 1
    42f0:	68 ee       	ldi	r22, 0xE8	; 232
    42f2:	70 e0       	ldi	r23, 0x00	; 0
    42f4:	86 e7       	ldi	r24, 0x76	; 118
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
							
							if( draw_time < 320){
    42fc:	f0 e4       	ldi	r31, 0x40	; 64
    42fe:	cf 16       	cp	r12, r31
    4300:	f1 e0       	ldi	r31, 0x01	; 1
    4302:	df 06       	cpc	r13, r31
    4304:	bc f4       	brge	.+46     	; 0x4334 <main+0x43e>
							drawPixel(draw_time, 240-draw_temp,color_real); //x,y
    4306:	b4 01       	movw	r22, r8
    4308:	2c a1       	ldd	r18, Y+36	; 0x24
    430a:	3d a1       	ldd	r19, Y+37	; 0x25
    430c:	62 1b       	sub	r22, r18
    430e:	73 0b       	sbc	r23, r19
    4310:	40 e0       	ldi	r20, 0x00	; 0
    4312:	58 ef       	ldi	r21, 0xF8	; 248
    4314:	88 a1       	ldd	r24, Y+32	; 0x20
    4316:	99 a1       	ldd	r25, Y+33	; 0x21
    4318:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
							drawPixel(draw_time, 240-draw_temp+1,color_real); //x,y
    431c:	b1 01       	movw	r22, r2
    431e:	4c a1       	ldd	r20, Y+36	; 0x24
    4320:	5d a1       	ldd	r21, Y+37	; 0x25
    4322:	64 1b       	sub	r22, r20
    4324:	75 0b       	sbc	r23, r21
    4326:	40 e0       	ldi	r20, 0x00	; 0
    4328:	58 ef       	ldi	r21, 0xF8	; 248
    432a:	88 a1       	ldd	r24, Y+32	; 0x20
    432c:	99 a1       	ldd	r25, Y+33	; 0x21
    432e:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
    4332:	1f c0       	rjmp	.+62     	; 0x4372 <main+0x47c>
							}
							else if( draw_time >= 320){
							
								drawPixel(draw_time-320, 240-draw_temp,color_real); //x,y
    4334:	08 a1       	ldd	r16, Y+32	; 0x20
    4336:	19 a1       	ldd	r17, Y+33	; 0x21
    4338:	00 54       	subi	r16, 0x40	; 64
    433a:	11 40       	sbci	r17, 0x01	; 1
    433c:	b4 01       	movw	r22, r8
    433e:	8c a1       	ldd	r24, Y+36	; 0x24
    4340:	9d a1       	ldd	r25, Y+37	; 0x25
    4342:	68 1b       	sub	r22, r24
    4344:	79 0b       	sbc	r23, r25
    4346:	40 e0       	ldi	r20, 0x00	; 0
    4348:	58 ef       	ldi	r21, 0xF8	; 248
    434a:	c8 01       	movw	r24, r16
    434c:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
								drawPixel(draw_time-320, 240-draw_temp+1,color_real); //x,y
    4350:	b1 01       	movw	r22, r2
    4352:	ac a1       	ldd	r26, Y+36	; 0x24
    4354:	bd a1       	ldd	r27, Y+37	; 0x25
    4356:	6a 1b       	sub	r22, r26
    4358:	7b 0b       	sbc	r23, r27
    435a:	40 e0       	ldi	r20, 0x00	; 0
    435c:	58 ef       	ldi	r21, 0xF8	; 248
    435e:	c8 01       	movw	r24, r16
    4360:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
								drawPixel(draw_time-320, 240-50,color_ref); //x,y
    4364:	4f e1       	ldi	r20, 0x1F	; 31
    4366:	50 e0       	ldi	r21, 0x00	; 0
    4368:	6e eb       	ldi	r22, 0xBE	; 190
    436a:	70 e0       	ldi	r23, 0x00	; 0
    436c:	c8 01       	movw	r24, r16
    436e:	0e 94 82 05 	call	0xb04	; 0xb04 <_Z9drawPixeliij>
							}
							if( draw_time >= 640){
    4372:	b0 e8       	ldi	r27, 0x80	; 128
    4374:	cb 16       	cp	r12, r27
    4376:	b2 e0       	ldi	r27, 0x02	; 2
    4378:	db 06       	cpc	r13, r27
    437a:	2c f4       	brge	.+10     	; 0x4386 <main+0x490>
				
				char xx[9]="Cooldown";
				char duty1[10];
				drawString( 200,0,xx, WHITE, GREEN, 2);
					buzzer=1;
					while(cancel==0){
    437c:	80 91 a6 01 	lds	r24, 0x01A6
    4380:	88 23       	and	r24, r24
    4382:	09 f4       	brne	.+2      	; 0x4386 <main+0x490>
    4384:	42 cf       	rjmp	.-380    	; 0x420a <main+0x314>
								break;
							}
						
						}
					}
				fufu=0;
    4386:	10 92 b5 01 	sts	0x01B5, r1
				timer_help_seconds=0;
    438a:	10 92 ad 01 	sts	0x01AD, r1
    438e:	10 92 ac 01 	sts	0x01AC, r1
				cancel =0; //stop cancel at the end
    4392:	10 92 a6 01 	sts	0x01A6, r1
				buzzer=0;
    4396:	10 92 b3 01 	sts	0x01B3, r1
				fillScreen(WHITE);
    439a:	8f ef       	ldi	r24, 0xFF	; 255
    439c:	9f ef       	ldi	r25, 0xFF	; 255
    439e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z10fillScreenj>
				delay_ms(200);
    43a2:	88 ec       	ldi	r24, 0xC8	; 200
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
				fillScreen(WHITE);
    43aa:	8f ef       	ldi	r24, 0xFF	; 255
    43ac:	9f ef       	ldi	r25, 0xFF	; 255
    43ae:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z10fillScreenj>
				delay_ms(200);
    43b2:	88 ec       	ldi	r24, 0xC8	; 200
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
			}
			
			
			
			//set to a temp
			if(x_point < 230 && x_point > 170 && y_point < 150 && y_point > 50) { //x and y are now inverted
    43ba:	80 91 74 01 	lds	r24, 0x0174
    43be:	90 91 75 01 	lds	r25, 0x0175
    43c2:	8b 5a       	subi	r24, 0xAB	; 171
    43c4:	91 09       	sbc	r25, r1
    43c6:	cb 97       	sbiw	r24, 0x3b	; 59
    43c8:	08 f0       	brcs	.+2      	; 0x43cc <main+0x4d6>
    43ca:	03 c2       	rjmp	.+1030   	; 0x47d2 <main+0x8dc>
    43cc:	80 91 72 01 	lds	r24, 0x0172
    43d0:	90 91 73 01 	lds	r25, 0x0173
    43d4:	c3 97       	sbiw	r24, 0x33	; 51
    43d6:	83 36       	cpi	r24, 0x63	; 99
    43d8:	91 05       	cpc	r25, r1
    43da:	08 f0       	brcs	.+2      	; 0x43de <main+0x4e8>
    43dc:	fa c1       	rjmp	.+1012   	; 0x47d2 <main+0x8dc>
				cancel =0; //stop cancel
    43de:	10 92 a6 01 	sts	0x01A6, r1
				fillScreen(WHITE);
    43e2:	8f ef       	ldi	r24, 0xFF	; 255
    43e4:	9f ef       	ldi	r25, 0xFF	; 255
    43e6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z10fillScreenj>
				delay_ms(100);
    43ea:	84 e6       	ldi	r24, 0x64	; 100
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
				fillScreen(WHITE);
    43f2:	8f ef       	ldi	r24, 0xFF	; 255
    43f4:	9f ef       	ldi	r25, 0xFF	; 255
    43f6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z10fillScreenj>
				delay_ms(100);
    43fa:	84 e6       	ldi	r24, 0x64	; 100
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
				fillScreen(WHITE);
    4402:	8f ef       	ldi	r24, 0xFF	; 255
    4404:	9f ef       	ldi	r25, 0xFF	; 255
    4406:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z10fillScreenj>
				delay_ms(500);
    440a:	84 ef       	ldi	r24, 0xF4	; 244
    440c:	91 e0       	ldi	r25, 0x01	; 1
    440e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
				DrawCancelBut();			
    4412:	0e 94 16 1c 	call	0x382c	; 0x382c <_Z13DrawCancelButv>
				delay_ms(500);
    4416:	84 ef       	ldi	r24, 0xF4	; 244
    4418:	91 e0       	ldi	r25, 0x01	; 1
    441a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
    441e:	0f 2e       	mov	r0, r31
    4420:	fe ee       	ldi	r31, 0xEE	; 238
    4422:	cf 2e       	mov	r12, r31
    4424:	f1 e0       	ldi	r31, 0x01	; 1
    4426:	df 2e       	mov	r13, r31
    4428:	f0 2d       	mov	r31, r0
    442a:	ea ec       	ldi	r30, 0xCA	; 202
    442c:	f1 e0       	ldi	r31, 0x01	; 1
				//default value
				double temp_target = 42;				
				
				//fill
				for (uint8_t ii=0; ii < memory-1;ii++){
					mean_I_err[ii]=0;
    442e:	11 92       	st	Z+, r1
    4430:	11 92       	st	Z+, r1
    4432:	11 92       	st	Z+, r1
    4434:	11 92       	st	Z+, r1
				delay_ms(500);
				//default value
				double temp_target = 42;				
				
				//fill
				for (uint8_t ii=0; ii < memory-1;ii++){
    4436:	ec 15       	cp	r30, r12
    4438:	fd 05       	cpc	r31, r13
    443a:	c9 f7       	brne	.-14     	; 0x442e <main+0x538>
				//uint16_t timer_help_line=0;
				
				double tmp=0;
				int32_t duty12=0;
				char duty1[10];
				timer_help_seconds=0;
    443c:	10 92 ad 01 	sts	0x01AD, r1
    4440:	10 92 ac 01 	sts	0x01AC, r1
				}				
				//drawLine(0,240-temp_target, 320,240-temp_target ,color_ref );
				//uint16_t timer_help_line=0;
				
				double tmp=0;
				int32_t duty12=0;
    4444:	18 8e       	std	Y+24, r1	; 0x18
    4446:	19 8e       	std	Y+25, r1	; 0x19
    4448:	1a 8e       	std	Y+26, r1	; 0x1a
    444a:	1b 8e       	std	Y+27, r1	; 0x1b
							*/
							err_old=err;
							err=temp_target-tmp;
							P_err=err;
							
							mean_I_err[memory-1]=err_old;
    444c:	ea ec       	ldi	r30, 0xCA	; 202
    444e:	f1 e0       	ldi	r31, 0x01	; 1
    4450:	ec a3       	std	Y+36, r30	; 0x24
    4452:	df 01       	movw	r26, r30
    4454:	b8 a7       	std	Y+40, r27	; 0x28
    4456:	4c 8e       	std	Y+28, r4	; 0x1c
    4458:	5d 8e       	std	Y+29, r5	; 0x1d
    445a:	6e 8e       	std	Y+30, r6	; 0x1e
    445c:	7f 8e       	std	Y+31, r7	; 0x1f
    445e:	b9 a2       	std	Y+33, r11	; 0x21
    4460:	a8 a2       	std	Y+32, r10	; 0x20
				int32_t duty12=0;
				char duty1[10];
				timer_help_seconds=0;
				
				
					while(cancel==0){
    4462:	88 c1       	rjmp	.+784    	; 0x4774 <main+0x87e>
						if(fufu==1){
    4464:	80 91 b5 01 	lds	r24, 0x01B5
    4468:	81 30       	cpi	r24, 0x01	; 1
    446a:	59 f4       	brne	.+22     	; 0x4482 <main+0x58c>
    446c:	4c 8c       	ldd	r4, Y+28	; 0x1c
    446e:	5d 8c       	ldd	r5, Y+29	; 0x1d
    4470:	6e 8c       	ldd	r6, Y+30	; 0x1e
    4472:	7f 8c       	ldd	r7, Y+31	; 0x1f
    4474:	a8 a0       	ldd	r10, Y+32	; 0x20
    4476:	b9 a0       	ldd	r11, Y+33	; 0x21
							OCR1A=0;
    4478:	10 92 89 00 	sts	0x0089, r1
    447c:	10 92 88 00 	sts	0x0088, r1
							break;
    4480:	84 c1       	rjmp	.+776    	; 0x478a <main+0x894>
						}
						
						if (resample2){
    4482:	80 91 b4 01 	lds	r24, 0x01B4
    4486:	88 23       	and	r24, r24
    4488:	69 f3       	breq	.-38     	; 0x4464 <main+0x56e>
							resample2=0;
    448a:	10 92 b4 01 	sts	0x01B4, r1
							
							//OCR1A=0;
							//delay_ms(131);
							tmp = MAX31855_readCelsius(); //reading in celcius works +0 to 1270 degrees
    448e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z20MAX31855_readCelsiusv>
    4492:	4b 01       	movw	r8, r22
    4494:	5c 01       	movw	r10, r24
							tmp +=round(duty2/20);					
    4496:	80 91 aa 01 	lds	r24, 0x01AA
    449a:	90 91 ab 01 	lds	r25, 0x01AB
    449e:	64 e1       	ldi	r22, 0x14	; 20
    44a0:	70 e0       	ldi	r23, 0x00	; 0
    44a2:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <__divmodhi4>
    44a6:	88 27       	eor	r24, r24
    44a8:	77 fd       	sbrc	r23, 7
    44aa:	80 95       	com	r24
    44ac:	98 2f       	mov	r25, r24
    44ae:	0e 94 f6 24 	call	0x49ec	; 0x49ec <__floatsisf>
    44b2:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    44b6:	9b 01       	movw	r18, r22
    44b8:	ac 01       	movw	r20, r24
    44ba:	c5 01       	movw	r24, r10
    44bc:	b4 01       	movw	r22, r8
    44be:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    44c2:	4b 01       	movw	r8, r22
    44c4:	5c 01       	movw	r10, r24
							//delay_ms(5);
							//OCR1A=duty2;
							ftoa( tmp,temperature_now, 1);
    44c6:	21 e0       	ldi	r18, 0x01	; 1
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	ae 01       	movw	r20, r28
    44cc:	4c 5e       	subi	r20, 0xEC	; 236
    44ce:	5f 4f       	sbci	r21, 0xFF	; 255
    44d0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_Z4ftoafPci>
							drawString( 80,110,temperature_now, BLACK, WHITE, 5);
    44d4:	0f 2e       	mov	r0, r31
    44d6:	f5 e0       	ldi	r31, 0x05	; 5
    44d8:	ef 2e       	mov	r14, r31
    44da:	f0 2d       	mov	r31, r0
    44dc:	0f ef       	ldi	r16, 0xFF	; 255
    44de:	1f ef       	ldi	r17, 0xFF	; 255
    44e0:	20 e0       	ldi	r18, 0x00	; 0
    44e2:	30 e0       	ldi	r19, 0x00	; 0
    44e4:	ae 01       	movw	r20, r28
    44e6:	4c 5e       	subi	r20, 0xEC	; 236
    44e8:	5f 4f       	sbci	r21, 0xFF	; 255
    44ea:	6e e6       	ldi	r22, 0x6E	; 110
    44ec:	70 e0       	ldi	r23, 0x00	; 0
    44ee:	80 e5       	ldi	r24, 0x50	; 80
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
								timer_help_line=0;
								fillScreen(WHITE);
								delay_ms(100);								
							}
							*/
							err_old=err;
    44f6:	20 91 04 02 	lds	r18, 0x0204
    44fa:	30 91 05 02 	lds	r19, 0x0205
    44fe:	40 91 06 02 	lds	r20, 0x0206
    4502:	50 91 07 02 	lds	r21, 0x0207
    4506:	29 a7       	std	Y+41, r18	; 0x29
    4508:	3a a7       	std	Y+42, r19	; 0x2a
    450a:	4b a7       	std	Y+43, r20	; 0x2b
    450c:	5c a7       	std	Y+44, r21	; 0x2c
    450e:	20 93 00 02 	sts	0x0200, r18
    4512:	30 93 01 02 	sts	0x0201, r19
    4516:	40 93 02 02 	sts	0x0202, r20
    451a:	50 93 03 02 	sts	0x0203, r21
							err=temp_target-tmp;
    451e:	a5 01       	movw	r20, r10
    4520:	94 01       	movw	r18, r8
    4522:	60 e0       	ldi	r22, 0x00	; 0
    4524:	70 e0       	ldi	r23, 0x00	; 0
    4526:	88 e2       	ldi	r24, 0x28	; 40
    4528:	92 e4       	ldi	r25, 0x42	; 66
    452a:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    452e:	1b 01       	movw	r2, r22
    4530:	2c 01       	movw	r4, r24
    4532:	60 93 04 02 	sts	0x0204, r22
    4536:	70 93 05 02 	sts	0x0205, r23
    453a:	80 93 06 02 	sts	0x0206, r24
    453e:	90 93 07 02 	sts	0x0207, r25
							P_err=err;
    4542:	60 93 f8 01 	sts	0x01F8, r22
    4546:	70 93 f9 01 	sts	0x01F9, r23
    454a:	80 93 fa 01 	sts	0x01FA, r24
    454e:	90 93 fb 01 	sts	0x01FB, r25
							
							mean_I_err[memory-1]=err_old;
    4552:	89 a5       	ldd	r24, Y+41	; 0x29
    4554:	9a a5       	ldd	r25, Y+42	; 0x2a
    4556:	ab a5       	ldd	r26, Y+43	; 0x2b
    4558:	bc a5       	ldd	r27, Y+44	; 0x2c
    455a:	ee ee       	ldi	r30, 0xEE	; 238
    455c:	f1 e0       	ldi	r31, 0x01	; 1
    455e:	80 83       	st	Z, r24
    4560:	91 83       	std	Z+1, r25	; 0x01
    4562:	a2 83       	std	Z+2, r26	; 0x02
    4564:	b3 83       	std	Z+3, r27	; 0x03
    4566:	ec a1       	ldd	r30, Y+36	; 0x24
    4568:	f8 a5       	ldd	r31, Y+40	; 0x28
							for (int i=0;i< memory-1;i++){
								mean_I_err[i]=(double)mean_I_err[i+1];
    456a:	84 81       	ldd	r24, Z+4	; 0x04
    456c:	95 81       	ldd	r25, Z+5	; 0x05
    456e:	a6 81       	ldd	r26, Z+6	; 0x06
    4570:	b7 81       	ldd	r27, Z+7	; 0x07
    4572:	81 93       	st	Z+, r24
    4574:	91 93       	st	Z+, r25
    4576:	a1 93       	st	Z+, r26
    4578:	b1 93       	st	Z+, r27
							err_old=err;
							err=temp_target-tmp;
							P_err=err;
							
							mean_I_err[memory-1]=err_old;
							for (int i=0;i< memory-1;i++){
    457a:	ec 15       	cp	r30, r12
    457c:	fd 05       	cpc	r31, r13
    457e:	a9 f7       	brne	.-22     	; 0x456a <main+0x674>
    4580:	8c a0       	ldd	r8, Y+36	; 0x24
    4582:	98 a4       	ldd	r9, Y+40	; 0x28
    4584:	10 e0       	ldi	r17, 0x00	; 0
    4586:	00 e0       	ldi	r16, 0x00	; 0
    4588:	f1 2c       	mov	r15, r1
    458a:	e1 2c       	mov	r14, r1
    458c:	ad a4       	ldd	r10, Y+45	; 0x2d
    458e:	be a4       	ldd	r11, Y+46	; 0x2e
								mean_I_err[i]=(double)mean_I_err[i+1];
							}
							mean_I_error=0;
							for (int i=0;i< memory;i++){
								mean_I_error+=(double)mean_I_err[i];
    4590:	d4 01       	movw	r26, r8
    4592:	6d 91       	ld	r22, X+
    4594:	7d 91       	ld	r23, X+
    4596:	8d 91       	ld	r24, X+
    4598:	9d 91       	ld	r25, X+
    459a:	4d 01       	movw	r8, r26
    459c:	21 2f       	mov	r18, r17
    459e:	30 2f       	mov	r19, r16
    45a0:	4f 2d       	mov	r20, r15
    45a2:	5e 2d       	mov	r21, r14
    45a4:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
							mean_I_err[memory-1]=err_old;
							for (int i=0;i< memory-1;i++){
								mean_I_err[i]=(double)mean_I_err[i+1];
							}
							mean_I_error=0;
							for (int i=0;i< memory;i++){
    45a8:	8a 14       	cp	r8, r10
    45aa:	9b 04       	cpc	r9, r11
    45ac:	29 f0       	breq	.+10     	; 0x45b8 <main+0x6c2>
								mean_I_error+=(double)mean_I_err[i];
    45ae:	16 2f       	mov	r17, r22
    45b0:	07 2f       	mov	r16, r23
    45b2:	f8 2e       	mov	r15, r24
    45b4:	e9 2e       	mov	r14, r25
    45b6:	ec cf       	rjmp	.-40     	; 0x4590 <main+0x69a>
    45b8:	16 2f       	mov	r17, r22
    45ba:	07 2f       	mov	r16, r23
    45bc:	f8 2e       	mov	r15, r24
    45be:	e9 2e       	mov	r14, r25
    45c0:	86 2f       	mov	r24, r22
    45c2:	90 2f       	mov	r25, r16
    45c4:	af 2d       	mov	r26, r15
    45c6:	be 2d       	mov	r27, r14
    45c8:	80 93 f2 01 	sts	0x01F2, r24
    45cc:	90 93 f3 01 	sts	0x01F3, r25
    45d0:	a0 93 f4 01 	sts	0x01F4, r26
    45d4:	b0 93 f5 01 	sts	0x01F5, r27
							}
							I_err=mean_I_error;
    45d8:	80 93 fc 01 	sts	0x01FC, r24
    45dc:	90 93 fd 01 	sts	0x01FD, r25
    45e0:	a0 93 fe 01 	sts	0x01FE, r26
    45e4:	b0 93 ff 01 	sts	0x01FF, r27
							//I_err+=err_old
							D_err=err-err_old;
    45e8:	29 a5       	ldd	r18, Y+41	; 0x29
    45ea:	3a a5       	ldd	r19, Y+42	; 0x2a
    45ec:	4b a5       	ldd	r20, Y+43	; 0x2b
    45ee:	5c a5       	ldd	r21, Y+44	; 0x2c
    45f0:	c2 01       	movw	r24, r4
    45f2:	b1 01       	movw	r22, r2
    45f4:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__subsf3>
    45f8:	4b 01       	movw	r8, r22
    45fa:	5c 01       	movw	r10, r24
    45fc:	60 93 08 02 	sts	0x0208, r22
    4600:	70 93 09 02 	sts	0x0209, r23
    4604:	80 93 0a 02 	sts	0x020A, r24
    4608:	90 93 0b 02 	sts	0x020B, r25
							
							if(err > 1 || err < -1){
    460c:	20 e0       	ldi	r18, 0x00	; 0
    460e:	30 e0       	ldi	r19, 0x00	; 0
    4610:	40 e8       	ldi	r20, 0x80	; 128
    4612:	5f e3       	ldi	r21, 0x3F	; 63
    4614:	c2 01       	movw	r24, r4
    4616:	b1 01       	movw	r22, r2
    4618:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__gesf2>
    461c:	18 16       	cp	r1, r24
    461e:	54 f0       	brlt	.+20     	; 0x4634 <main+0x73e>
    4620:	20 e0       	ldi	r18, 0x00	; 0
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	40 e8       	ldi	r20, 0x80	; 128
    4626:	5f eb       	ldi	r21, 0xBF	; 191
    4628:	c2 01       	movw	r24, r4
    462a:	b1 01       	movw	r22, r2
    462c:	0e 94 57 24 	call	0x48ae	; 0x48ae <__cmpsf2>
    4630:	88 23       	and	r24, r24
    4632:	c4 f5       	brge	.+112    	; 0x46a4 <main+0x7ae>
								PID=P_val*P_err + I_val*I_err + D_val*D_err;
    4634:	a2 01       	movw	r20, r4
    4636:	91 01       	movw	r18, r2
    4638:	c2 01       	movw	r24, r4
    463a:	b1 01       	movw	r22, r2
    463c:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    4640:	2b 01       	movw	r4, r22
    4642:	3c 01       	movw	r6, r24
    4644:	2d ec       	ldi	r18, 0xCD	; 205
    4646:	3c ec       	ldi	r19, 0xCC	; 204
    4648:	4c e4       	ldi	r20, 0x4C	; 76
    464a:	5f e3       	ldi	r21, 0x3F	; 63
    464c:	61 2f       	mov	r22, r17
    464e:	70 2f       	mov	r23, r16
    4650:	8f 2d       	mov	r24, r15
    4652:	9e 2d       	mov	r25, r14
    4654:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    4658:	9b 01       	movw	r18, r22
    465a:	ac 01       	movw	r20, r24
    465c:	c3 01       	movw	r24, r6
    465e:	b2 01       	movw	r22, r4
    4660:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    4664:	1b 01       	movw	r2, r22
    4666:	2c 01       	movw	r4, r24
    4668:	20 e0       	ldi	r18, 0x00	; 0
    466a:	30 e0       	ldi	r19, 0x00	; 0
    466c:	40 e0       	ldi	r20, 0x00	; 0
    466e:	5f e3       	ldi	r21, 0x3F	; 63
    4670:	c5 01       	movw	r24, r10
    4672:	b4 01       	movw	r22, r8
    4674:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsf3>
    4678:	9b 01       	movw	r18, r22
    467a:	ac 01       	movw	r20, r24
    467c:	c2 01       	movw	r24, r4
    467e:	b1 01       	movw	r22, r2
    4680:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <__addsf3>
    4684:	60 93 0c 02 	sts	0x020C, r22
    4688:	70 93 0d 02 	sts	0x020D, r23
    468c:	80 93 0e 02 	sts	0x020E, r24
    4690:	90 93 0f 02 	sts	0x020F, r25
								duty12=round(PID);
    4694:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <round>
    4698:	0e 94 c3 24 	call	0x4986	; 0x4986 <__fixsfsi>
    469c:	68 8f       	std	Y+24, r22	; 0x18
    469e:	79 8f       	std	Y+25, r23	; 0x19
    46a0:	8a 8f       	std	Y+26, r24	; 0x1a
    46a2:	9b 8f       	std	Y+27, r25	; 0x1b
							}
							if (duty12 > 0){
    46a4:	28 8d       	ldd	r18, Y+24	; 0x18
    46a6:	39 8d       	ldd	r19, Y+25	; 0x19
    46a8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    46aa:	5b 8d       	ldd	r21, Y+27	; 0x1b
    46ac:	12 16       	cp	r1, r18
    46ae:	13 06       	cpc	r1, r19
    46b0:	14 06       	cpc	r1, r20
    46b2:	15 06       	cpc	r1, r21
    46b4:	24 f4       	brge	.+8      	; 0x46be <main+0x7c8>
								duty2=duty12;
    46b6:	30 93 ab 01 	sts	0x01AB, r19
    46ba:	20 93 aa 01 	sts	0x01AA, r18
							} 
							if ( duty12 >= ICR1 ) {
    46be:	a6 e8       	ldi	r26, 0x86	; 134
    46c0:	b0 e0       	ldi	r27, 0x00	; 0
    46c2:	8d 91       	ld	r24, X+
    46c4:	9c 91       	ld	r25, X
    46c6:	a0 e0       	ldi	r26, 0x00	; 0
    46c8:	b0 e0       	ldi	r27, 0x00	; 0
    46ca:	28 8d       	ldd	r18, Y+24	; 0x18
    46cc:	39 8d       	ldd	r19, Y+25	; 0x19
    46ce:	4a 8d       	ldd	r20, Y+26	; 0x1a
    46d0:	5b 8d       	ldd	r21, Y+27	; 0x1b
    46d2:	28 17       	cp	r18, r24
    46d4:	39 07       	cpc	r19, r25
    46d6:	4a 07       	cpc	r20, r26
    46d8:	5b 07       	cpc	r21, r27
    46da:	44 f0       	brlt	.+16     	; 0x46ec <main+0x7f6>
								duty2 = ICR1;
    46dc:	a6 e8       	ldi	r26, 0x86	; 134
    46de:	b0 e0       	ldi	r27, 0x00	; 0
    46e0:	8d 91       	ld	r24, X+
    46e2:	9c 91       	ld	r25, X
    46e4:	90 93 ab 01 	sts	0x01AB, r25
    46e8:	80 93 aa 01 	sts	0x01AA, r24
							}
							
							if ( duty12 <= 0){
    46ec:	28 8d       	ldd	r18, Y+24	; 0x18
    46ee:	39 8d       	ldd	r19, Y+25	; 0x19
    46f0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    46f2:	5b 8d       	ldd	r21, Y+27	; 0x1b
    46f4:	12 16       	cp	r1, r18
    46f6:	13 06       	cpc	r1, r19
    46f8:	14 06       	cpc	r1, r20
    46fa:	15 06       	cpc	r1, r21
    46fc:	24 f0       	brlt	.+8      	; 0x4706 <main+0x810>
								duty2 = 0;
    46fe:	10 92 ab 01 	sts	0x01AB, r1
    4702:	10 92 aa 01 	sts	0x01AA, r1
							}
								
												
							OCR1A=duty2;
    4706:	80 91 aa 01 	lds	r24, 0x01AA
    470a:	90 91 ab 01 	lds	r25, 0x01AB
    470e:	a8 e8       	ldi	r26, 0x88	; 136
    4710:	b0 e0       	ldi	r27, 0x00	; 0
    4712:	11 96       	adiw	r26, 0x01	; 1
    4714:	9c 93       	st	X, r25
    4716:	8e 93       	st	-X, r24
							intToStr(duty2, duty1 ,3);
    4718:	80 91 aa 01 	lds	r24, 0x01AA
    471c:	90 91 ab 01 	lds	r25, 0x01AB
    4720:	43 e0       	ldi	r20, 0x03	; 3
    4722:	50 e0       	ldi	r21, 0x00	; 0
    4724:	be 01       	movw	r22, r28
    4726:	6f 5f       	subi	r22, 0xFF	; 255
    4728:	7f 4f       	sbci	r23, 0xFF	; 255
    472a:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z8intToStriPci>
							drawString( 70, 232, cycle112, BLACK, YELLOW, 1); //x and y are inverted
    472e:	ee 24       	eor	r14, r14
    4730:	e3 94       	inc	r14
    4732:	00 ee       	ldi	r16, 0xE0	; 224
    4734:	1f ef       	ldi	r17, 0xFF	; 255
    4736:	20 e0       	ldi	r18, 0x00	; 0
    4738:	30 e0       	ldi	r19, 0x00	; 0
    473a:	42 e0       	ldi	r20, 0x02	; 2
    473c:	51 e0       	ldi	r21, 0x01	; 1
    473e:	68 ee       	ldi	r22, 0xE8	; 232
    4740:	70 e0       	ldi	r23, 0x00	; 0
    4742:	86 e4       	ldi	r24, 0x46	; 70
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
							drawString( 100, 232, duty1, BLACK, YELLOW, 1); //x and y are inverted
    474a:	20 e0       	ldi	r18, 0x00	; 0
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	ae 01       	movw	r20, r28
    4750:	4f 5f       	subi	r20, 0xFF	; 255
    4752:	5f 4f       	sbci	r21, 0xFF	; 255
    4754:	68 ee       	ldi	r22, 0xE8	; 232
    4756:	70 e0       	ldi	r23, 0x00	; 0
    4758:	84 e6       	ldi	r24, 0x64	; 100
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
							drawString( 118, 232, percentmark, BLACK, YELLOW, 1); //x and y are inverted
    4760:	20 e0       	ldi	r18, 0x00	; 0
    4762:	30 e0       	ldi	r19, 0x00	; 0
    4764:	40 e0       	ldi	r20, 0x00	; 0
    4766:	51 e0       	ldi	r21, 0x01	; 1
    4768:	68 ee       	ldi	r22, 0xE8	; 232
    476a:	70 e0       	ldi	r23, 0x00	; 0
    476c:	86 e7       	ldi	r24, 0x76	; 118
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z10drawStringiiPcjjh>
				int32_t duty12=0;
				char duty1[10];
				timer_help_seconds=0;
				
				
					while(cancel==0){
    4774:	80 91 a6 01 	lds	r24, 0x01A6
    4778:	88 23       	and	r24, r24
    477a:	09 f4       	brne	.+2      	; 0x477e <main+0x888>
    477c:	73 ce       	rjmp	.-794    	; 0x4464 <main+0x56e>
    477e:	4c 8c       	ldd	r4, Y+28	; 0x1c
    4780:	5d 8c       	ldd	r5, Y+29	; 0x1d
    4782:	6e 8c       	ldd	r6, Y+30	; 0x1e
    4784:	7f 8c       	ldd	r7, Y+31	; 0x1f
    4786:	a8 a0       	ldd	r10, Y+32	; 0x20
    4788:	b9 a0       	ldd	r11, Y+33	; 0x21
							drawString( 100, 232, duty1, BLACK, YELLOW, 1); //x and y are inverted
							drawString( 118, 232, percentmark, BLACK, YELLOW, 1); //x and y are inverted
						}
					
					}
				OCR1A=0;
    478a:	10 92 89 00 	sts	0x0089, r1
    478e:	10 92 88 00 	sts	0x0088, r1
				fufu=0;
    4792:	10 92 b5 01 	sts	0x01B5, r1
				cancel =0; //stop cancel at the end
    4796:	10 92 a6 01 	sts	0x01A6, r1
				delay_ms(100);
    479a:	84 e6       	ldi	r24, 0x64	; 100
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
				fillScreen(WHITE);
    47a2:	8f ef       	ldi	r24, 0xFF	; 255
    47a4:	9f ef       	ldi	r25, 0xFF	; 255
    47a6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z10fillScreenj>
				delay_ms(100);
    47aa:	84 e6       	ldi	r24, 0x64	; 100
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
				fillScreen(WHITE);
    47b2:	8f ef       	ldi	r24, 0xFF	; 255
    47b4:	9f ef       	ldi	r25, 0xFF	; 255
    47b6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z10fillScreenj>
				delay_ms(100);
    47ba:	84 e6       	ldi	r24, 0x64	; 100
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
				fillScreen(WHITE);
    47c2:	8f ef       	ldi	r24, 0xFF	; 255
    47c4:	9f ef       	ldi	r25, 0xFF	; 255
    47c6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z10fillScreenj>
				delay_ms(500);
    47ca:	84 ef       	ldi	r24, 0xF4	; 244
    47cc:	91 e0       	ldi	r25, 0x01	; 1
    47ce:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
			}
		
			delay_ms(100);
    47d2:	84 e6       	ldi	r24, 0x64	; 100
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
			OCR1A=0;
			fillScreen(WHITE);
			DrawCancelBut();
		}
		*/
		delay_ms(1000);
    47da:	88 ee       	ldi	r24, 0xE8	; 232
    47dc:	93 e0       	ldi	r25, 0x03	; 3
    47de:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_Z8delay_msi>
		
		
    }
    47e2:	ce cb       	rjmp	.-2148   	; 0x3f80 <main+0x8a>

000047e4 <__subsf3>:
    47e4:	50 58       	subi	r21, 0x80	; 128

000047e6 <__addsf3>:
    47e6:	bb 27       	eor	r27, r27
    47e8:	aa 27       	eor	r26, r26
    47ea:	0e d0       	rcall	.+28     	; 0x4808 <__addsf3x>
    47ec:	75 c1       	rjmp	.+746    	; 0x4ad8 <__fp_round>
    47ee:	66 d1       	rcall	.+716    	; 0x4abc <__fp_pscA>
    47f0:	30 f0       	brcs	.+12     	; 0x47fe <__addsf3+0x18>
    47f2:	6b d1       	rcall	.+726    	; 0x4aca <__fp_pscB>
    47f4:	20 f0       	brcs	.+8      	; 0x47fe <__addsf3+0x18>
    47f6:	31 f4       	brne	.+12     	; 0x4804 <__addsf3+0x1e>
    47f8:	9f 3f       	cpi	r25, 0xFF	; 255
    47fa:	11 f4       	brne	.+4      	; 0x4800 <__addsf3+0x1a>
    47fc:	1e f4       	brtc	.+6      	; 0x4804 <__addsf3+0x1e>
    47fe:	5b c1       	rjmp	.+694    	; 0x4ab6 <__fp_nan>
    4800:	0e f4       	brtc	.+2      	; 0x4804 <__addsf3+0x1e>
    4802:	e0 95       	com	r30
    4804:	e7 fb       	bst	r30, 7
    4806:	51 c1       	rjmp	.+674    	; 0x4aaa <__fp_inf>

00004808 <__addsf3x>:
    4808:	e9 2f       	mov	r30, r25
    480a:	77 d1       	rcall	.+750    	; 0x4afa <__fp_split3>
    480c:	80 f3       	brcs	.-32     	; 0x47ee <__addsf3+0x8>
    480e:	ba 17       	cp	r27, r26
    4810:	62 07       	cpc	r22, r18
    4812:	73 07       	cpc	r23, r19
    4814:	84 07       	cpc	r24, r20
    4816:	95 07       	cpc	r25, r21
    4818:	18 f0       	brcs	.+6      	; 0x4820 <__addsf3x+0x18>
    481a:	71 f4       	brne	.+28     	; 0x4838 <__addsf3x+0x30>
    481c:	9e f5       	brtc	.+102    	; 0x4884 <__addsf3x+0x7c>
    481e:	8f c1       	rjmp	.+798    	; 0x4b3e <__fp_zero>
    4820:	0e f4       	brtc	.+2      	; 0x4824 <__addsf3x+0x1c>
    4822:	e0 95       	com	r30
    4824:	0b 2e       	mov	r0, r27
    4826:	ba 2f       	mov	r27, r26
    4828:	a0 2d       	mov	r26, r0
    482a:	0b 01       	movw	r0, r22
    482c:	b9 01       	movw	r22, r18
    482e:	90 01       	movw	r18, r0
    4830:	0c 01       	movw	r0, r24
    4832:	ca 01       	movw	r24, r20
    4834:	a0 01       	movw	r20, r0
    4836:	11 24       	eor	r1, r1
    4838:	ff 27       	eor	r31, r31
    483a:	59 1b       	sub	r21, r25
    483c:	99 f0       	breq	.+38     	; 0x4864 <__addsf3x+0x5c>
    483e:	59 3f       	cpi	r21, 0xF9	; 249
    4840:	50 f4       	brcc	.+20     	; 0x4856 <__addsf3x+0x4e>
    4842:	50 3e       	cpi	r21, 0xE0	; 224
    4844:	68 f1       	brcs	.+90     	; 0x48a0 <__addsf3x+0x98>
    4846:	1a 16       	cp	r1, r26
    4848:	f0 40       	sbci	r31, 0x00	; 0
    484a:	a2 2f       	mov	r26, r18
    484c:	23 2f       	mov	r18, r19
    484e:	34 2f       	mov	r19, r20
    4850:	44 27       	eor	r20, r20
    4852:	58 5f       	subi	r21, 0xF8	; 248
    4854:	f3 cf       	rjmp	.-26     	; 0x483c <__addsf3x+0x34>
    4856:	46 95       	lsr	r20
    4858:	37 95       	ror	r19
    485a:	27 95       	ror	r18
    485c:	a7 95       	ror	r26
    485e:	f0 40       	sbci	r31, 0x00	; 0
    4860:	53 95       	inc	r21
    4862:	c9 f7       	brne	.-14     	; 0x4856 <__addsf3x+0x4e>
    4864:	7e f4       	brtc	.+30     	; 0x4884 <__addsf3x+0x7c>
    4866:	1f 16       	cp	r1, r31
    4868:	ba 0b       	sbc	r27, r26
    486a:	62 0b       	sbc	r22, r18
    486c:	73 0b       	sbc	r23, r19
    486e:	84 0b       	sbc	r24, r20
    4870:	ba f0       	brmi	.+46     	; 0x48a0 <__addsf3x+0x98>
    4872:	91 50       	subi	r25, 0x01	; 1
    4874:	a1 f0       	breq	.+40     	; 0x489e <__addsf3x+0x96>
    4876:	ff 0f       	add	r31, r31
    4878:	bb 1f       	adc	r27, r27
    487a:	66 1f       	adc	r22, r22
    487c:	77 1f       	adc	r23, r23
    487e:	88 1f       	adc	r24, r24
    4880:	c2 f7       	brpl	.-16     	; 0x4872 <__addsf3x+0x6a>
    4882:	0e c0       	rjmp	.+28     	; 0x48a0 <__addsf3x+0x98>
    4884:	ba 0f       	add	r27, r26
    4886:	62 1f       	adc	r22, r18
    4888:	73 1f       	adc	r23, r19
    488a:	84 1f       	adc	r24, r20
    488c:	48 f4       	brcc	.+18     	; 0x48a0 <__addsf3x+0x98>
    488e:	87 95       	ror	r24
    4890:	77 95       	ror	r23
    4892:	67 95       	ror	r22
    4894:	b7 95       	ror	r27
    4896:	f7 95       	ror	r31
    4898:	9e 3f       	cpi	r25, 0xFE	; 254
    489a:	08 f0       	brcs	.+2      	; 0x489e <__addsf3x+0x96>
    489c:	b3 cf       	rjmp	.-154    	; 0x4804 <__addsf3+0x1e>
    489e:	93 95       	inc	r25
    48a0:	88 0f       	add	r24, r24
    48a2:	08 f0       	brcs	.+2      	; 0x48a6 <__addsf3x+0x9e>
    48a4:	99 27       	eor	r25, r25
    48a6:	ee 0f       	add	r30, r30
    48a8:	97 95       	ror	r25
    48aa:	87 95       	ror	r24
    48ac:	08 95       	ret

000048ae <__cmpsf2>:
    48ae:	d9 d0       	rcall	.+434    	; 0x4a62 <__fp_cmp>
    48b0:	08 f4       	brcc	.+2      	; 0x48b4 <__cmpsf2+0x6>
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	08 95       	ret

000048b6 <__divsf3>:
    48b6:	0c d0       	rcall	.+24     	; 0x48d0 <__divsf3x>
    48b8:	0f c1       	rjmp	.+542    	; 0x4ad8 <__fp_round>
    48ba:	07 d1       	rcall	.+526    	; 0x4aca <__fp_pscB>
    48bc:	40 f0       	brcs	.+16     	; 0x48ce <__divsf3+0x18>
    48be:	fe d0       	rcall	.+508    	; 0x4abc <__fp_pscA>
    48c0:	30 f0       	brcs	.+12     	; 0x48ce <__divsf3+0x18>
    48c2:	21 f4       	brne	.+8      	; 0x48cc <__divsf3+0x16>
    48c4:	5f 3f       	cpi	r21, 0xFF	; 255
    48c6:	19 f0       	breq	.+6      	; 0x48ce <__divsf3+0x18>
    48c8:	f0 c0       	rjmp	.+480    	; 0x4aaa <__fp_inf>
    48ca:	51 11       	cpse	r21, r1
    48cc:	39 c1       	rjmp	.+626    	; 0x4b40 <__fp_szero>
    48ce:	f3 c0       	rjmp	.+486    	; 0x4ab6 <__fp_nan>

000048d0 <__divsf3x>:
    48d0:	14 d1       	rcall	.+552    	; 0x4afa <__fp_split3>
    48d2:	98 f3       	brcs	.-26     	; 0x48ba <__divsf3+0x4>

000048d4 <__divsf3_pse>:
    48d4:	99 23       	and	r25, r25
    48d6:	c9 f3       	breq	.-14     	; 0x48ca <__divsf3+0x14>
    48d8:	55 23       	and	r21, r21
    48da:	b1 f3       	breq	.-20     	; 0x48c8 <__divsf3+0x12>
    48dc:	95 1b       	sub	r25, r21
    48de:	55 0b       	sbc	r21, r21
    48e0:	bb 27       	eor	r27, r27
    48e2:	aa 27       	eor	r26, r26
    48e4:	62 17       	cp	r22, r18
    48e6:	73 07       	cpc	r23, r19
    48e8:	84 07       	cpc	r24, r20
    48ea:	38 f0       	brcs	.+14     	; 0x48fa <__divsf3_pse+0x26>
    48ec:	9f 5f       	subi	r25, 0xFF	; 255
    48ee:	5f 4f       	sbci	r21, 0xFF	; 255
    48f0:	22 0f       	add	r18, r18
    48f2:	33 1f       	adc	r19, r19
    48f4:	44 1f       	adc	r20, r20
    48f6:	aa 1f       	adc	r26, r26
    48f8:	a9 f3       	breq	.-22     	; 0x48e4 <__divsf3_pse+0x10>
    48fa:	33 d0       	rcall	.+102    	; 0x4962 <__divsf3_pse+0x8e>
    48fc:	0e 2e       	mov	r0, r30
    48fe:	3a f0       	brmi	.+14     	; 0x490e <__divsf3_pse+0x3a>
    4900:	e0 e8       	ldi	r30, 0x80	; 128
    4902:	30 d0       	rcall	.+96     	; 0x4964 <__divsf3_pse+0x90>
    4904:	91 50       	subi	r25, 0x01	; 1
    4906:	50 40       	sbci	r21, 0x00	; 0
    4908:	e6 95       	lsr	r30
    490a:	00 1c       	adc	r0, r0
    490c:	ca f7       	brpl	.-14     	; 0x4900 <__divsf3_pse+0x2c>
    490e:	29 d0       	rcall	.+82     	; 0x4962 <__divsf3_pse+0x8e>
    4910:	fe 2f       	mov	r31, r30
    4912:	27 d0       	rcall	.+78     	; 0x4962 <__divsf3_pse+0x8e>
    4914:	66 0f       	add	r22, r22
    4916:	77 1f       	adc	r23, r23
    4918:	88 1f       	adc	r24, r24
    491a:	bb 1f       	adc	r27, r27
    491c:	26 17       	cp	r18, r22
    491e:	37 07       	cpc	r19, r23
    4920:	48 07       	cpc	r20, r24
    4922:	ab 07       	cpc	r26, r27
    4924:	b0 e8       	ldi	r27, 0x80	; 128
    4926:	09 f0       	breq	.+2      	; 0x492a <__divsf3_pse+0x56>
    4928:	bb 0b       	sbc	r27, r27
    492a:	80 2d       	mov	r24, r0
    492c:	bf 01       	movw	r22, r30
    492e:	ff 27       	eor	r31, r31
    4930:	93 58       	subi	r25, 0x83	; 131
    4932:	5f 4f       	sbci	r21, 0xFF	; 255
    4934:	2a f0       	brmi	.+10     	; 0x4940 <__divsf3_pse+0x6c>
    4936:	9e 3f       	cpi	r25, 0xFE	; 254
    4938:	51 05       	cpc	r21, r1
    493a:	68 f0       	brcs	.+26     	; 0x4956 <__divsf3_pse+0x82>
    493c:	b6 c0       	rjmp	.+364    	; 0x4aaa <__fp_inf>
    493e:	00 c1       	rjmp	.+512    	; 0x4b40 <__fp_szero>
    4940:	5f 3f       	cpi	r21, 0xFF	; 255
    4942:	ec f3       	brlt	.-6      	; 0x493e <__divsf3_pse+0x6a>
    4944:	98 3e       	cpi	r25, 0xE8	; 232
    4946:	dc f3       	brlt	.-10     	; 0x493e <__divsf3_pse+0x6a>
    4948:	86 95       	lsr	r24
    494a:	77 95       	ror	r23
    494c:	67 95       	ror	r22
    494e:	b7 95       	ror	r27
    4950:	f7 95       	ror	r31
    4952:	9f 5f       	subi	r25, 0xFF	; 255
    4954:	c9 f7       	brne	.-14     	; 0x4948 <__divsf3_pse+0x74>
    4956:	88 0f       	add	r24, r24
    4958:	91 1d       	adc	r25, r1
    495a:	96 95       	lsr	r25
    495c:	87 95       	ror	r24
    495e:	97 f9       	bld	r25, 7
    4960:	08 95       	ret
    4962:	e1 e0       	ldi	r30, 0x01	; 1
    4964:	66 0f       	add	r22, r22
    4966:	77 1f       	adc	r23, r23
    4968:	88 1f       	adc	r24, r24
    496a:	bb 1f       	adc	r27, r27
    496c:	62 17       	cp	r22, r18
    496e:	73 07       	cpc	r23, r19
    4970:	84 07       	cpc	r24, r20
    4972:	ba 07       	cpc	r27, r26
    4974:	20 f0       	brcs	.+8      	; 0x497e <__divsf3_pse+0xaa>
    4976:	62 1b       	sub	r22, r18
    4978:	73 0b       	sbc	r23, r19
    497a:	84 0b       	sbc	r24, r20
    497c:	ba 0b       	sbc	r27, r26
    497e:	ee 1f       	adc	r30, r30
    4980:	88 f7       	brcc	.-30     	; 0x4964 <__divsf3_pse+0x90>
    4982:	e0 95       	com	r30
    4984:	08 95       	ret

00004986 <__fixsfsi>:
    4986:	04 d0       	rcall	.+8      	; 0x4990 <__fixunssfsi>
    4988:	68 94       	set
    498a:	b1 11       	cpse	r27, r1
    498c:	d9 c0       	rjmp	.+434    	; 0x4b40 <__fp_szero>
    498e:	08 95       	ret

00004990 <__fixunssfsi>:
    4990:	bc d0       	rcall	.+376    	; 0x4b0a <__fp_splitA>
    4992:	88 f0       	brcs	.+34     	; 0x49b6 <__fixunssfsi+0x26>
    4994:	9f 57       	subi	r25, 0x7F	; 127
    4996:	90 f0       	brcs	.+36     	; 0x49bc <__fixunssfsi+0x2c>
    4998:	b9 2f       	mov	r27, r25
    499a:	99 27       	eor	r25, r25
    499c:	b7 51       	subi	r27, 0x17	; 23
    499e:	a0 f0       	brcs	.+40     	; 0x49c8 <__fixunssfsi+0x38>
    49a0:	d1 f0       	breq	.+52     	; 0x49d6 <__fixunssfsi+0x46>
    49a2:	66 0f       	add	r22, r22
    49a4:	77 1f       	adc	r23, r23
    49a6:	88 1f       	adc	r24, r24
    49a8:	99 1f       	adc	r25, r25
    49aa:	1a f0       	brmi	.+6      	; 0x49b2 <__fixunssfsi+0x22>
    49ac:	ba 95       	dec	r27
    49ae:	c9 f7       	brne	.-14     	; 0x49a2 <__fixunssfsi+0x12>
    49b0:	12 c0       	rjmp	.+36     	; 0x49d6 <__fixunssfsi+0x46>
    49b2:	b1 30       	cpi	r27, 0x01	; 1
    49b4:	81 f0       	breq	.+32     	; 0x49d6 <__fixunssfsi+0x46>
    49b6:	c3 d0       	rcall	.+390    	; 0x4b3e <__fp_zero>
    49b8:	b1 e0       	ldi	r27, 0x01	; 1
    49ba:	08 95       	ret
    49bc:	c0 c0       	rjmp	.+384    	; 0x4b3e <__fp_zero>
    49be:	67 2f       	mov	r22, r23
    49c0:	78 2f       	mov	r23, r24
    49c2:	88 27       	eor	r24, r24
    49c4:	b8 5f       	subi	r27, 0xF8	; 248
    49c6:	39 f0       	breq	.+14     	; 0x49d6 <__fixunssfsi+0x46>
    49c8:	b9 3f       	cpi	r27, 0xF9	; 249
    49ca:	cc f3       	brlt	.-14     	; 0x49be <__fixunssfsi+0x2e>
    49cc:	86 95       	lsr	r24
    49ce:	77 95       	ror	r23
    49d0:	67 95       	ror	r22
    49d2:	b3 95       	inc	r27
    49d4:	d9 f7       	brne	.-10     	; 0x49cc <__fixunssfsi+0x3c>
    49d6:	3e f4       	brtc	.+14     	; 0x49e6 <__fixunssfsi+0x56>
    49d8:	90 95       	com	r25
    49da:	80 95       	com	r24
    49dc:	70 95       	com	r23
    49de:	61 95       	neg	r22
    49e0:	7f 4f       	sbci	r23, 0xFF	; 255
    49e2:	8f 4f       	sbci	r24, 0xFF	; 255
    49e4:	9f 4f       	sbci	r25, 0xFF	; 255
    49e6:	08 95       	ret

000049e8 <__floatunsisf>:
    49e8:	e8 94       	clt
    49ea:	09 c0       	rjmp	.+18     	; 0x49fe <__floatsisf+0x12>

000049ec <__floatsisf>:
    49ec:	97 fb       	bst	r25, 7
    49ee:	3e f4       	brtc	.+14     	; 0x49fe <__floatsisf+0x12>
    49f0:	90 95       	com	r25
    49f2:	80 95       	com	r24
    49f4:	70 95       	com	r23
    49f6:	61 95       	neg	r22
    49f8:	7f 4f       	sbci	r23, 0xFF	; 255
    49fa:	8f 4f       	sbci	r24, 0xFF	; 255
    49fc:	9f 4f       	sbci	r25, 0xFF	; 255
    49fe:	99 23       	and	r25, r25
    4a00:	a9 f0       	breq	.+42     	; 0x4a2c <__floatsisf+0x40>
    4a02:	f9 2f       	mov	r31, r25
    4a04:	96 e9       	ldi	r25, 0x96	; 150
    4a06:	bb 27       	eor	r27, r27
    4a08:	93 95       	inc	r25
    4a0a:	f6 95       	lsr	r31
    4a0c:	87 95       	ror	r24
    4a0e:	77 95       	ror	r23
    4a10:	67 95       	ror	r22
    4a12:	b7 95       	ror	r27
    4a14:	f1 11       	cpse	r31, r1
    4a16:	f8 cf       	rjmp	.-16     	; 0x4a08 <__floatsisf+0x1c>
    4a18:	fa f4       	brpl	.+62     	; 0x4a58 <__floatsisf+0x6c>
    4a1a:	bb 0f       	add	r27, r27
    4a1c:	11 f4       	brne	.+4      	; 0x4a22 <__floatsisf+0x36>
    4a1e:	60 ff       	sbrs	r22, 0
    4a20:	1b c0       	rjmp	.+54     	; 0x4a58 <__floatsisf+0x6c>
    4a22:	6f 5f       	subi	r22, 0xFF	; 255
    4a24:	7f 4f       	sbci	r23, 0xFF	; 255
    4a26:	8f 4f       	sbci	r24, 0xFF	; 255
    4a28:	9f 4f       	sbci	r25, 0xFF	; 255
    4a2a:	16 c0       	rjmp	.+44     	; 0x4a58 <__floatsisf+0x6c>
    4a2c:	88 23       	and	r24, r24
    4a2e:	11 f0       	breq	.+4      	; 0x4a34 <__floatsisf+0x48>
    4a30:	96 e9       	ldi	r25, 0x96	; 150
    4a32:	11 c0       	rjmp	.+34     	; 0x4a56 <__floatsisf+0x6a>
    4a34:	77 23       	and	r23, r23
    4a36:	21 f0       	breq	.+8      	; 0x4a40 <__floatsisf+0x54>
    4a38:	9e e8       	ldi	r25, 0x8E	; 142
    4a3a:	87 2f       	mov	r24, r23
    4a3c:	76 2f       	mov	r23, r22
    4a3e:	05 c0       	rjmp	.+10     	; 0x4a4a <__floatsisf+0x5e>
    4a40:	66 23       	and	r22, r22
    4a42:	71 f0       	breq	.+28     	; 0x4a60 <__floatsisf+0x74>
    4a44:	96 e8       	ldi	r25, 0x86	; 134
    4a46:	86 2f       	mov	r24, r22
    4a48:	70 e0       	ldi	r23, 0x00	; 0
    4a4a:	60 e0       	ldi	r22, 0x00	; 0
    4a4c:	2a f0       	brmi	.+10     	; 0x4a58 <__floatsisf+0x6c>
    4a4e:	9a 95       	dec	r25
    4a50:	66 0f       	add	r22, r22
    4a52:	77 1f       	adc	r23, r23
    4a54:	88 1f       	adc	r24, r24
    4a56:	da f7       	brpl	.-10     	; 0x4a4e <__floatsisf+0x62>
    4a58:	88 0f       	add	r24, r24
    4a5a:	96 95       	lsr	r25
    4a5c:	87 95       	ror	r24
    4a5e:	97 f9       	bld	r25, 7
    4a60:	08 95       	ret

00004a62 <__fp_cmp>:
    4a62:	99 0f       	add	r25, r25
    4a64:	00 08       	sbc	r0, r0
    4a66:	55 0f       	add	r21, r21
    4a68:	aa 0b       	sbc	r26, r26
    4a6a:	e0 e8       	ldi	r30, 0x80	; 128
    4a6c:	fe ef       	ldi	r31, 0xFE	; 254
    4a6e:	16 16       	cp	r1, r22
    4a70:	17 06       	cpc	r1, r23
    4a72:	e8 07       	cpc	r30, r24
    4a74:	f9 07       	cpc	r31, r25
    4a76:	c0 f0       	brcs	.+48     	; 0x4aa8 <__fp_cmp+0x46>
    4a78:	12 16       	cp	r1, r18
    4a7a:	13 06       	cpc	r1, r19
    4a7c:	e4 07       	cpc	r30, r20
    4a7e:	f5 07       	cpc	r31, r21
    4a80:	98 f0       	brcs	.+38     	; 0x4aa8 <__fp_cmp+0x46>
    4a82:	62 1b       	sub	r22, r18
    4a84:	73 0b       	sbc	r23, r19
    4a86:	84 0b       	sbc	r24, r20
    4a88:	95 0b       	sbc	r25, r21
    4a8a:	39 f4       	brne	.+14     	; 0x4a9a <__fp_cmp+0x38>
    4a8c:	0a 26       	eor	r0, r26
    4a8e:	61 f0       	breq	.+24     	; 0x4aa8 <__fp_cmp+0x46>
    4a90:	23 2b       	or	r18, r19
    4a92:	24 2b       	or	r18, r20
    4a94:	25 2b       	or	r18, r21
    4a96:	21 f4       	brne	.+8      	; 0x4aa0 <__fp_cmp+0x3e>
    4a98:	08 95       	ret
    4a9a:	0a 26       	eor	r0, r26
    4a9c:	09 f4       	brne	.+2      	; 0x4aa0 <__fp_cmp+0x3e>
    4a9e:	a1 40       	sbci	r26, 0x01	; 1
    4aa0:	a6 95       	lsr	r26
    4aa2:	8f ef       	ldi	r24, 0xFF	; 255
    4aa4:	81 1d       	adc	r24, r1
    4aa6:	81 1d       	adc	r24, r1
    4aa8:	08 95       	ret

00004aaa <__fp_inf>:
    4aaa:	97 f9       	bld	r25, 7
    4aac:	9f 67       	ori	r25, 0x7F	; 127
    4aae:	80 e8       	ldi	r24, 0x80	; 128
    4ab0:	70 e0       	ldi	r23, 0x00	; 0
    4ab2:	60 e0       	ldi	r22, 0x00	; 0
    4ab4:	08 95       	ret

00004ab6 <__fp_nan>:
    4ab6:	9f ef       	ldi	r25, 0xFF	; 255
    4ab8:	80 ec       	ldi	r24, 0xC0	; 192
    4aba:	08 95       	ret

00004abc <__fp_pscA>:
    4abc:	00 24       	eor	r0, r0
    4abe:	0a 94       	dec	r0
    4ac0:	16 16       	cp	r1, r22
    4ac2:	17 06       	cpc	r1, r23
    4ac4:	18 06       	cpc	r1, r24
    4ac6:	09 06       	cpc	r0, r25
    4ac8:	08 95       	ret

00004aca <__fp_pscB>:
    4aca:	00 24       	eor	r0, r0
    4acc:	0a 94       	dec	r0
    4ace:	12 16       	cp	r1, r18
    4ad0:	13 06       	cpc	r1, r19
    4ad2:	14 06       	cpc	r1, r20
    4ad4:	05 06       	cpc	r0, r21
    4ad6:	08 95       	ret

00004ad8 <__fp_round>:
    4ad8:	09 2e       	mov	r0, r25
    4ada:	03 94       	inc	r0
    4adc:	00 0c       	add	r0, r0
    4ade:	11 f4       	brne	.+4      	; 0x4ae4 <__fp_round+0xc>
    4ae0:	88 23       	and	r24, r24
    4ae2:	52 f0       	brmi	.+20     	; 0x4af8 <__fp_round+0x20>
    4ae4:	bb 0f       	add	r27, r27
    4ae6:	40 f4       	brcc	.+16     	; 0x4af8 <__fp_round+0x20>
    4ae8:	bf 2b       	or	r27, r31
    4aea:	11 f4       	brne	.+4      	; 0x4af0 <__fp_round+0x18>
    4aec:	60 ff       	sbrs	r22, 0
    4aee:	04 c0       	rjmp	.+8      	; 0x4af8 <__fp_round+0x20>
    4af0:	6f 5f       	subi	r22, 0xFF	; 255
    4af2:	7f 4f       	sbci	r23, 0xFF	; 255
    4af4:	8f 4f       	sbci	r24, 0xFF	; 255
    4af6:	9f 4f       	sbci	r25, 0xFF	; 255
    4af8:	08 95       	ret

00004afa <__fp_split3>:
    4afa:	57 fd       	sbrc	r21, 7
    4afc:	90 58       	subi	r25, 0x80	; 128
    4afe:	44 0f       	add	r20, r20
    4b00:	55 1f       	adc	r21, r21
    4b02:	59 f0       	breq	.+22     	; 0x4b1a <__fp_splitA+0x10>
    4b04:	5f 3f       	cpi	r21, 0xFF	; 255
    4b06:	71 f0       	breq	.+28     	; 0x4b24 <__fp_splitA+0x1a>
    4b08:	47 95       	ror	r20

00004b0a <__fp_splitA>:
    4b0a:	88 0f       	add	r24, r24
    4b0c:	97 fb       	bst	r25, 7
    4b0e:	99 1f       	adc	r25, r25
    4b10:	61 f0       	breq	.+24     	; 0x4b2a <__fp_splitA+0x20>
    4b12:	9f 3f       	cpi	r25, 0xFF	; 255
    4b14:	79 f0       	breq	.+30     	; 0x4b34 <__fp_splitA+0x2a>
    4b16:	87 95       	ror	r24
    4b18:	08 95       	ret
    4b1a:	12 16       	cp	r1, r18
    4b1c:	13 06       	cpc	r1, r19
    4b1e:	14 06       	cpc	r1, r20
    4b20:	55 1f       	adc	r21, r21
    4b22:	f2 cf       	rjmp	.-28     	; 0x4b08 <__fp_split3+0xe>
    4b24:	46 95       	lsr	r20
    4b26:	f1 df       	rcall	.-30     	; 0x4b0a <__fp_splitA>
    4b28:	08 c0       	rjmp	.+16     	; 0x4b3a <__fp_splitA+0x30>
    4b2a:	16 16       	cp	r1, r22
    4b2c:	17 06       	cpc	r1, r23
    4b2e:	18 06       	cpc	r1, r24
    4b30:	99 1f       	adc	r25, r25
    4b32:	f1 cf       	rjmp	.-30     	; 0x4b16 <__fp_splitA+0xc>
    4b34:	86 95       	lsr	r24
    4b36:	71 05       	cpc	r23, r1
    4b38:	61 05       	cpc	r22, r1
    4b3a:	08 94       	sec
    4b3c:	08 95       	ret

00004b3e <__fp_zero>:
    4b3e:	e8 94       	clt

00004b40 <__fp_szero>:
    4b40:	bb 27       	eor	r27, r27
    4b42:	66 27       	eor	r22, r22
    4b44:	77 27       	eor	r23, r23
    4b46:	cb 01       	movw	r24, r22
    4b48:	97 f9       	bld	r25, 7
    4b4a:	08 95       	ret

00004b4c <__gesf2>:
    4b4c:	8a df       	rcall	.-236    	; 0x4a62 <__fp_cmp>
    4b4e:	08 f4       	brcc	.+2      	; 0x4b52 <__gesf2+0x6>
    4b50:	8f ef       	ldi	r24, 0xFF	; 255
    4b52:	08 95       	ret

00004b54 <__mulsf3>:
    4b54:	0b d0       	rcall	.+22     	; 0x4b6c <__mulsf3x>
    4b56:	c0 cf       	rjmp	.-128    	; 0x4ad8 <__fp_round>
    4b58:	b1 df       	rcall	.-158    	; 0x4abc <__fp_pscA>
    4b5a:	28 f0       	brcs	.+10     	; 0x4b66 <__mulsf3+0x12>
    4b5c:	b6 df       	rcall	.-148    	; 0x4aca <__fp_pscB>
    4b5e:	18 f0       	brcs	.+6      	; 0x4b66 <__mulsf3+0x12>
    4b60:	95 23       	and	r25, r21
    4b62:	09 f0       	breq	.+2      	; 0x4b66 <__mulsf3+0x12>
    4b64:	a2 cf       	rjmp	.-188    	; 0x4aaa <__fp_inf>
    4b66:	a7 cf       	rjmp	.-178    	; 0x4ab6 <__fp_nan>
    4b68:	11 24       	eor	r1, r1
    4b6a:	ea cf       	rjmp	.-44     	; 0x4b40 <__fp_szero>

00004b6c <__mulsf3x>:
    4b6c:	c6 df       	rcall	.-116    	; 0x4afa <__fp_split3>
    4b6e:	a0 f3       	brcs	.-24     	; 0x4b58 <__mulsf3+0x4>

00004b70 <__mulsf3_pse>:
    4b70:	95 9f       	mul	r25, r21
    4b72:	d1 f3       	breq	.-12     	; 0x4b68 <__mulsf3+0x14>
    4b74:	95 0f       	add	r25, r21
    4b76:	50 e0       	ldi	r21, 0x00	; 0
    4b78:	55 1f       	adc	r21, r21
    4b7a:	62 9f       	mul	r22, r18
    4b7c:	f0 01       	movw	r30, r0
    4b7e:	72 9f       	mul	r23, r18
    4b80:	bb 27       	eor	r27, r27
    4b82:	f0 0d       	add	r31, r0
    4b84:	b1 1d       	adc	r27, r1
    4b86:	63 9f       	mul	r22, r19
    4b88:	aa 27       	eor	r26, r26
    4b8a:	f0 0d       	add	r31, r0
    4b8c:	b1 1d       	adc	r27, r1
    4b8e:	aa 1f       	adc	r26, r26
    4b90:	64 9f       	mul	r22, r20
    4b92:	66 27       	eor	r22, r22
    4b94:	b0 0d       	add	r27, r0
    4b96:	a1 1d       	adc	r26, r1
    4b98:	66 1f       	adc	r22, r22
    4b9a:	82 9f       	mul	r24, r18
    4b9c:	22 27       	eor	r18, r18
    4b9e:	b0 0d       	add	r27, r0
    4ba0:	a1 1d       	adc	r26, r1
    4ba2:	62 1f       	adc	r22, r18
    4ba4:	73 9f       	mul	r23, r19
    4ba6:	b0 0d       	add	r27, r0
    4ba8:	a1 1d       	adc	r26, r1
    4baa:	62 1f       	adc	r22, r18
    4bac:	83 9f       	mul	r24, r19
    4bae:	a0 0d       	add	r26, r0
    4bb0:	61 1d       	adc	r22, r1
    4bb2:	22 1f       	adc	r18, r18
    4bb4:	74 9f       	mul	r23, r20
    4bb6:	33 27       	eor	r19, r19
    4bb8:	a0 0d       	add	r26, r0
    4bba:	61 1d       	adc	r22, r1
    4bbc:	23 1f       	adc	r18, r19
    4bbe:	84 9f       	mul	r24, r20
    4bc0:	60 0d       	add	r22, r0
    4bc2:	21 1d       	adc	r18, r1
    4bc4:	82 2f       	mov	r24, r18
    4bc6:	76 2f       	mov	r23, r22
    4bc8:	6a 2f       	mov	r22, r26
    4bca:	11 24       	eor	r1, r1
    4bcc:	9f 57       	subi	r25, 0x7F	; 127
    4bce:	50 40       	sbci	r21, 0x00	; 0
    4bd0:	8a f0       	brmi	.+34     	; 0x4bf4 <__mulsf3_pse+0x84>
    4bd2:	e1 f0       	breq	.+56     	; 0x4c0c <__mulsf3_pse+0x9c>
    4bd4:	88 23       	and	r24, r24
    4bd6:	4a f0       	brmi	.+18     	; 0x4bea <__mulsf3_pse+0x7a>
    4bd8:	ee 0f       	add	r30, r30
    4bda:	ff 1f       	adc	r31, r31
    4bdc:	bb 1f       	adc	r27, r27
    4bde:	66 1f       	adc	r22, r22
    4be0:	77 1f       	adc	r23, r23
    4be2:	88 1f       	adc	r24, r24
    4be4:	91 50       	subi	r25, 0x01	; 1
    4be6:	50 40       	sbci	r21, 0x00	; 0
    4be8:	a9 f7       	brne	.-22     	; 0x4bd4 <__mulsf3_pse+0x64>
    4bea:	9e 3f       	cpi	r25, 0xFE	; 254
    4bec:	51 05       	cpc	r21, r1
    4bee:	70 f0       	brcs	.+28     	; 0x4c0c <__mulsf3_pse+0x9c>
    4bf0:	5c cf       	rjmp	.-328    	; 0x4aaa <__fp_inf>
    4bf2:	a6 cf       	rjmp	.-180    	; 0x4b40 <__fp_szero>
    4bf4:	5f 3f       	cpi	r21, 0xFF	; 255
    4bf6:	ec f3       	brlt	.-6      	; 0x4bf2 <__mulsf3_pse+0x82>
    4bf8:	98 3e       	cpi	r25, 0xE8	; 232
    4bfa:	dc f3       	brlt	.-10     	; 0x4bf2 <__mulsf3_pse+0x82>
    4bfc:	86 95       	lsr	r24
    4bfe:	77 95       	ror	r23
    4c00:	67 95       	ror	r22
    4c02:	b7 95       	ror	r27
    4c04:	f7 95       	ror	r31
    4c06:	e7 95       	ror	r30
    4c08:	9f 5f       	subi	r25, 0xFF	; 255
    4c0a:	c1 f7       	brne	.-16     	; 0x4bfc <__mulsf3_pse+0x8c>
    4c0c:	fe 2b       	or	r31, r30
    4c0e:	88 0f       	add	r24, r24
    4c10:	91 1d       	adc	r25, r1
    4c12:	96 95       	lsr	r25
    4c14:	87 95       	ror	r24
    4c16:	97 f9       	bld	r25, 7
    4c18:	08 95       	ret

00004c1a <pow>:
    4c1a:	fa 01       	movw	r30, r20
    4c1c:	ee 0f       	add	r30, r30
    4c1e:	ff 1f       	adc	r31, r31
    4c20:	30 96       	adiw	r30, 0x00	; 0
    4c22:	21 05       	cpc	r18, r1
    4c24:	31 05       	cpc	r19, r1
    4c26:	99 f1       	breq	.+102    	; 0x4c8e <pow+0x74>
    4c28:	61 15       	cp	r22, r1
    4c2a:	71 05       	cpc	r23, r1
    4c2c:	61 f4       	brne	.+24     	; 0x4c46 <pow+0x2c>
    4c2e:	80 38       	cpi	r24, 0x80	; 128
    4c30:	bf e3       	ldi	r27, 0x3F	; 63
    4c32:	9b 07       	cpc	r25, r27
    4c34:	49 f1       	breq	.+82     	; 0x4c88 <pow+0x6e>
    4c36:	68 94       	set
    4c38:	90 38       	cpi	r25, 0x80	; 128
    4c3a:	81 05       	cpc	r24, r1
    4c3c:	61 f0       	breq	.+24     	; 0x4c56 <pow+0x3c>
    4c3e:	80 38       	cpi	r24, 0x80	; 128
    4c40:	bf ef       	ldi	r27, 0xFF	; 255
    4c42:	9b 07       	cpc	r25, r27
    4c44:	41 f0       	breq	.+16     	; 0x4c56 <pow+0x3c>
    4c46:	99 23       	and	r25, r25
    4c48:	42 f5       	brpl	.+80     	; 0x4c9a <pow+0x80>
    4c4a:	ff 3f       	cpi	r31, 0xFF	; 255
    4c4c:	e1 05       	cpc	r30, r1
    4c4e:	31 05       	cpc	r19, r1
    4c50:	21 05       	cpc	r18, r1
    4c52:	11 f1       	breq	.+68     	; 0x4c98 <pow+0x7e>
    4c54:	e8 94       	clt
    4c56:	08 94       	sec
    4c58:	e7 95       	ror	r30
    4c5a:	d9 01       	movw	r26, r18
    4c5c:	aa 23       	and	r26, r26
    4c5e:	29 f4       	brne	.+10     	; 0x4c6a <pow+0x50>
    4c60:	ab 2f       	mov	r26, r27
    4c62:	be 2f       	mov	r27, r30
    4c64:	f8 5f       	subi	r31, 0xF8	; 248
    4c66:	d0 f3       	brcs	.-12     	; 0x4c5c <pow+0x42>
    4c68:	10 c0       	rjmp	.+32     	; 0x4c8a <pow+0x70>
    4c6a:	ff 5f       	subi	r31, 0xFF	; 255
    4c6c:	70 f4       	brcc	.+28     	; 0x4c8a <pow+0x70>
    4c6e:	a6 95       	lsr	r26
    4c70:	e0 f7       	brcc	.-8      	; 0x4c6a <pow+0x50>
    4c72:	f7 39       	cpi	r31, 0x97	; 151
    4c74:	50 f0       	brcs	.+20     	; 0x4c8a <pow+0x70>
    4c76:	19 f0       	breq	.+6      	; 0x4c7e <pow+0x64>
    4c78:	ff 3a       	cpi	r31, 0xAF	; 175
    4c7a:	38 f4       	brcc	.+14     	; 0x4c8a <pow+0x70>
    4c7c:	9f 77       	andi	r25, 0x7F	; 127
    4c7e:	9f 93       	push	r25
    4c80:	0c d0       	rcall	.+24     	; 0x4c9a <pow+0x80>
    4c82:	0f 90       	pop	r0
    4c84:	07 fc       	sbrc	r0, 7
    4c86:	90 58       	subi	r25, 0x80	; 128
    4c88:	08 95       	ret
    4c8a:	3e f0       	brts	.+14     	; 0x4c9a <pow+0x80>
    4c8c:	14 cf       	rjmp	.-472    	; 0x4ab6 <__fp_nan>
    4c8e:	60 e0       	ldi	r22, 0x00	; 0
    4c90:	70 e0       	ldi	r23, 0x00	; 0
    4c92:	80 e8       	ldi	r24, 0x80	; 128
    4c94:	9f e3       	ldi	r25, 0x3F	; 63
    4c96:	08 95       	ret
    4c98:	4f e7       	ldi	r20, 0x7F	; 127
    4c9a:	9f 77       	andi	r25, 0x7F	; 127
    4c9c:	5f 93       	push	r21
    4c9e:	4f 93       	push	r20
    4ca0:	3f 93       	push	r19
    4ca2:	2f 93       	push	r18
    4ca4:	e7 d0       	rcall	.+462    	; 0x4e74 <log>
    4ca6:	2f 91       	pop	r18
    4ca8:	3f 91       	pop	r19
    4caa:	4f 91       	pop	r20
    4cac:	5f 91       	pop	r21
    4cae:	52 df       	rcall	.-348    	; 0x4b54 <__mulsf3>
    4cb0:	25 c0       	rjmp	.+74     	; 0x4cfc <exp>

00004cb2 <round>:
    4cb2:	2b df       	rcall	.-426    	; 0x4b0a <__fp_splitA>
    4cb4:	e0 f0       	brcs	.+56     	; 0x4cee <round+0x3c>
    4cb6:	9e 37       	cpi	r25, 0x7E	; 126
    4cb8:	d8 f0       	brcs	.+54     	; 0x4cf0 <round+0x3e>
    4cba:	96 39       	cpi	r25, 0x96	; 150
    4cbc:	b8 f4       	brcc	.+46     	; 0x4cec <round+0x3a>
    4cbe:	9e 38       	cpi	r25, 0x8E	; 142
    4cc0:	48 f4       	brcc	.+18     	; 0x4cd4 <round+0x22>
    4cc2:	67 2f       	mov	r22, r23
    4cc4:	78 2f       	mov	r23, r24
    4cc6:	88 27       	eor	r24, r24
    4cc8:	98 5f       	subi	r25, 0xF8	; 248
    4cca:	f9 cf       	rjmp	.-14     	; 0x4cbe <round+0xc>
    4ccc:	86 95       	lsr	r24
    4cce:	77 95       	ror	r23
    4cd0:	67 95       	ror	r22
    4cd2:	93 95       	inc	r25
    4cd4:	95 39       	cpi	r25, 0x95	; 149
    4cd6:	d0 f3       	brcs	.-12     	; 0x4ccc <round+0x1a>
    4cd8:	b6 2f       	mov	r27, r22
    4cda:	b1 70       	andi	r27, 0x01	; 1
    4cdc:	6b 0f       	add	r22, r27
    4cde:	71 1d       	adc	r23, r1
    4ce0:	81 1d       	adc	r24, r1
    4ce2:	20 f4       	brcc	.+8      	; 0x4cec <round+0x3a>
    4ce4:	87 95       	ror	r24
    4ce6:	77 95       	ror	r23
    4ce8:	67 95       	ror	r22
    4cea:	93 95       	inc	r25
    4cec:	33 c0       	rjmp	.+102    	; 0x4d54 <__fp_mintl>
    4cee:	4d c0       	rjmp	.+154    	; 0x4d8a <__fp_mpack>
    4cf0:	27 cf       	rjmp	.-434    	; 0x4b40 <__fp_szero>
    4cf2:	19 f4       	brne	.+6      	; 0x4cfa <round+0x48>
    4cf4:	0e f0       	brts	.+2      	; 0x4cf8 <round+0x46>
    4cf6:	d9 ce       	rjmp	.-590    	; 0x4aaa <__fp_inf>
    4cf8:	22 cf       	rjmp	.-444    	; 0x4b3e <__fp_zero>
    4cfa:	dd ce       	rjmp	.-582    	; 0x4ab6 <__fp_nan>

00004cfc <exp>:
    4cfc:	06 df       	rcall	.-500    	; 0x4b0a <__fp_splitA>
    4cfe:	c8 f3       	brcs	.-14     	; 0x4cf2 <round+0x40>
    4d00:	96 38       	cpi	r25, 0x86	; 134
    4d02:	c0 f7       	brcc	.-16     	; 0x4cf4 <round+0x42>
    4d04:	07 f8       	bld	r0, 7
    4d06:	0f 92       	push	r0
    4d08:	e8 94       	clt
    4d0a:	2b e3       	ldi	r18, 0x3B	; 59
    4d0c:	3a ea       	ldi	r19, 0xAA	; 170
    4d0e:	48 eb       	ldi	r20, 0xB8	; 184
    4d10:	5f e7       	ldi	r21, 0x7F	; 127
    4d12:	2e df       	rcall	.-420    	; 0x4b70 <__mulsf3_pse>
    4d14:	0f 92       	push	r0
    4d16:	0f 92       	push	r0
    4d18:	0f 92       	push	r0
    4d1a:	4d b7       	in	r20, 0x3d	; 61
    4d1c:	5e b7       	in	r21, 0x3e	; 62
    4d1e:	0f 92       	push	r0
    4d20:	e9 d0       	rcall	.+466    	; 0x4ef4 <modf>
    4d22:	e8 e6       	ldi	r30, 0x68	; 104
    4d24:	f0 e0       	ldi	r31, 0x00	; 0
    4d26:	3f d0       	rcall	.+126    	; 0x4da6 <__fp_powser>
    4d28:	4f 91       	pop	r20
    4d2a:	5f 91       	pop	r21
    4d2c:	ef 91       	pop	r30
    4d2e:	ff 91       	pop	r31
    4d30:	e5 95       	asr	r30
    4d32:	ee 1f       	adc	r30, r30
    4d34:	ff 1f       	adc	r31, r31
    4d36:	49 f0       	breq	.+18     	; 0x4d4a <exp+0x4e>
    4d38:	fe 57       	subi	r31, 0x7E	; 126
    4d3a:	e0 68       	ori	r30, 0x80	; 128
    4d3c:	44 27       	eor	r20, r20
    4d3e:	ee 0f       	add	r30, r30
    4d40:	44 1f       	adc	r20, r20
    4d42:	fa 95       	dec	r31
    4d44:	e1 f7       	brne	.-8      	; 0x4d3e <exp+0x42>
    4d46:	41 95       	neg	r20
    4d48:	55 0b       	sbc	r21, r21
    4d4a:	5b d0       	rcall	.+182    	; 0x4e02 <ldexp>
    4d4c:	0f 90       	pop	r0
    4d4e:	07 fe       	sbrs	r0, 7
    4d50:	4f c0       	rjmp	.+158    	; 0x4df0 <inverse>
    4d52:	08 95       	ret

00004d54 <__fp_mintl>:
    4d54:	88 23       	and	r24, r24
    4d56:	71 f4       	brne	.+28     	; 0x4d74 <__fp_mintl+0x20>
    4d58:	77 23       	and	r23, r23
    4d5a:	21 f0       	breq	.+8      	; 0x4d64 <__fp_mintl+0x10>
    4d5c:	98 50       	subi	r25, 0x08	; 8
    4d5e:	87 2b       	or	r24, r23
    4d60:	76 2f       	mov	r23, r22
    4d62:	07 c0       	rjmp	.+14     	; 0x4d72 <__fp_mintl+0x1e>
    4d64:	66 23       	and	r22, r22
    4d66:	11 f4       	brne	.+4      	; 0x4d6c <__fp_mintl+0x18>
    4d68:	99 27       	eor	r25, r25
    4d6a:	0d c0       	rjmp	.+26     	; 0x4d86 <__fp_mintl+0x32>
    4d6c:	90 51       	subi	r25, 0x10	; 16
    4d6e:	86 2b       	or	r24, r22
    4d70:	70 e0       	ldi	r23, 0x00	; 0
    4d72:	60 e0       	ldi	r22, 0x00	; 0
    4d74:	2a f0       	brmi	.+10     	; 0x4d80 <__fp_mintl+0x2c>
    4d76:	9a 95       	dec	r25
    4d78:	66 0f       	add	r22, r22
    4d7a:	77 1f       	adc	r23, r23
    4d7c:	88 1f       	adc	r24, r24
    4d7e:	da f7       	brpl	.-10     	; 0x4d76 <__fp_mintl+0x22>
    4d80:	88 0f       	add	r24, r24
    4d82:	96 95       	lsr	r25
    4d84:	87 95       	ror	r24
    4d86:	97 f9       	bld	r25, 7
    4d88:	08 95       	ret

00004d8a <__fp_mpack>:
    4d8a:	9f 3f       	cpi	r25, 0xFF	; 255
    4d8c:	31 f0       	breq	.+12     	; 0x4d9a <__fp_mpack_finite+0xc>

00004d8e <__fp_mpack_finite>:
    4d8e:	91 50       	subi	r25, 0x01	; 1
    4d90:	20 f4       	brcc	.+8      	; 0x4d9a <__fp_mpack_finite+0xc>
    4d92:	87 95       	ror	r24
    4d94:	77 95       	ror	r23
    4d96:	67 95       	ror	r22
    4d98:	b7 95       	ror	r27
    4d9a:	88 0f       	add	r24, r24
    4d9c:	91 1d       	adc	r25, r1
    4d9e:	96 95       	lsr	r25
    4da0:	87 95       	ror	r24
    4da2:	97 f9       	bld	r25, 7
    4da4:	08 95       	ret

00004da6 <__fp_powser>:
    4da6:	df 93       	push	r29
    4da8:	cf 93       	push	r28
    4daa:	1f 93       	push	r17
    4dac:	0f 93       	push	r16
    4dae:	ff 92       	push	r15
    4db0:	ef 92       	push	r14
    4db2:	df 92       	push	r13
    4db4:	7b 01       	movw	r14, r22
    4db6:	8c 01       	movw	r16, r24
    4db8:	68 94       	set
    4dba:	05 c0       	rjmp	.+10     	; 0x4dc6 <__fp_powser+0x20>
    4dbc:	da 2e       	mov	r13, r26
    4dbe:	ef 01       	movw	r28, r30
    4dc0:	d5 de       	rcall	.-598    	; 0x4b6c <__mulsf3x>
    4dc2:	fe 01       	movw	r30, r28
    4dc4:	e8 94       	clt
    4dc6:	a5 91       	lpm	r26, Z+
    4dc8:	25 91       	lpm	r18, Z+
    4dca:	35 91       	lpm	r19, Z+
    4dcc:	45 91       	lpm	r20, Z+
    4dce:	55 91       	lpm	r21, Z+
    4dd0:	ae f3       	brts	.-22     	; 0x4dbc <__fp_powser+0x16>
    4dd2:	ef 01       	movw	r28, r30
    4dd4:	19 dd       	rcall	.-1486   	; 0x4808 <__addsf3x>
    4dd6:	fe 01       	movw	r30, r28
    4dd8:	97 01       	movw	r18, r14
    4dda:	a8 01       	movw	r20, r16
    4ddc:	da 94       	dec	r13
    4dde:	79 f7       	brne	.-34     	; 0x4dbe <__fp_powser+0x18>
    4de0:	df 90       	pop	r13
    4de2:	ef 90       	pop	r14
    4de4:	ff 90       	pop	r15
    4de6:	0f 91       	pop	r16
    4de8:	1f 91       	pop	r17
    4dea:	cf 91       	pop	r28
    4dec:	df 91       	pop	r29
    4dee:	08 95       	ret

00004df0 <inverse>:
    4df0:	9b 01       	movw	r18, r22
    4df2:	ac 01       	movw	r20, r24
    4df4:	60 e0       	ldi	r22, 0x00	; 0
    4df6:	70 e0       	ldi	r23, 0x00	; 0
    4df8:	80 e8       	ldi	r24, 0x80	; 128
    4dfa:	9f e3       	ldi	r25, 0x3F	; 63
    4dfc:	5c cd       	rjmp	.-1352   	; 0x48b6 <__divsf3>
    4dfe:	55 ce       	rjmp	.-854    	; 0x4aaa <__fp_inf>
    4e00:	c4 cf       	rjmp	.-120    	; 0x4d8a <__fp_mpack>

00004e02 <ldexp>:
    4e02:	83 de       	rcall	.-762    	; 0x4b0a <__fp_splitA>
    4e04:	e8 f3       	brcs	.-6      	; 0x4e00 <inverse+0x10>
    4e06:	99 23       	and	r25, r25
    4e08:	d9 f3       	breq	.-10     	; 0x4e00 <inverse+0x10>
    4e0a:	94 0f       	add	r25, r20
    4e0c:	51 1d       	adc	r21, r1
    4e0e:	bb f3       	brvs	.-18     	; 0x4dfe <inverse+0xe>
    4e10:	91 50       	subi	r25, 0x01	; 1
    4e12:	50 40       	sbci	r21, 0x00	; 0
    4e14:	94 f0       	brlt	.+36     	; 0x4e3a <ldexp+0x38>
    4e16:	59 f0       	breq	.+22     	; 0x4e2e <ldexp+0x2c>
    4e18:	88 23       	and	r24, r24
    4e1a:	32 f0       	brmi	.+12     	; 0x4e28 <ldexp+0x26>
    4e1c:	66 0f       	add	r22, r22
    4e1e:	77 1f       	adc	r23, r23
    4e20:	88 1f       	adc	r24, r24
    4e22:	91 50       	subi	r25, 0x01	; 1
    4e24:	50 40       	sbci	r21, 0x00	; 0
    4e26:	c1 f7       	brne	.-16     	; 0x4e18 <ldexp+0x16>
    4e28:	9e 3f       	cpi	r25, 0xFE	; 254
    4e2a:	51 05       	cpc	r21, r1
    4e2c:	44 f7       	brge	.-48     	; 0x4dfe <inverse+0xe>
    4e2e:	88 0f       	add	r24, r24
    4e30:	91 1d       	adc	r25, r1
    4e32:	96 95       	lsr	r25
    4e34:	87 95       	ror	r24
    4e36:	97 f9       	bld	r25, 7
    4e38:	08 95       	ret
    4e3a:	5f 3f       	cpi	r21, 0xFF	; 255
    4e3c:	ac f0       	brlt	.+42     	; 0x4e68 <ldexp+0x66>
    4e3e:	98 3e       	cpi	r25, 0xE8	; 232
    4e40:	9c f0       	brlt	.+38     	; 0x4e68 <ldexp+0x66>
    4e42:	bb 27       	eor	r27, r27
    4e44:	86 95       	lsr	r24
    4e46:	77 95       	ror	r23
    4e48:	67 95       	ror	r22
    4e4a:	b7 95       	ror	r27
    4e4c:	08 f4       	brcc	.+2      	; 0x4e50 <ldexp+0x4e>
    4e4e:	b1 60       	ori	r27, 0x01	; 1
    4e50:	93 95       	inc	r25
    4e52:	c1 f7       	brne	.-16     	; 0x4e44 <ldexp+0x42>
    4e54:	bb 0f       	add	r27, r27
    4e56:	58 f7       	brcc	.-42     	; 0x4e2e <ldexp+0x2c>
    4e58:	11 f4       	brne	.+4      	; 0x4e5e <ldexp+0x5c>
    4e5a:	60 ff       	sbrs	r22, 0
    4e5c:	e8 cf       	rjmp	.-48     	; 0x4e2e <ldexp+0x2c>
    4e5e:	6f 5f       	subi	r22, 0xFF	; 255
    4e60:	7f 4f       	sbci	r23, 0xFF	; 255
    4e62:	8f 4f       	sbci	r24, 0xFF	; 255
    4e64:	9f 4f       	sbci	r25, 0xFF	; 255
    4e66:	e3 cf       	rjmp	.-58     	; 0x4e2e <ldexp+0x2c>
    4e68:	6b ce       	rjmp	.-810    	; 0x4b40 <__fp_szero>
    4e6a:	0e f0       	brts	.+2      	; 0x4e6e <ldexp+0x6c>
    4e6c:	8e cf       	rjmp	.-228    	; 0x4d8a <__fp_mpack>
    4e6e:	23 ce       	rjmp	.-954    	; 0x4ab6 <__fp_nan>
    4e70:	68 94       	set
    4e72:	1b ce       	rjmp	.-970    	; 0x4aaa <__fp_inf>

00004e74 <log>:
    4e74:	4a de       	rcall	.-876    	; 0x4b0a <__fp_splitA>
    4e76:	c8 f3       	brcs	.-14     	; 0x4e6a <ldexp+0x68>
    4e78:	99 23       	and	r25, r25
    4e7a:	d1 f3       	breq	.-12     	; 0x4e70 <ldexp+0x6e>
    4e7c:	c6 f3       	brts	.-16     	; 0x4e6e <ldexp+0x6c>
    4e7e:	df 93       	push	r29
    4e80:	cf 93       	push	r28
    4e82:	1f 93       	push	r17
    4e84:	0f 93       	push	r16
    4e86:	ff 92       	push	r15
    4e88:	c9 2f       	mov	r28, r25
    4e8a:	dd 27       	eor	r29, r29
    4e8c:	88 23       	and	r24, r24
    4e8e:	2a f0       	brmi	.+10     	; 0x4e9a <log+0x26>
    4e90:	21 97       	sbiw	r28, 0x01	; 1
    4e92:	66 0f       	add	r22, r22
    4e94:	77 1f       	adc	r23, r23
    4e96:	88 1f       	adc	r24, r24
    4e98:	da f7       	brpl	.-10     	; 0x4e90 <log+0x1c>
    4e9a:	20 e0       	ldi	r18, 0x00	; 0
    4e9c:	30 e0       	ldi	r19, 0x00	; 0
    4e9e:	40 e8       	ldi	r20, 0x80	; 128
    4ea0:	5f eb       	ldi	r21, 0xBF	; 191
    4ea2:	9f e3       	ldi	r25, 0x3F	; 63
    4ea4:	88 39       	cpi	r24, 0x98	; 152
    4ea6:	20 f0       	brcs	.+8      	; 0x4eb0 <log+0x3c>
    4ea8:	80 3e       	cpi	r24, 0xE0	; 224
    4eaa:	30 f0       	brcs	.+12     	; 0x4eb8 <log+0x44>
    4eac:	21 96       	adiw	r28, 0x01	; 1
    4eae:	8f 77       	andi	r24, 0x7F	; 127
    4eb0:	9a dc       	rcall	.-1740   	; 0x47e6 <__addsf3>
    4eb2:	e0 e9       	ldi	r30, 0x90	; 144
    4eb4:	f0 e0       	ldi	r31, 0x00	; 0
    4eb6:	03 c0       	rjmp	.+6      	; 0x4ebe <log+0x4a>
    4eb8:	96 dc       	rcall	.-1748   	; 0x47e6 <__addsf3>
    4eba:	ed eb       	ldi	r30, 0xBD	; 189
    4ebc:	f0 e0       	ldi	r31, 0x00	; 0
    4ebe:	73 df       	rcall	.-282    	; 0x4da6 <__fp_powser>
    4ec0:	8b 01       	movw	r16, r22
    4ec2:	be 01       	movw	r22, r28
    4ec4:	ec 01       	movw	r28, r24
    4ec6:	fb 2e       	mov	r15, r27
    4ec8:	6f 57       	subi	r22, 0x7F	; 127
    4eca:	71 09       	sbc	r23, r1
    4ecc:	75 95       	asr	r23
    4ece:	77 1f       	adc	r23, r23
    4ed0:	88 0b       	sbc	r24, r24
    4ed2:	99 0b       	sbc	r25, r25
    4ed4:	8b dd       	rcall	.-1258   	; 0x49ec <__floatsisf>
    4ed6:	28 e1       	ldi	r18, 0x18	; 24
    4ed8:	32 e7       	ldi	r19, 0x72	; 114
    4eda:	41 e3       	ldi	r20, 0x31	; 49
    4edc:	5f e3       	ldi	r21, 0x3F	; 63
    4ede:	46 de       	rcall	.-884    	; 0x4b6c <__mulsf3x>
    4ee0:	af 2d       	mov	r26, r15
    4ee2:	98 01       	movw	r18, r16
    4ee4:	ae 01       	movw	r20, r28
    4ee6:	ff 90       	pop	r15
    4ee8:	0f 91       	pop	r16
    4eea:	1f 91       	pop	r17
    4eec:	cf 91       	pop	r28
    4eee:	df 91       	pop	r29
    4ef0:	8b dc       	rcall	.-1770   	; 0x4808 <__addsf3x>
    4ef2:	f2 cd       	rjmp	.-1052   	; 0x4ad8 <__fp_round>

00004ef4 <modf>:
    4ef4:	fa 01       	movw	r30, r20
    4ef6:	dc 01       	movw	r26, r24
    4ef8:	aa 0f       	add	r26, r26
    4efa:	bb 1f       	adc	r27, r27
    4efc:	9b 01       	movw	r18, r22
    4efe:	ac 01       	movw	r20, r24
    4f00:	bf 57       	subi	r27, 0x7F	; 127
    4f02:	28 f4       	brcc	.+10     	; 0x4f0e <modf+0x1a>
    4f04:	22 27       	eor	r18, r18
    4f06:	33 27       	eor	r19, r19
    4f08:	44 27       	eor	r20, r20
    4f0a:	50 78       	andi	r21, 0x80	; 128
    4f0c:	1f c0       	rjmp	.+62     	; 0x4f4c <modf+0x58>
    4f0e:	b7 51       	subi	r27, 0x17	; 23
    4f10:	88 f4       	brcc	.+34     	; 0x4f34 <modf+0x40>
    4f12:	ab 2f       	mov	r26, r27
    4f14:	00 24       	eor	r0, r0
    4f16:	46 95       	lsr	r20
    4f18:	37 95       	ror	r19
    4f1a:	27 95       	ror	r18
    4f1c:	01 1c       	adc	r0, r1
    4f1e:	a3 95       	inc	r26
    4f20:	d2 f3       	brmi	.-12     	; 0x4f16 <modf+0x22>
    4f22:	00 20       	and	r0, r0
    4f24:	69 f0       	breq	.+26     	; 0x4f40 <modf+0x4c>
    4f26:	22 0f       	add	r18, r18
    4f28:	33 1f       	adc	r19, r19
    4f2a:	44 1f       	adc	r20, r20
    4f2c:	b3 95       	inc	r27
    4f2e:	da f3       	brmi	.-10     	; 0x4f26 <modf+0x32>
    4f30:	0d d0       	rcall	.+26     	; 0x4f4c <modf+0x58>
    4f32:	58 cc       	rjmp	.-1872   	; 0x47e4 <__subsf3>
    4f34:	61 30       	cpi	r22, 0x01	; 1
    4f36:	71 05       	cpc	r23, r1
    4f38:	a0 e8       	ldi	r26, 0x80	; 128
    4f3a:	8a 07       	cpc	r24, r26
    4f3c:	b9 46       	sbci	r27, 0x69	; 105
    4f3e:	30 f4       	brcc	.+12     	; 0x4f4c <modf+0x58>
    4f40:	9b 01       	movw	r18, r22
    4f42:	ac 01       	movw	r20, r24
    4f44:	66 27       	eor	r22, r22
    4f46:	77 27       	eor	r23, r23
    4f48:	88 27       	eor	r24, r24
    4f4a:	90 78       	andi	r25, 0x80	; 128
    4f4c:	30 96       	adiw	r30, 0x00	; 0
    4f4e:	21 f0       	breq	.+8      	; 0x4f58 <modf+0x64>
    4f50:	20 83       	st	Z, r18
    4f52:	31 83       	std	Z+1, r19	; 0x01
    4f54:	42 83       	std	Z+2, r20	; 0x02
    4f56:	53 83       	std	Z+3, r21	; 0x03
    4f58:	08 95       	ret

00004f5a <__divmodhi4>:
    4f5a:	97 fb       	bst	r25, 7
    4f5c:	07 2e       	mov	r0, r23
    4f5e:	16 f4       	brtc	.+4      	; 0x4f64 <__divmodhi4+0xa>
    4f60:	00 94       	com	r0
    4f62:	07 d0       	rcall	.+14     	; 0x4f72 <__divmodhi4_neg1>
    4f64:	77 fd       	sbrc	r23, 7
    4f66:	09 d0       	rcall	.+18     	; 0x4f7a <__divmodhi4_neg2>
    4f68:	0e 94 11 28 	call	0x5022	; 0x5022 <__udivmodhi4>
    4f6c:	07 fc       	sbrc	r0, 7
    4f6e:	05 d0       	rcall	.+10     	; 0x4f7a <__divmodhi4_neg2>
    4f70:	3e f4       	brtc	.+14     	; 0x4f80 <__divmodhi4_exit>

00004f72 <__divmodhi4_neg1>:
    4f72:	90 95       	com	r25
    4f74:	81 95       	neg	r24
    4f76:	9f 4f       	sbci	r25, 0xFF	; 255
    4f78:	08 95       	ret

00004f7a <__divmodhi4_neg2>:
    4f7a:	70 95       	com	r23
    4f7c:	61 95       	neg	r22
    4f7e:	7f 4f       	sbci	r23, 0xFF	; 255

00004f80 <__divmodhi4_exit>:
    4f80:	08 95       	ret

00004f82 <__divmodsi4>:
    4f82:	05 2e       	mov	r0, r21
    4f84:	97 fb       	bst	r25, 7
    4f86:	1e f4       	brtc	.+6      	; 0x4f8e <__divmodsi4+0xc>
    4f88:	00 94       	com	r0
    4f8a:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <__negsi2>
    4f8e:	57 fd       	sbrc	r21, 7
    4f90:	07 d0       	rcall	.+14     	; 0x4fa0 <__divmodsi4_neg2>
    4f92:	0e 94 25 28 	call	0x504a	; 0x504a <__udivmodsi4>
    4f96:	07 fc       	sbrc	r0, 7
    4f98:	03 d0       	rcall	.+6      	; 0x4fa0 <__divmodsi4_neg2>
    4f9a:	4e f4       	brtc	.+18     	; 0x4fae <__divmodsi4_exit>
    4f9c:	0c 94 d8 27 	jmp	0x4fb0	; 0x4fb0 <__negsi2>

00004fa0 <__divmodsi4_neg2>:
    4fa0:	50 95       	com	r21
    4fa2:	40 95       	com	r20
    4fa4:	30 95       	com	r19
    4fa6:	21 95       	neg	r18
    4fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    4faa:	4f 4f       	sbci	r20, 0xFF	; 255
    4fac:	5f 4f       	sbci	r21, 0xFF	; 255

00004fae <__divmodsi4_exit>:
    4fae:	08 95       	ret

00004fb0 <__negsi2>:
    4fb0:	90 95       	com	r25
    4fb2:	80 95       	com	r24
    4fb4:	70 95       	com	r23
    4fb6:	61 95       	neg	r22
    4fb8:	7f 4f       	sbci	r23, 0xFF	; 255
    4fba:	8f 4f       	sbci	r24, 0xFF	; 255
    4fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    4fbe:	08 95       	ret

00004fc0 <__mulhisi3>:
    4fc0:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <__umulhisi3>
    4fc4:	33 23       	and	r19, r19
    4fc6:	12 f4       	brpl	.+4      	; 0x4fcc <__mulhisi3+0xc>
    4fc8:	8a 1b       	sub	r24, r26
    4fca:	9b 0b       	sbc	r25, r27
    4fcc:	0c 94 f9 27 	jmp	0x4ff2	; 0x4ff2 <__usmulhisi3_tail>

00004fd0 <__umulhisi3>:
    4fd0:	a2 9f       	mul	r26, r18
    4fd2:	b0 01       	movw	r22, r0
    4fd4:	b3 9f       	mul	r27, r19
    4fd6:	c0 01       	movw	r24, r0
    4fd8:	a3 9f       	mul	r26, r19
    4fda:	70 0d       	add	r23, r0
    4fdc:	81 1d       	adc	r24, r1
    4fde:	11 24       	eor	r1, r1
    4fe0:	91 1d       	adc	r25, r1
    4fe2:	b2 9f       	mul	r27, r18
    4fe4:	70 0d       	add	r23, r0
    4fe6:	81 1d       	adc	r24, r1
    4fe8:	11 24       	eor	r1, r1
    4fea:	91 1d       	adc	r25, r1
    4fec:	08 95       	ret

00004fee <__usmulhisi3>:
    4fee:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <__umulhisi3>

00004ff2 <__usmulhisi3_tail>:
    4ff2:	b7 ff       	sbrs	r27, 7
    4ff4:	08 95       	ret
    4ff6:	82 1b       	sub	r24, r18
    4ff8:	93 0b       	sbc	r25, r19
    4ffa:	08 95       	ret

00004ffc <__muluhisi3>:
    4ffc:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <__umulhisi3>
    5000:	a5 9f       	mul	r26, r21
    5002:	90 0d       	add	r25, r0
    5004:	b4 9f       	mul	r27, r20
    5006:	90 0d       	add	r25, r0
    5008:	a4 9f       	mul	r26, r20
    500a:	80 0d       	add	r24, r0
    500c:	91 1d       	adc	r25, r1
    500e:	11 24       	eor	r1, r1
    5010:	08 95       	ret

00005012 <__mulshisi3>:
    5012:	b7 ff       	sbrs	r27, 7
    5014:	0c 94 fe 27 	jmp	0x4ffc	; 0x4ffc <__muluhisi3>

00005018 <__mulohisi3>:
    5018:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__muluhisi3>
    501c:	82 1b       	sub	r24, r18
    501e:	93 0b       	sbc	r25, r19
    5020:	08 95       	ret

00005022 <__udivmodhi4>:
    5022:	aa 1b       	sub	r26, r26
    5024:	bb 1b       	sub	r27, r27
    5026:	51 e1       	ldi	r21, 0x11	; 17
    5028:	07 c0       	rjmp	.+14     	; 0x5038 <__udivmodhi4_ep>

0000502a <__udivmodhi4_loop>:
    502a:	aa 1f       	adc	r26, r26
    502c:	bb 1f       	adc	r27, r27
    502e:	a6 17       	cp	r26, r22
    5030:	b7 07       	cpc	r27, r23
    5032:	10 f0       	brcs	.+4      	; 0x5038 <__udivmodhi4_ep>
    5034:	a6 1b       	sub	r26, r22
    5036:	b7 0b       	sbc	r27, r23

00005038 <__udivmodhi4_ep>:
    5038:	88 1f       	adc	r24, r24
    503a:	99 1f       	adc	r25, r25
    503c:	5a 95       	dec	r21
    503e:	a9 f7       	brne	.-22     	; 0x502a <__udivmodhi4_loop>
    5040:	80 95       	com	r24
    5042:	90 95       	com	r25
    5044:	bc 01       	movw	r22, r24
    5046:	cd 01       	movw	r24, r26
    5048:	08 95       	ret

0000504a <__udivmodsi4>:
    504a:	a1 e2       	ldi	r26, 0x21	; 33
    504c:	1a 2e       	mov	r1, r26
    504e:	aa 1b       	sub	r26, r26
    5050:	bb 1b       	sub	r27, r27
    5052:	fd 01       	movw	r30, r26
    5054:	0d c0       	rjmp	.+26     	; 0x5070 <__udivmodsi4_ep>

00005056 <__udivmodsi4_loop>:
    5056:	aa 1f       	adc	r26, r26
    5058:	bb 1f       	adc	r27, r27
    505a:	ee 1f       	adc	r30, r30
    505c:	ff 1f       	adc	r31, r31
    505e:	a2 17       	cp	r26, r18
    5060:	b3 07       	cpc	r27, r19
    5062:	e4 07       	cpc	r30, r20
    5064:	f5 07       	cpc	r31, r21
    5066:	20 f0       	brcs	.+8      	; 0x5070 <__udivmodsi4_ep>
    5068:	a2 1b       	sub	r26, r18
    506a:	b3 0b       	sbc	r27, r19
    506c:	e4 0b       	sbc	r30, r20
    506e:	f5 0b       	sbc	r31, r21

00005070 <__udivmodsi4_ep>:
    5070:	66 1f       	adc	r22, r22
    5072:	77 1f       	adc	r23, r23
    5074:	88 1f       	adc	r24, r24
    5076:	99 1f       	adc	r25, r25
    5078:	1a 94       	dec	r1
    507a:	69 f7       	brne	.-38     	; 0x5056 <__udivmodsi4_loop>
    507c:	60 95       	com	r22
    507e:	70 95       	com	r23
    5080:	80 95       	com	r24
    5082:	90 95       	com	r25
    5084:	9b 01       	movw	r18, r22
    5086:	ac 01       	movw	r20, r24
    5088:	bd 01       	movw	r22, r26
    508a:	cf 01       	movw	r24, r30
    508c:	08 95       	ret

0000508e <__eerd_word_m328p>:
    508e:	a8 e1       	ldi	r26, 0x18	; 24
    5090:	b0 e0       	ldi	r27, 0x00	; 0
    5092:	42 e0       	ldi	r20, 0x02	; 2
    5094:	50 e0       	ldi	r21, 0x00	; 0
    5096:	0c 94 6c 28 	jmp	0x50d8	; 0x50d8 <__eerd_blraw_m328p>

0000509a <__eewr_block_m328p>:
    509a:	dc 01       	movw	r26, r24
    509c:	cb 01       	movw	r24, r22
    509e:	03 c0       	rjmp	.+6      	; 0x50a6 <__eewr_block_m328p+0xc>
    50a0:	2d 91       	ld	r18, X+
    50a2:	0e 94 58 28 	call	0x50b0	; 0x50b0 <__eewr_r18_m328p>
    50a6:	41 50       	subi	r20, 0x01	; 1
    50a8:	50 40       	sbci	r21, 0x00	; 0
    50aa:	d0 f7       	brcc	.-12     	; 0x50a0 <__eewr_block_m328p+0x6>
    50ac:	08 95       	ret

000050ae <__eewr_byte_m328p>:
    50ae:	26 2f       	mov	r18, r22

000050b0 <__eewr_r18_m328p>:
    50b0:	f9 99       	sbic	0x1f, 1	; 31
    50b2:	fe cf       	rjmp	.-4      	; 0x50b0 <__eewr_r18_m328p>
    50b4:	1f ba       	out	0x1f, r1	; 31
    50b6:	92 bd       	out	0x22, r25	; 34
    50b8:	81 bd       	out	0x21, r24	; 33
    50ba:	20 bd       	out	0x20, r18	; 32
    50bc:	0f b6       	in	r0, 0x3f	; 63
    50be:	f8 94       	cli
    50c0:	fa 9a       	sbi	0x1f, 2	; 31
    50c2:	f9 9a       	sbi	0x1f, 1	; 31
    50c4:	0f be       	out	0x3f, r0	; 63
    50c6:	01 96       	adiw	r24, 0x01	; 1
    50c8:	08 95       	ret

000050ca <__eewr_word_m328p>:
    50ca:	0e 94 57 28 	call	0x50ae	; 0x50ae <__eewr_byte_m328p>
    50ce:	27 2f       	mov	r18, r23
    50d0:	0c 94 58 28 	jmp	0x50b0	; 0x50b0 <__eewr_r18_m328p>

000050d4 <__eerd_block_m328p>:
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22

000050d8 <__eerd_blraw_m328p>:
    50d8:	fc 01       	movw	r30, r24
    50da:	f9 99       	sbic	0x1f, 1	; 31
    50dc:	fe cf       	rjmp	.-4      	; 0x50da <__eerd_blraw_m328p+0x2>
    50de:	06 c0       	rjmp	.+12     	; 0x50ec <__eerd_blraw_m328p+0x14>
    50e0:	f2 bd       	out	0x22, r31	; 34
    50e2:	e1 bd       	out	0x21, r30	; 33
    50e4:	f8 9a       	sbi	0x1f, 0	; 31
    50e6:	31 96       	adiw	r30, 0x01	; 1
    50e8:	00 b4       	in	r0, 0x20	; 32
    50ea:	0d 92       	st	X+, r0
    50ec:	41 50       	subi	r20, 0x01	; 1
    50ee:	50 40       	sbci	r21, 0x00	; 0
    50f0:	b8 f7       	brcc	.-18     	; 0x50e0 <__eerd_blraw_m328p+0x8>
    50f2:	08 95       	ret

000050f4 <_exit>:
    50f4:	f8 94       	cli

000050f6 <__stop_program>:
    50f6:	ff cf       	rjmp	.-2      	; 0x50f6 <__stop_program>
